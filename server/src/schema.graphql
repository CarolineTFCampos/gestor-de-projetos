# import Resource, ResourceWhereUniqueInput, ResourceWhereInput, ResourceOrderByInput, ResourceCreateInput, ResourceUpdateInput, Risk, RiskWhereUniqueInput, RiskWhereInput, RiskOrderByInput, RiskCreateInput, RiskUpdateInput, Iteration, IterationWhereUniqueInput, IterationWhereInput, IterationOrderByInput, IterationCreateInput, IterationUpdateInput, Release, ReleaseWhereUniqueInput, ReleaseWhereInput, ReleaseOrderByInput, ReleaseCreateInput, ReleaseUpdateInput, Milestone, MilestoneWhereUniqueInput, MilestoneWhereInput, MilestoneOrderByInput, MilestoneCreateInput, MilestoneUpdateInput, ProjectRoleContributor, ProjectRoleContributorCreateInput, ProjectRoleContributorUpdateInput, ProjectRoleContributorWhereUniqueInput, ProjectRole, ProjectRoleCreateInput, ProjectRoleUpdateInput, ProjectRoleWhereUniqueInput, UserStory, UserStoryWhereInput, UserStoryOrderByInput, UserStoryWhereUniqueInput, UserStoryCreateInput, UserStoryUpdateInput, Epic, EpicWhereInput, EpicOrderByInput, EpicWhereUniqueInput, EpicCreateInput, EpicUpdateInput, Project, ProjectWhereInput, ProjectOrderByInput, ProjectWhereUniqueInput, ProjectCreateInput, ProjectUpdateInput, Contributor, ContributorWhereInput, ContributorOrderByInput, ContributorWhereUniqueInput, ContributorCreateInput, ContributorUpdateInput from "./generated/prisma.graphql"

type User {
  id: ID!
  name: String!
  email: String!
}

type AuthPayload {
  user: User!
  token: String!
}

type Query {
  me: User

  role(where: RoleWhereUniqueInput!): Role
  roles(
    where: RoleWhereInput
    orderBy: RoleOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Role]!

  contributor(where: ContributorWhereUniqueInput!): Contributor
  contributors(
    where: ContributorWhereInput
    orderBy: ContributorOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Contributor]!

  project(where: ProjectWhereUniqueInput!): Project
  projects(
    where: ProjectWhereInput
    orderBy: ProjectOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Project]!

  epic(where: EpicWhereUniqueInput!): Epic
  epics(
    where: EpicWhereInput
    orderBy: EpicOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Epic]!

  userStory(where: UserStoryWhereUniqueInput!): UserStory
  userStories(
    where: UserStoryWhereInput
    orderBy: UserStoryOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [UserStory]!

  milestone(where: MilestoneWhereUniqueInput!): Milestone
  milestones(
    where: MilestoneWhereInput
    orderBy: MilestoneOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Milestone]!

  resource(where: ResourceWhereUniqueInput!): Resource
  resources(
    where: ResourceWhereInput
    orderBy: ResourceOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Resource]!

  release(where: ReleaseWhereUniqueInput!): Release
  releases(
    where: ReleaseWhereInput
    orderBy: ReleaseOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Release]!

  iteration(where: IterationWhereUniqueInput!): Iteration
  iterations(
    where: IterationWhereInput
    orderBy: IterationOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Iteration]!

  risk(where: RiskWhereUniqueInput!): Risk
  risks(
    where: RiskWhereInput
    orderBy: RiskOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Risk]!
}

type Mutation {
  signin(email: String!, password: String!): AuthPayload!
  # signup(email: String!, password: String!, name: String!): AuthPayload!

  createRole(data: RoleCreateInput!): Role!
  updateRole(data: RoleUpdateInput!, where: RoleWhereUniqueInput!): Role
  deleteRole(where: RoleWhereUniqueInput!): Role

  createContributor(data: ContributorCreateInput!): Contributor!
  updateContributor(
    data: ContributorUpdateInput!
    where: ContributorWhereUniqueInput!
  ): Contributor
  deleteContributor(where: ContributorWhereUniqueInput!): Contributor

  createProjectRole(data: ProjectRoleCreateInput!): ProjectRole!
  updateProjectRole(
    data: ProjectRoleUpdateInput!
    where: ProjectRoleWhereUniqueInput!
  ): ProjectRole
  deleteProjectRole(where: ProjectRoleWhereUniqueInput!): ProjectRole

  createProjectRoleContributor(
    data: ProjectRoleContributorCreateInput!
  ): ProjectRoleContributor!
  updateProjectRoleContributor(
    data: ProjectRoleContributorUpdateInput!
    where: ProjectRoleContributorWhereUniqueInput!
  ): ProjectRoleContributor
  deleteProjectRoleContributor(
    where: ProjectRoleContributorWhereUniqueInput!
  ): ProjectRoleContributor

  createProject(data: ProjectCreateInput!): Project!
  updateProject(
    data: ProjectUpdateInput!
    where: ProjectWhereUniqueInput!
  ): Project
  deleteProject(where: ProjectWhereUniqueInput!): Project

  createEpic(data: EpicCreateInput!): Epic!
  updateEpic(data: EpicUpdateInput!, where: EpicWhereUniqueInput!): Epic
  deleteEpic(where: EpicWhereUniqueInput!): Epic

  createUserStory(data: UserStoryCreateInput!): UserStory!
  updateUserStory(
    data: UserStoryUpdateInput!
    where: UserStoryWhereUniqueInput!
  ): UserStory
  deleteUserStory(where: UserStoryWhereUniqueInput!): UserStory

  createMilestone(data: MilestoneCreateInput!): Milestone!
  updateMilestone(
    data: MilestoneUpdateInput!
    where: MilestoneWhereUniqueInput!
  ): Milestone
  deleteMilestone(where: MilestoneWhereUniqueInput!): Milestone

  createResource(data: ResourceCreateInput!): Resource!
  updateResource(
    data: ResourceUpdateInput!
    where: ResourceWhereUniqueInput!
  ): Resource
  deleteResource(where: ResourceWhereUniqueInput!): Resource

  createRelease(data: ReleaseCreateInput!): Release!
  updateRelease(
    data: ReleaseUpdateInput!
    where: ReleaseWhereUniqueInput!
  ): Release
  deleteRelease(where: ReleaseWhereUniqueInput!): Release

  createIteration(data: IterationCreateInput!): Iteration!
  updateIteration(
    data: IterationUpdateInput!
    where: IterationWhereUniqueInput!
  ): Iteration
  deleteIteration(where: IterationWhereUniqueInput!): Iteration

  createRisk(data: RiskCreateInput!): Risk!
  updateRisk(data: RiskUpdateInput!, where: RiskWhereUniqueInput!): Risk
  deleteRisk(where: RiskWhereUniqueInput!): Risk
}
