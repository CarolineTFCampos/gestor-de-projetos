# source: https://us1.prisma.sh/carolineedecampos-881f88/gestor-de-projetos/dev
# timestamp: Mon Dec 03 2018 03:22:07 GMT-0200 (-02)

type AggregateContributor {
  count: Int!
}

type AggregateContributorExperience {
  count: Int!
}

type AggregateContributorFormation {
  count: Int!
}

type AggregateEpic {
  count: Int!
}

type AggregateIteration {
  count: Int!
}

type AggregateMilestone {
  count: Int!
}

type AggregateProject {
  count: Int!
}

type AggregateProjectRole {
  count: Int!
}

type AggregateProjectRoleContributor {
  count: Int!
}

type AggregateRelease {
  count: Int!
}

type AggregateResource {
  count: Int!
}

type AggregateRisk {
  count: Int!
}

type AggregateRole {
  count: Int!
}

type AggregateRoleLevel {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type AggregateUserStory {
  count: Int!
}

type BatchPayload {
  """The number of nodes that have been affected by the Batch operation."""
  count: Long!
}

type Contributor implements Node {
  id: ID!
  name: String!
  email: String!
  emailPrivate: String
  doc: String!
  phone: String!
  address: String!
  price: Float!
  active: Boolean!
  twPeopleId: String
  createdAt: DateTime!
  updatedAt: DateTime!
  projectRoles(where: ProjectRoleContributorWhereInput, orderBy: ProjectRoleContributorOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ProjectRoleContributor!]
  experiences(where: ContributorExperienceWhereInput, orderBy: ContributorExperienceOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ContributorExperience!]
  formations(where: ContributorFormationWhereInput, orderBy: ContributorFormationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ContributorFormation!]
  milestones(where: MilestoneWhereInput, orderBy: MilestoneOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Milestone!]
}

"""A connection to a list of items."""
type ContributorConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ContributorEdge]!
  aggregate: AggregateContributor!
}

input ContributorCreateInput {
  name: String!
  email: String!
  emailPrivate: String
  doc: String!
  phone: String!
  address: String!
  price: Float
  active: Boolean
  twPeopleId: String
  projectRoles: ProjectRoleContributorCreateManyWithoutContributorInput
  experiences: ContributorExperienceCreateManyWithoutContributorInput
  formations: ContributorFormationCreateManyWithoutContributorInput
  milestones: MilestoneCreateManyWithoutContributorInput
}

input ContributorCreateOneWithoutExperiencesInput {
  create: ContributorCreateWithoutExperiencesInput
  connect: ContributorWhereUniqueInput
}

input ContributorCreateOneWithoutFormationsInput {
  create: ContributorCreateWithoutFormationsInput
  connect: ContributorWhereUniqueInput
}

input ContributorCreateOneWithoutMilestonesInput {
  create: ContributorCreateWithoutMilestonesInput
  connect: ContributorWhereUniqueInput
}

input ContributorCreateOneWithoutProjectRolesInput {
  create: ContributorCreateWithoutProjectRolesInput
  connect: ContributorWhereUniqueInput
}

input ContributorCreateWithoutExperiencesInput {
  name: String!
  email: String!
  emailPrivate: String
  doc: String!
  phone: String!
  address: String!
  price: Float
  active: Boolean
  twPeopleId: String
  projectRoles: ProjectRoleContributorCreateManyWithoutContributorInput
  formations: ContributorFormationCreateManyWithoutContributorInput
  milestones: MilestoneCreateManyWithoutContributorInput
}

input ContributorCreateWithoutFormationsInput {
  name: String!
  email: String!
  emailPrivate: String
  doc: String!
  phone: String!
  address: String!
  price: Float
  active: Boolean
  twPeopleId: String
  projectRoles: ProjectRoleContributorCreateManyWithoutContributorInput
  experiences: ContributorExperienceCreateManyWithoutContributorInput
  milestones: MilestoneCreateManyWithoutContributorInput
}

input ContributorCreateWithoutMilestonesInput {
  name: String!
  email: String!
  emailPrivate: String
  doc: String!
  phone: String!
  address: String!
  price: Float
  active: Boolean
  twPeopleId: String
  projectRoles: ProjectRoleContributorCreateManyWithoutContributorInput
  experiences: ContributorExperienceCreateManyWithoutContributorInput
  formations: ContributorFormationCreateManyWithoutContributorInput
}

input ContributorCreateWithoutProjectRolesInput {
  name: String!
  email: String!
  emailPrivate: String
  doc: String!
  phone: String!
  address: String!
  price: Float
  active: Boolean
  twPeopleId: String
  experiences: ContributorExperienceCreateManyWithoutContributorInput
  formations: ContributorFormationCreateManyWithoutContributorInput
  milestones: MilestoneCreateManyWithoutContributorInput
}

"""An edge in a connection."""
type ContributorEdge {
  """The item at the end of the edge."""
  node: Contributor!

  """A cursor for use in pagination."""
  cursor: String!
}

type ContributorExperience implements Node {
  id: ID!
  name: String!
  company: String!
  description: String
  startAt: DateTime!
  endAt: DateTime!
  createdAt: DateTime!
  updatedAt: DateTime!
  contributor: Contributor!
}

"""A connection to a list of items."""
type ContributorExperienceConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ContributorExperienceEdge]!
  aggregate: AggregateContributorExperience!
}

input ContributorExperienceCreateInput {
  name: String!
  company: String!
  description: String
  startAt: DateTime!
  endAt: DateTime!
  contributor: ContributorCreateOneWithoutExperiencesInput!
}

input ContributorExperienceCreateManyWithoutContributorInput {
  create: [ContributorExperienceCreateWithoutContributorInput!]
  connect: [ContributorExperienceWhereUniqueInput!]
}

input ContributorExperienceCreateWithoutContributorInput {
  name: String!
  company: String!
  description: String
  startAt: DateTime!
  endAt: DateTime!
}

"""An edge in a connection."""
type ContributorExperienceEdge {
  """The item at the end of the edge."""
  node: ContributorExperience!

  """A cursor for use in pagination."""
  cursor: String!
}

enum ContributorExperienceOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  company_ASC
  company_DESC
  description_ASC
  description_DESC
  startAt_ASC
  startAt_DESC
  endAt_ASC
  endAt_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type ContributorExperiencePreviousValues {
  id: ID!
  name: String!
  company: String!
  description: String
  startAt: DateTime!
  endAt: DateTime!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input ContributorExperienceScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [ContributorExperienceScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [ContributorExperienceScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ContributorExperienceScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  company: String

  """All values that are not equal to given value."""
  company_not: String

  """All values that are contained in given list."""
  company_in: [String!]

  """All values that are not contained in given list."""
  company_not_in: [String!]

  """All values less than the given value."""
  company_lt: String

  """All values less than or equal the given value."""
  company_lte: String

  """All values greater than the given value."""
  company_gt: String

  """All values greater than or equal the given value."""
  company_gte: String

  """All values containing the given string."""
  company_contains: String

  """All values not containing the given string."""
  company_not_contains: String

  """All values starting with the given string."""
  company_starts_with: String

  """All values not starting with the given string."""
  company_not_starts_with: String

  """All values ending with the given string."""
  company_ends_with: String

  """All values not ending with the given string."""
  company_not_ends_with: String
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
  startAt: DateTime

  """All values that are not equal to given value."""
  startAt_not: DateTime

  """All values that are contained in given list."""
  startAt_in: [DateTime!]

  """All values that are not contained in given list."""
  startAt_not_in: [DateTime!]

  """All values less than the given value."""
  startAt_lt: DateTime

  """All values less than or equal the given value."""
  startAt_lte: DateTime

  """All values greater than the given value."""
  startAt_gt: DateTime

  """All values greater than or equal the given value."""
  startAt_gte: DateTime
  endAt: DateTime

  """All values that are not equal to given value."""
  endAt_not: DateTime

  """All values that are contained in given list."""
  endAt_in: [DateTime!]

  """All values that are not contained in given list."""
  endAt_not_in: [DateTime!]

  """All values less than the given value."""
  endAt_lt: DateTime

  """All values less than or equal the given value."""
  endAt_lte: DateTime

  """All values greater than the given value."""
  endAt_gt: DateTime

  """All values greater than or equal the given value."""
  endAt_gte: DateTime
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
}

type ContributorExperienceSubscriptionPayload {
  mutation: MutationType!
  node: ContributorExperience
  updatedFields: [String!]
  previousValues: ContributorExperiencePreviousValues
}

input ContributorExperienceSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [ContributorExperienceSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [ContributorExperienceSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ContributorExperienceSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: ContributorExperienceWhereInput
}

input ContributorExperienceUpdateInput {
  name: String
  company: String
  description: String
  startAt: DateTime
  endAt: DateTime
  contributor: ContributorUpdateOneRequiredWithoutExperiencesInput
}

input ContributorExperienceUpdateManyDataInput {
  name: String
  company: String
  description: String
  startAt: DateTime
  endAt: DateTime
}

input ContributorExperienceUpdateManyMutationInput {
  name: String
  company: String
  description: String
  startAt: DateTime
  endAt: DateTime
}

input ContributorExperienceUpdateManyWithoutContributorInput {
  create: [ContributorExperienceCreateWithoutContributorInput!]
  connect: [ContributorExperienceWhereUniqueInput!]
  disconnect: [ContributorExperienceWhereUniqueInput!]
  delete: [ContributorExperienceWhereUniqueInput!]
  update: [ContributorExperienceUpdateWithWhereUniqueWithoutContributorInput!]
  updateMany: [ContributorExperienceUpdateManyWithWhereNestedInput!]
  deleteMany: [ContributorExperienceScalarWhereInput!]
  upsert: [ContributorExperienceUpsertWithWhereUniqueWithoutContributorInput!]
}

input ContributorExperienceUpdateManyWithWhereNestedInput {
  where: ContributorExperienceScalarWhereInput!
  data: ContributorExperienceUpdateManyDataInput!
}

input ContributorExperienceUpdateWithoutContributorDataInput {
  name: String
  company: String
  description: String
  startAt: DateTime
  endAt: DateTime
}

input ContributorExperienceUpdateWithWhereUniqueWithoutContributorInput {
  where: ContributorExperienceWhereUniqueInput!
  data: ContributorExperienceUpdateWithoutContributorDataInput!
}

input ContributorExperienceUpsertWithWhereUniqueWithoutContributorInput {
  where: ContributorExperienceWhereUniqueInput!
  update: ContributorExperienceUpdateWithoutContributorDataInput!
  create: ContributorExperienceCreateWithoutContributorInput!
}

input ContributorExperienceWhereInput {
  """Logical AND on all given filters."""
  AND: [ContributorExperienceWhereInput!]

  """Logical OR on all given filters."""
  OR: [ContributorExperienceWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ContributorExperienceWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  company: String

  """All values that are not equal to given value."""
  company_not: String

  """All values that are contained in given list."""
  company_in: [String!]

  """All values that are not contained in given list."""
  company_not_in: [String!]

  """All values less than the given value."""
  company_lt: String

  """All values less than or equal the given value."""
  company_lte: String

  """All values greater than the given value."""
  company_gt: String

  """All values greater than or equal the given value."""
  company_gte: String

  """All values containing the given string."""
  company_contains: String

  """All values not containing the given string."""
  company_not_contains: String

  """All values starting with the given string."""
  company_starts_with: String

  """All values not starting with the given string."""
  company_not_starts_with: String

  """All values ending with the given string."""
  company_ends_with: String

  """All values not ending with the given string."""
  company_not_ends_with: String
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
  startAt: DateTime

  """All values that are not equal to given value."""
  startAt_not: DateTime

  """All values that are contained in given list."""
  startAt_in: [DateTime!]

  """All values that are not contained in given list."""
  startAt_not_in: [DateTime!]

  """All values less than the given value."""
  startAt_lt: DateTime

  """All values less than or equal the given value."""
  startAt_lte: DateTime

  """All values greater than the given value."""
  startAt_gt: DateTime

  """All values greater than or equal the given value."""
  startAt_gte: DateTime
  endAt: DateTime

  """All values that are not equal to given value."""
  endAt_not: DateTime

  """All values that are contained in given list."""
  endAt_in: [DateTime!]

  """All values that are not contained in given list."""
  endAt_not_in: [DateTime!]

  """All values less than the given value."""
  endAt_lt: DateTime

  """All values less than or equal the given value."""
  endAt_lte: DateTime

  """All values greater than the given value."""
  endAt_gt: DateTime

  """All values greater than or equal the given value."""
  endAt_gte: DateTime
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  contributor: ContributorWhereInput
}

input ContributorExperienceWhereUniqueInput {
  id: ID
}

type ContributorFormation implements Node {
  id: ID!
  name: String!
  institution: String!
  description: String
  startAt: DateTime!
  endAt: DateTime!
  createdAt: DateTime!
  updatedAt: DateTime!
  contributor: Contributor!
}

"""A connection to a list of items."""
type ContributorFormationConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ContributorFormationEdge]!
  aggregate: AggregateContributorFormation!
}

input ContributorFormationCreateInput {
  name: String!
  institution: String!
  description: String
  startAt: DateTime!
  endAt: DateTime!
  contributor: ContributorCreateOneWithoutFormationsInput!
}

input ContributorFormationCreateManyWithoutContributorInput {
  create: [ContributorFormationCreateWithoutContributorInput!]
  connect: [ContributorFormationWhereUniqueInput!]
}

input ContributorFormationCreateWithoutContributorInput {
  name: String!
  institution: String!
  description: String
  startAt: DateTime!
  endAt: DateTime!
}

"""An edge in a connection."""
type ContributorFormationEdge {
  """The item at the end of the edge."""
  node: ContributorFormation!

  """A cursor for use in pagination."""
  cursor: String!
}

enum ContributorFormationOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  institution_ASC
  institution_DESC
  description_ASC
  description_DESC
  startAt_ASC
  startAt_DESC
  endAt_ASC
  endAt_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type ContributorFormationPreviousValues {
  id: ID!
  name: String!
  institution: String!
  description: String
  startAt: DateTime!
  endAt: DateTime!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input ContributorFormationScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [ContributorFormationScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [ContributorFormationScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ContributorFormationScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  institution: String

  """All values that are not equal to given value."""
  institution_not: String

  """All values that are contained in given list."""
  institution_in: [String!]

  """All values that are not contained in given list."""
  institution_not_in: [String!]

  """All values less than the given value."""
  institution_lt: String

  """All values less than or equal the given value."""
  institution_lte: String

  """All values greater than the given value."""
  institution_gt: String

  """All values greater than or equal the given value."""
  institution_gte: String

  """All values containing the given string."""
  institution_contains: String

  """All values not containing the given string."""
  institution_not_contains: String

  """All values starting with the given string."""
  institution_starts_with: String

  """All values not starting with the given string."""
  institution_not_starts_with: String

  """All values ending with the given string."""
  institution_ends_with: String

  """All values not ending with the given string."""
  institution_not_ends_with: String
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
  startAt: DateTime

  """All values that are not equal to given value."""
  startAt_not: DateTime

  """All values that are contained in given list."""
  startAt_in: [DateTime!]

  """All values that are not contained in given list."""
  startAt_not_in: [DateTime!]

  """All values less than the given value."""
  startAt_lt: DateTime

  """All values less than or equal the given value."""
  startAt_lte: DateTime

  """All values greater than the given value."""
  startAt_gt: DateTime

  """All values greater than or equal the given value."""
  startAt_gte: DateTime
  endAt: DateTime

  """All values that are not equal to given value."""
  endAt_not: DateTime

  """All values that are contained in given list."""
  endAt_in: [DateTime!]

  """All values that are not contained in given list."""
  endAt_not_in: [DateTime!]

  """All values less than the given value."""
  endAt_lt: DateTime

  """All values less than or equal the given value."""
  endAt_lte: DateTime

  """All values greater than the given value."""
  endAt_gt: DateTime

  """All values greater than or equal the given value."""
  endAt_gte: DateTime
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
}

type ContributorFormationSubscriptionPayload {
  mutation: MutationType!
  node: ContributorFormation
  updatedFields: [String!]
  previousValues: ContributorFormationPreviousValues
}

input ContributorFormationSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [ContributorFormationSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [ContributorFormationSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ContributorFormationSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: ContributorFormationWhereInput
}

input ContributorFormationUpdateInput {
  name: String
  institution: String
  description: String
  startAt: DateTime
  endAt: DateTime
  contributor: ContributorUpdateOneRequiredWithoutFormationsInput
}

input ContributorFormationUpdateManyDataInput {
  name: String
  institution: String
  description: String
  startAt: DateTime
  endAt: DateTime
}

input ContributorFormationUpdateManyMutationInput {
  name: String
  institution: String
  description: String
  startAt: DateTime
  endAt: DateTime
}

input ContributorFormationUpdateManyWithoutContributorInput {
  create: [ContributorFormationCreateWithoutContributorInput!]
  connect: [ContributorFormationWhereUniqueInput!]
  disconnect: [ContributorFormationWhereUniqueInput!]
  delete: [ContributorFormationWhereUniqueInput!]
  update: [ContributorFormationUpdateWithWhereUniqueWithoutContributorInput!]
  updateMany: [ContributorFormationUpdateManyWithWhereNestedInput!]
  deleteMany: [ContributorFormationScalarWhereInput!]
  upsert: [ContributorFormationUpsertWithWhereUniqueWithoutContributorInput!]
}

input ContributorFormationUpdateManyWithWhereNestedInput {
  where: ContributorFormationScalarWhereInput!
  data: ContributorFormationUpdateManyDataInput!
}

input ContributorFormationUpdateWithoutContributorDataInput {
  name: String
  institution: String
  description: String
  startAt: DateTime
  endAt: DateTime
}

input ContributorFormationUpdateWithWhereUniqueWithoutContributorInput {
  where: ContributorFormationWhereUniqueInput!
  data: ContributorFormationUpdateWithoutContributorDataInput!
}

input ContributorFormationUpsertWithWhereUniqueWithoutContributorInput {
  where: ContributorFormationWhereUniqueInput!
  update: ContributorFormationUpdateWithoutContributorDataInput!
  create: ContributorFormationCreateWithoutContributorInput!
}

input ContributorFormationWhereInput {
  """Logical AND on all given filters."""
  AND: [ContributorFormationWhereInput!]

  """Logical OR on all given filters."""
  OR: [ContributorFormationWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ContributorFormationWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  institution: String

  """All values that are not equal to given value."""
  institution_not: String

  """All values that are contained in given list."""
  institution_in: [String!]

  """All values that are not contained in given list."""
  institution_not_in: [String!]

  """All values less than the given value."""
  institution_lt: String

  """All values less than or equal the given value."""
  institution_lte: String

  """All values greater than the given value."""
  institution_gt: String

  """All values greater than or equal the given value."""
  institution_gte: String

  """All values containing the given string."""
  institution_contains: String

  """All values not containing the given string."""
  institution_not_contains: String

  """All values starting with the given string."""
  institution_starts_with: String

  """All values not starting with the given string."""
  institution_not_starts_with: String

  """All values ending with the given string."""
  institution_ends_with: String

  """All values not ending with the given string."""
  institution_not_ends_with: String
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
  startAt: DateTime

  """All values that are not equal to given value."""
  startAt_not: DateTime

  """All values that are contained in given list."""
  startAt_in: [DateTime!]

  """All values that are not contained in given list."""
  startAt_not_in: [DateTime!]

  """All values less than the given value."""
  startAt_lt: DateTime

  """All values less than or equal the given value."""
  startAt_lte: DateTime

  """All values greater than the given value."""
  startAt_gt: DateTime

  """All values greater than or equal the given value."""
  startAt_gte: DateTime
  endAt: DateTime

  """All values that are not equal to given value."""
  endAt_not: DateTime

  """All values that are contained in given list."""
  endAt_in: [DateTime!]

  """All values that are not contained in given list."""
  endAt_not_in: [DateTime!]

  """All values less than the given value."""
  endAt_lt: DateTime

  """All values less than or equal the given value."""
  endAt_lte: DateTime

  """All values greater than the given value."""
  endAt_gt: DateTime

  """All values greater than or equal the given value."""
  endAt_gte: DateTime
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  contributor: ContributorWhereInput
}

input ContributorFormationWhereUniqueInput {
  id: ID
}

enum ContributorOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  email_ASC
  email_DESC
  emailPrivate_ASC
  emailPrivate_DESC
  doc_ASC
  doc_DESC
  phone_ASC
  phone_DESC
  address_ASC
  address_DESC
  price_ASC
  price_DESC
  active_ASC
  active_DESC
  twPeopleId_ASC
  twPeopleId_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type ContributorPreviousValues {
  id: ID!
  name: String!
  email: String!
  emailPrivate: String
  doc: String!
  phone: String!
  address: String!
  price: Float!
  active: Boolean!
  twPeopleId: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

type ContributorSubscriptionPayload {
  mutation: MutationType!
  node: Contributor
  updatedFields: [String!]
  previousValues: ContributorPreviousValues
}

input ContributorSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [ContributorSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [ContributorSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ContributorSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: ContributorWhereInput
}

input ContributorUpdateInput {
  name: String
  email: String
  emailPrivate: String
  doc: String
  phone: String
  address: String
  price: Float
  active: Boolean
  twPeopleId: String
  projectRoles: ProjectRoleContributorUpdateManyWithoutContributorInput
  experiences: ContributorExperienceUpdateManyWithoutContributorInput
  formations: ContributorFormationUpdateManyWithoutContributorInput
  milestones: MilestoneUpdateManyWithoutContributorInput
}

input ContributorUpdateManyMutationInput {
  name: String
  email: String
  emailPrivate: String
  doc: String
  phone: String
  address: String
  price: Float
  active: Boolean
  twPeopleId: String
}

input ContributorUpdateOneRequiredWithoutExperiencesInput {
  create: ContributorCreateWithoutExperiencesInput
  connect: ContributorWhereUniqueInput
  update: ContributorUpdateWithoutExperiencesDataInput
  upsert: ContributorUpsertWithoutExperiencesInput
}

input ContributorUpdateOneRequiredWithoutFormationsInput {
  create: ContributorCreateWithoutFormationsInput
  connect: ContributorWhereUniqueInput
  update: ContributorUpdateWithoutFormationsDataInput
  upsert: ContributorUpsertWithoutFormationsInput
}

input ContributorUpdateOneRequiredWithoutMilestonesInput {
  create: ContributorCreateWithoutMilestonesInput
  connect: ContributorWhereUniqueInput
  update: ContributorUpdateWithoutMilestonesDataInput
  upsert: ContributorUpsertWithoutMilestonesInput
}

input ContributorUpdateOneRequiredWithoutProjectRolesInput {
  create: ContributorCreateWithoutProjectRolesInput
  connect: ContributorWhereUniqueInput
  update: ContributorUpdateWithoutProjectRolesDataInput
  upsert: ContributorUpsertWithoutProjectRolesInput
}

input ContributorUpdateWithoutExperiencesDataInput {
  name: String
  email: String
  emailPrivate: String
  doc: String
  phone: String
  address: String
  price: Float
  active: Boolean
  twPeopleId: String
  projectRoles: ProjectRoleContributorUpdateManyWithoutContributorInput
  formations: ContributorFormationUpdateManyWithoutContributorInput
  milestones: MilestoneUpdateManyWithoutContributorInput
}

input ContributorUpdateWithoutFormationsDataInput {
  name: String
  email: String
  emailPrivate: String
  doc: String
  phone: String
  address: String
  price: Float
  active: Boolean
  twPeopleId: String
  projectRoles: ProjectRoleContributorUpdateManyWithoutContributorInput
  experiences: ContributorExperienceUpdateManyWithoutContributorInput
  milestones: MilestoneUpdateManyWithoutContributorInput
}

input ContributorUpdateWithoutMilestonesDataInput {
  name: String
  email: String
  emailPrivate: String
  doc: String
  phone: String
  address: String
  price: Float
  active: Boolean
  twPeopleId: String
  projectRoles: ProjectRoleContributorUpdateManyWithoutContributorInput
  experiences: ContributorExperienceUpdateManyWithoutContributorInput
  formations: ContributorFormationUpdateManyWithoutContributorInput
}

input ContributorUpdateWithoutProjectRolesDataInput {
  name: String
  email: String
  emailPrivate: String
  doc: String
  phone: String
  address: String
  price: Float
  active: Boolean
  twPeopleId: String
  experiences: ContributorExperienceUpdateManyWithoutContributorInput
  formations: ContributorFormationUpdateManyWithoutContributorInput
  milestones: MilestoneUpdateManyWithoutContributorInput
}

input ContributorUpsertWithoutExperiencesInput {
  update: ContributorUpdateWithoutExperiencesDataInput!
  create: ContributorCreateWithoutExperiencesInput!
}

input ContributorUpsertWithoutFormationsInput {
  update: ContributorUpdateWithoutFormationsDataInput!
  create: ContributorCreateWithoutFormationsInput!
}

input ContributorUpsertWithoutMilestonesInput {
  update: ContributorUpdateWithoutMilestonesDataInput!
  create: ContributorCreateWithoutMilestonesInput!
}

input ContributorUpsertWithoutProjectRolesInput {
  update: ContributorUpdateWithoutProjectRolesDataInput!
  create: ContributorCreateWithoutProjectRolesInput!
}

input ContributorWhereInput {
  """Logical AND on all given filters."""
  AND: [ContributorWhereInput!]

  """Logical OR on all given filters."""
  OR: [ContributorWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ContributorWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  email: String

  """All values that are not equal to given value."""
  email_not: String

  """All values that are contained in given list."""
  email_in: [String!]

  """All values that are not contained in given list."""
  email_not_in: [String!]

  """All values less than the given value."""
  email_lt: String

  """All values less than or equal the given value."""
  email_lte: String

  """All values greater than the given value."""
  email_gt: String

  """All values greater than or equal the given value."""
  email_gte: String

  """All values containing the given string."""
  email_contains: String

  """All values not containing the given string."""
  email_not_contains: String

  """All values starting with the given string."""
  email_starts_with: String

  """All values not starting with the given string."""
  email_not_starts_with: String

  """All values ending with the given string."""
  email_ends_with: String

  """All values not ending with the given string."""
  email_not_ends_with: String
  emailPrivate: String

  """All values that are not equal to given value."""
  emailPrivate_not: String

  """All values that are contained in given list."""
  emailPrivate_in: [String!]

  """All values that are not contained in given list."""
  emailPrivate_not_in: [String!]

  """All values less than the given value."""
  emailPrivate_lt: String

  """All values less than or equal the given value."""
  emailPrivate_lte: String

  """All values greater than the given value."""
  emailPrivate_gt: String

  """All values greater than or equal the given value."""
  emailPrivate_gte: String

  """All values containing the given string."""
  emailPrivate_contains: String

  """All values not containing the given string."""
  emailPrivate_not_contains: String

  """All values starting with the given string."""
  emailPrivate_starts_with: String

  """All values not starting with the given string."""
  emailPrivate_not_starts_with: String

  """All values ending with the given string."""
  emailPrivate_ends_with: String

  """All values not ending with the given string."""
  emailPrivate_not_ends_with: String
  doc: String

  """All values that are not equal to given value."""
  doc_not: String

  """All values that are contained in given list."""
  doc_in: [String!]

  """All values that are not contained in given list."""
  doc_not_in: [String!]

  """All values less than the given value."""
  doc_lt: String

  """All values less than or equal the given value."""
  doc_lte: String

  """All values greater than the given value."""
  doc_gt: String

  """All values greater than or equal the given value."""
  doc_gte: String

  """All values containing the given string."""
  doc_contains: String

  """All values not containing the given string."""
  doc_not_contains: String

  """All values starting with the given string."""
  doc_starts_with: String

  """All values not starting with the given string."""
  doc_not_starts_with: String

  """All values ending with the given string."""
  doc_ends_with: String

  """All values not ending with the given string."""
  doc_not_ends_with: String
  phone: String

  """All values that are not equal to given value."""
  phone_not: String

  """All values that are contained in given list."""
  phone_in: [String!]

  """All values that are not contained in given list."""
  phone_not_in: [String!]

  """All values less than the given value."""
  phone_lt: String

  """All values less than or equal the given value."""
  phone_lte: String

  """All values greater than the given value."""
  phone_gt: String

  """All values greater than or equal the given value."""
  phone_gte: String

  """All values containing the given string."""
  phone_contains: String

  """All values not containing the given string."""
  phone_not_contains: String

  """All values starting with the given string."""
  phone_starts_with: String

  """All values not starting with the given string."""
  phone_not_starts_with: String

  """All values ending with the given string."""
  phone_ends_with: String

  """All values not ending with the given string."""
  phone_not_ends_with: String
  address: String

  """All values that are not equal to given value."""
  address_not: String

  """All values that are contained in given list."""
  address_in: [String!]

  """All values that are not contained in given list."""
  address_not_in: [String!]

  """All values less than the given value."""
  address_lt: String

  """All values less than or equal the given value."""
  address_lte: String

  """All values greater than the given value."""
  address_gt: String

  """All values greater than or equal the given value."""
  address_gte: String

  """All values containing the given string."""
  address_contains: String

  """All values not containing the given string."""
  address_not_contains: String

  """All values starting with the given string."""
  address_starts_with: String

  """All values not starting with the given string."""
  address_not_starts_with: String

  """All values ending with the given string."""
  address_ends_with: String

  """All values not ending with the given string."""
  address_not_ends_with: String
  price: Float

  """All values that are not equal to given value."""
  price_not: Float

  """All values that are contained in given list."""
  price_in: [Float!]

  """All values that are not contained in given list."""
  price_not_in: [Float!]

  """All values less than the given value."""
  price_lt: Float

  """All values less than or equal the given value."""
  price_lte: Float

  """All values greater than the given value."""
  price_gt: Float

  """All values greater than or equal the given value."""
  price_gte: Float
  active: Boolean

  """All values that are not equal to given value."""
  active_not: Boolean
  twPeopleId: String

  """All values that are not equal to given value."""
  twPeopleId_not: String

  """All values that are contained in given list."""
  twPeopleId_in: [String!]

  """All values that are not contained in given list."""
  twPeopleId_not_in: [String!]

  """All values less than the given value."""
  twPeopleId_lt: String

  """All values less than or equal the given value."""
  twPeopleId_lte: String

  """All values greater than the given value."""
  twPeopleId_gt: String

  """All values greater than or equal the given value."""
  twPeopleId_gte: String

  """All values containing the given string."""
  twPeopleId_contains: String

  """All values not containing the given string."""
  twPeopleId_not_contains: String

  """All values starting with the given string."""
  twPeopleId_starts_with: String

  """All values not starting with the given string."""
  twPeopleId_not_starts_with: String

  """All values ending with the given string."""
  twPeopleId_ends_with: String

  """All values not ending with the given string."""
  twPeopleId_not_ends_with: String
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  projectRoles_every: ProjectRoleContributorWhereInput
  projectRoles_some: ProjectRoleContributorWhereInput
  projectRoles_none: ProjectRoleContributorWhereInput
  experiences_every: ContributorExperienceWhereInput
  experiences_some: ContributorExperienceWhereInput
  experiences_none: ContributorExperienceWhereInput
  formations_every: ContributorFormationWhereInput
  formations_some: ContributorFormationWhereInput
  formations_none: ContributorFormationWhereInput
  milestones_every: MilestoneWhereInput
  milestones_some: MilestoneWhereInput
  milestones_none: MilestoneWhereInput
}

input ContributorWhereUniqueInput {
  id: ID
  email: String
  doc: String
}

scalar DateTime

type Epic implements Node {
  id: ID!
  name: String!
  description: String
  priority: Int
  status: EpicStatus
  estimateSize: Int
  estimatePrice: Float
  estimateEffort: Int
  estimateStart: DateTime
  estimateEnd: DateTime
  twTaskId: String
  createdAt: DateTime!
  updatedAt: DateTime!
  release: Release
  project: Project!
  userStories(where: UserStoryWhereInput, orderBy: UserStoryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [UserStory!]
}

"""A connection to a list of items."""
type EpicConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [EpicEdge]!
  aggregate: AggregateEpic!
}

input EpicCreateInput {
  name: String!
  description: String
  priority: Int
  status: EpicStatus
  estimateSize: Int
  estimatePrice: Float
  estimateEffort: Int
  estimateStart: DateTime
  estimateEnd: DateTime
  twTaskId: String
  release: ReleaseCreateOneWithoutEpicsInput
  project: ProjectCreateOneWithoutEpicsInput!
  userStories: UserStoryCreateManyWithoutEpicInput
}

input EpicCreateManyWithoutProjectInput {
  create: [EpicCreateWithoutProjectInput!]
  connect: [EpicWhereUniqueInput!]
}

input EpicCreateManyWithoutReleaseInput {
  create: [EpicCreateWithoutReleaseInput!]
  connect: [EpicWhereUniqueInput!]
}

input EpicCreateOneWithoutUserStoriesInput {
  create: EpicCreateWithoutUserStoriesInput
  connect: EpicWhereUniqueInput
}

input EpicCreateWithoutProjectInput {
  name: String!
  description: String
  priority: Int
  status: EpicStatus
  estimateSize: Int
  estimatePrice: Float
  estimateEffort: Int
  estimateStart: DateTime
  estimateEnd: DateTime
  twTaskId: String
  release: ReleaseCreateOneWithoutEpicsInput
  userStories: UserStoryCreateManyWithoutEpicInput
}

input EpicCreateWithoutReleaseInput {
  name: String!
  description: String
  priority: Int
  status: EpicStatus
  estimateSize: Int
  estimatePrice: Float
  estimateEffort: Int
  estimateStart: DateTime
  estimateEnd: DateTime
  twTaskId: String
  project: ProjectCreateOneWithoutEpicsInput!
  userStories: UserStoryCreateManyWithoutEpicInput
}

input EpicCreateWithoutUserStoriesInput {
  name: String!
  description: String
  priority: Int
  status: EpicStatus
  estimateSize: Int
  estimatePrice: Float
  estimateEffort: Int
  estimateStart: DateTime
  estimateEnd: DateTime
  twTaskId: String
  release: ReleaseCreateOneWithoutEpicsInput
  project: ProjectCreateOneWithoutEpicsInput!
}

"""An edge in a connection."""
type EpicEdge {
  """The item at the end of the edge."""
  node: Epic!

  """A cursor for use in pagination."""
  cursor: String!
}

enum EpicOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  description_ASC
  description_DESC
  priority_ASC
  priority_DESC
  status_ASC
  status_DESC
  estimateSize_ASC
  estimateSize_DESC
  estimatePrice_ASC
  estimatePrice_DESC
  estimateEffort_ASC
  estimateEffort_DESC
  estimateStart_ASC
  estimateStart_DESC
  estimateEnd_ASC
  estimateEnd_DESC
  twTaskId_ASC
  twTaskId_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type EpicPreviousValues {
  id: ID!
  name: String!
  description: String
  priority: Int
  status: EpicStatus
  estimateSize: Int
  estimatePrice: Float
  estimateEffort: Int
  estimateStart: DateTime
  estimateEnd: DateTime
  twTaskId: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

input EpicScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [EpicScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [EpicScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [EpicScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
  priority: Int

  """All values that are not equal to given value."""
  priority_not: Int

  """All values that are contained in given list."""
  priority_in: [Int!]

  """All values that are not contained in given list."""
  priority_not_in: [Int!]

  """All values less than the given value."""
  priority_lt: Int

  """All values less than or equal the given value."""
  priority_lte: Int

  """All values greater than the given value."""
  priority_gt: Int

  """All values greater than or equal the given value."""
  priority_gte: Int
  status: EpicStatus

  """All values that are not equal to given value."""
  status_not: EpicStatus

  """All values that are contained in given list."""
  status_in: [EpicStatus!]

  """All values that are not contained in given list."""
  status_not_in: [EpicStatus!]
  estimateSize: Int

  """All values that are not equal to given value."""
  estimateSize_not: Int

  """All values that are contained in given list."""
  estimateSize_in: [Int!]

  """All values that are not contained in given list."""
  estimateSize_not_in: [Int!]

  """All values less than the given value."""
  estimateSize_lt: Int

  """All values less than or equal the given value."""
  estimateSize_lte: Int

  """All values greater than the given value."""
  estimateSize_gt: Int

  """All values greater than or equal the given value."""
  estimateSize_gte: Int
  estimatePrice: Float

  """All values that are not equal to given value."""
  estimatePrice_not: Float

  """All values that are contained in given list."""
  estimatePrice_in: [Float!]

  """All values that are not contained in given list."""
  estimatePrice_not_in: [Float!]

  """All values less than the given value."""
  estimatePrice_lt: Float

  """All values less than or equal the given value."""
  estimatePrice_lte: Float

  """All values greater than the given value."""
  estimatePrice_gt: Float

  """All values greater than or equal the given value."""
  estimatePrice_gte: Float
  estimateEffort: Int

  """All values that are not equal to given value."""
  estimateEffort_not: Int

  """All values that are contained in given list."""
  estimateEffort_in: [Int!]

  """All values that are not contained in given list."""
  estimateEffort_not_in: [Int!]

  """All values less than the given value."""
  estimateEffort_lt: Int

  """All values less than or equal the given value."""
  estimateEffort_lte: Int

  """All values greater than the given value."""
  estimateEffort_gt: Int

  """All values greater than or equal the given value."""
  estimateEffort_gte: Int
  estimateStart: DateTime

  """All values that are not equal to given value."""
  estimateStart_not: DateTime

  """All values that are contained in given list."""
  estimateStart_in: [DateTime!]

  """All values that are not contained in given list."""
  estimateStart_not_in: [DateTime!]

  """All values less than the given value."""
  estimateStart_lt: DateTime

  """All values less than or equal the given value."""
  estimateStart_lte: DateTime

  """All values greater than the given value."""
  estimateStart_gt: DateTime

  """All values greater than or equal the given value."""
  estimateStart_gte: DateTime
  estimateEnd: DateTime

  """All values that are not equal to given value."""
  estimateEnd_not: DateTime

  """All values that are contained in given list."""
  estimateEnd_in: [DateTime!]

  """All values that are not contained in given list."""
  estimateEnd_not_in: [DateTime!]

  """All values less than the given value."""
  estimateEnd_lt: DateTime

  """All values less than or equal the given value."""
  estimateEnd_lte: DateTime

  """All values greater than the given value."""
  estimateEnd_gt: DateTime

  """All values greater than or equal the given value."""
  estimateEnd_gte: DateTime
  twTaskId: String

  """All values that are not equal to given value."""
  twTaskId_not: String

  """All values that are contained in given list."""
  twTaskId_in: [String!]

  """All values that are not contained in given list."""
  twTaskId_not_in: [String!]

  """All values less than the given value."""
  twTaskId_lt: String

  """All values less than or equal the given value."""
  twTaskId_lte: String

  """All values greater than the given value."""
  twTaskId_gt: String

  """All values greater than or equal the given value."""
  twTaskId_gte: String

  """All values containing the given string."""
  twTaskId_contains: String

  """All values not containing the given string."""
  twTaskId_not_contains: String

  """All values starting with the given string."""
  twTaskId_starts_with: String

  """All values not starting with the given string."""
  twTaskId_not_starts_with: String

  """All values ending with the given string."""
  twTaskId_ends_with: String

  """All values not ending with the given string."""
  twTaskId_not_ends_with: String
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
}

enum EpicStatus {
  TODO
  INPROGRESS
  DONE
}

type EpicSubscriptionPayload {
  mutation: MutationType!
  node: Epic
  updatedFields: [String!]
  previousValues: EpicPreviousValues
}

input EpicSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [EpicSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [EpicSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [EpicSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: EpicWhereInput
}

input EpicUpdateInput {
  name: String
  description: String
  priority: Int
  status: EpicStatus
  estimateSize: Int
  estimatePrice: Float
  estimateEffort: Int
  estimateStart: DateTime
  estimateEnd: DateTime
  twTaskId: String
  release: ReleaseUpdateOneWithoutEpicsInput
  project: ProjectUpdateOneRequiredWithoutEpicsInput
  userStories: UserStoryUpdateManyWithoutEpicInput
}

input EpicUpdateManyDataInput {
  name: String
  description: String
  priority: Int
  status: EpicStatus
  estimateSize: Int
  estimatePrice: Float
  estimateEffort: Int
  estimateStart: DateTime
  estimateEnd: DateTime
  twTaskId: String
}

input EpicUpdateManyMutationInput {
  name: String
  description: String
  priority: Int
  status: EpicStatus
  estimateSize: Int
  estimatePrice: Float
  estimateEffort: Int
  estimateStart: DateTime
  estimateEnd: DateTime
  twTaskId: String
}

input EpicUpdateManyWithoutProjectInput {
  create: [EpicCreateWithoutProjectInput!]
  connect: [EpicWhereUniqueInput!]
  disconnect: [EpicWhereUniqueInput!]
  delete: [EpicWhereUniqueInput!]
  update: [EpicUpdateWithWhereUniqueWithoutProjectInput!]
  updateMany: [EpicUpdateManyWithWhereNestedInput!]
  deleteMany: [EpicScalarWhereInput!]
  upsert: [EpicUpsertWithWhereUniqueWithoutProjectInput!]
}

input EpicUpdateManyWithoutReleaseInput {
  create: [EpicCreateWithoutReleaseInput!]
  connect: [EpicWhereUniqueInput!]
  disconnect: [EpicWhereUniqueInput!]
  delete: [EpicWhereUniqueInput!]
  update: [EpicUpdateWithWhereUniqueWithoutReleaseInput!]
  updateMany: [EpicUpdateManyWithWhereNestedInput!]
  deleteMany: [EpicScalarWhereInput!]
  upsert: [EpicUpsertWithWhereUniqueWithoutReleaseInput!]
}

input EpicUpdateManyWithWhereNestedInput {
  where: EpicScalarWhereInput!
  data: EpicUpdateManyDataInput!
}

input EpicUpdateOneRequiredWithoutUserStoriesInput {
  create: EpicCreateWithoutUserStoriesInput
  connect: EpicWhereUniqueInput
  update: EpicUpdateWithoutUserStoriesDataInput
  upsert: EpicUpsertWithoutUserStoriesInput
}

input EpicUpdateWithoutProjectDataInput {
  name: String
  description: String
  priority: Int
  status: EpicStatus
  estimateSize: Int
  estimatePrice: Float
  estimateEffort: Int
  estimateStart: DateTime
  estimateEnd: DateTime
  twTaskId: String
  release: ReleaseUpdateOneWithoutEpicsInput
  userStories: UserStoryUpdateManyWithoutEpicInput
}

input EpicUpdateWithoutReleaseDataInput {
  name: String
  description: String
  priority: Int
  status: EpicStatus
  estimateSize: Int
  estimatePrice: Float
  estimateEffort: Int
  estimateStart: DateTime
  estimateEnd: DateTime
  twTaskId: String
  project: ProjectUpdateOneRequiredWithoutEpicsInput
  userStories: UserStoryUpdateManyWithoutEpicInput
}

input EpicUpdateWithoutUserStoriesDataInput {
  name: String
  description: String
  priority: Int
  status: EpicStatus
  estimateSize: Int
  estimatePrice: Float
  estimateEffort: Int
  estimateStart: DateTime
  estimateEnd: DateTime
  twTaskId: String
  release: ReleaseUpdateOneWithoutEpicsInput
  project: ProjectUpdateOneRequiredWithoutEpicsInput
}

input EpicUpdateWithWhereUniqueWithoutProjectInput {
  where: EpicWhereUniqueInput!
  data: EpicUpdateWithoutProjectDataInput!
}

input EpicUpdateWithWhereUniqueWithoutReleaseInput {
  where: EpicWhereUniqueInput!
  data: EpicUpdateWithoutReleaseDataInput!
}

input EpicUpsertWithoutUserStoriesInput {
  update: EpicUpdateWithoutUserStoriesDataInput!
  create: EpicCreateWithoutUserStoriesInput!
}

input EpicUpsertWithWhereUniqueWithoutProjectInput {
  where: EpicWhereUniqueInput!
  update: EpicUpdateWithoutProjectDataInput!
  create: EpicCreateWithoutProjectInput!
}

input EpicUpsertWithWhereUniqueWithoutReleaseInput {
  where: EpicWhereUniqueInput!
  update: EpicUpdateWithoutReleaseDataInput!
  create: EpicCreateWithoutReleaseInput!
}

input EpicWhereInput {
  """Logical AND on all given filters."""
  AND: [EpicWhereInput!]

  """Logical OR on all given filters."""
  OR: [EpicWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [EpicWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
  priority: Int

  """All values that are not equal to given value."""
  priority_not: Int

  """All values that are contained in given list."""
  priority_in: [Int!]

  """All values that are not contained in given list."""
  priority_not_in: [Int!]

  """All values less than the given value."""
  priority_lt: Int

  """All values less than or equal the given value."""
  priority_lte: Int

  """All values greater than the given value."""
  priority_gt: Int

  """All values greater than or equal the given value."""
  priority_gte: Int
  status: EpicStatus

  """All values that are not equal to given value."""
  status_not: EpicStatus

  """All values that are contained in given list."""
  status_in: [EpicStatus!]

  """All values that are not contained in given list."""
  status_not_in: [EpicStatus!]
  estimateSize: Int

  """All values that are not equal to given value."""
  estimateSize_not: Int

  """All values that are contained in given list."""
  estimateSize_in: [Int!]

  """All values that are not contained in given list."""
  estimateSize_not_in: [Int!]

  """All values less than the given value."""
  estimateSize_lt: Int

  """All values less than or equal the given value."""
  estimateSize_lte: Int

  """All values greater than the given value."""
  estimateSize_gt: Int

  """All values greater than or equal the given value."""
  estimateSize_gte: Int
  estimatePrice: Float

  """All values that are not equal to given value."""
  estimatePrice_not: Float

  """All values that are contained in given list."""
  estimatePrice_in: [Float!]

  """All values that are not contained in given list."""
  estimatePrice_not_in: [Float!]

  """All values less than the given value."""
  estimatePrice_lt: Float

  """All values less than or equal the given value."""
  estimatePrice_lte: Float

  """All values greater than the given value."""
  estimatePrice_gt: Float

  """All values greater than or equal the given value."""
  estimatePrice_gte: Float
  estimateEffort: Int

  """All values that are not equal to given value."""
  estimateEffort_not: Int

  """All values that are contained in given list."""
  estimateEffort_in: [Int!]

  """All values that are not contained in given list."""
  estimateEffort_not_in: [Int!]

  """All values less than the given value."""
  estimateEffort_lt: Int

  """All values less than or equal the given value."""
  estimateEffort_lte: Int

  """All values greater than the given value."""
  estimateEffort_gt: Int

  """All values greater than or equal the given value."""
  estimateEffort_gte: Int
  estimateStart: DateTime

  """All values that are not equal to given value."""
  estimateStart_not: DateTime

  """All values that are contained in given list."""
  estimateStart_in: [DateTime!]

  """All values that are not contained in given list."""
  estimateStart_not_in: [DateTime!]

  """All values less than the given value."""
  estimateStart_lt: DateTime

  """All values less than or equal the given value."""
  estimateStart_lte: DateTime

  """All values greater than the given value."""
  estimateStart_gt: DateTime

  """All values greater than or equal the given value."""
  estimateStart_gte: DateTime
  estimateEnd: DateTime

  """All values that are not equal to given value."""
  estimateEnd_not: DateTime

  """All values that are contained in given list."""
  estimateEnd_in: [DateTime!]

  """All values that are not contained in given list."""
  estimateEnd_not_in: [DateTime!]

  """All values less than the given value."""
  estimateEnd_lt: DateTime

  """All values less than or equal the given value."""
  estimateEnd_lte: DateTime

  """All values greater than the given value."""
  estimateEnd_gt: DateTime

  """All values greater than or equal the given value."""
  estimateEnd_gte: DateTime
  twTaskId: String

  """All values that are not equal to given value."""
  twTaskId_not: String

  """All values that are contained in given list."""
  twTaskId_in: [String!]

  """All values that are not contained in given list."""
  twTaskId_not_in: [String!]

  """All values less than the given value."""
  twTaskId_lt: String

  """All values less than or equal the given value."""
  twTaskId_lte: String

  """All values greater than the given value."""
  twTaskId_gt: String

  """All values greater than or equal the given value."""
  twTaskId_gte: String

  """All values containing the given string."""
  twTaskId_contains: String

  """All values not containing the given string."""
  twTaskId_not_contains: String

  """All values starting with the given string."""
  twTaskId_starts_with: String

  """All values not starting with the given string."""
  twTaskId_not_starts_with: String

  """All values ending with the given string."""
  twTaskId_ends_with: String

  """All values not ending with the given string."""
  twTaskId_not_ends_with: String
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  release: ReleaseWhereInput
  project: ProjectWhereInput
  userStories_every: UserStoryWhereInput
  userStories_some: UserStoryWhereInput
  userStories_none: UserStoryWhereInput
}

input EpicWhereUniqueInput {
  id: ID
}

type Iteration implements Node {
  id: ID!
  name: String!
  status: IterationStatus!
  startAt: DateTime!
  endAt: DateTime!
  createdAt: DateTime!
  updatedAt: DateTime!
  release: Release!
  project: Project!
  userStories(where: UserStoryWhereInput, orderBy: UserStoryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [UserStory!]
}

"""A connection to a list of items."""
type IterationConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [IterationEdge]!
  aggregate: AggregateIteration!
}

input IterationCreateInput {
  name: String!
  status: IterationStatus!
  startAt: DateTime!
  endAt: DateTime!
  release: ReleaseCreateOneWithoutIterationsInput!
  project: ProjectCreateOneWithoutIterationsInput!
  userStories: UserStoryCreateManyWithoutIterationInput
}

input IterationCreateManyWithoutProjectInput {
  create: [IterationCreateWithoutProjectInput!]
  connect: [IterationWhereUniqueInput!]
}

input IterationCreateManyWithoutReleaseInput {
  create: [IterationCreateWithoutReleaseInput!]
  connect: [IterationWhereUniqueInput!]
}

input IterationCreateOneWithoutUserStoriesInput {
  create: IterationCreateWithoutUserStoriesInput
  connect: IterationWhereUniqueInput
}

input IterationCreateWithoutProjectInput {
  name: String!
  status: IterationStatus!
  startAt: DateTime!
  endAt: DateTime!
  release: ReleaseCreateOneWithoutIterationsInput!
  userStories: UserStoryCreateManyWithoutIterationInput
}

input IterationCreateWithoutReleaseInput {
  name: String!
  status: IterationStatus!
  startAt: DateTime!
  endAt: DateTime!
  project: ProjectCreateOneWithoutIterationsInput!
  userStories: UserStoryCreateManyWithoutIterationInput
}

input IterationCreateWithoutUserStoriesInput {
  name: String!
  status: IterationStatus!
  startAt: DateTime!
  endAt: DateTime!
  release: ReleaseCreateOneWithoutIterationsInput!
  project: ProjectCreateOneWithoutIterationsInput!
}

"""An edge in a connection."""
type IterationEdge {
  """The item at the end of the edge."""
  node: Iteration!

  """A cursor for use in pagination."""
  cursor: String!
}

enum IterationOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  status_ASC
  status_DESC
  startAt_ASC
  startAt_DESC
  endAt_ASC
  endAt_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type IterationPreviousValues {
  id: ID!
  name: String!
  status: IterationStatus!
  startAt: DateTime!
  endAt: DateTime!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input IterationScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [IterationScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [IterationScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [IterationScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  status: IterationStatus

  """All values that are not equal to given value."""
  status_not: IterationStatus

  """All values that are contained in given list."""
  status_in: [IterationStatus!]

  """All values that are not contained in given list."""
  status_not_in: [IterationStatus!]
  startAt: DateTime

  """All values that are not equal to given value."""
  startAt_not: DateTime

  """All values that are contained in given list."""
  startAt_in: [DateTime!]

  """All values that are not contained in given list."""
  startAt_not_in: [DateTime!]

  """All values less than the given value."""
  startAt_lt: DateTime

  """All values less than or equal the given value."""
  startAt_lte: DateTime

  """All values greater than the given value."""
  startAt_gt: DateTime

  """All values greater than or equal the given value."""
  startAt_gte: DateTime
  endAt: DateTime

  """All values that are not equal to given value."""
  endAt_not: DateTime

  """All values that are contained in given list."""
  endAt_in: [DateTime!]

  """All values that are not contained in given list."""
  endAt_not_in: [DateTime!]

  """All values less than the given value."""
  endAt_lt: DateTime

  """All values less than or equal the given value."""
  endAt_lte: DateTime

  """All values greater than the given value."""
  endAt_gt: DateTime

  """All values greater than or equal the given value."""
  endAt_gte: DateTime
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
}

enum IterationStatus {
  OPEN
  DONE
}

type IterationSubscriptionPayload {
  mutation: MutationType!
  node: Iteration
  updatedFields: [String!]
  previousValues: IterationPreviousValues
}

input IterationSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [IterationSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [IterationSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [IterationSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: IterationWhereInput
}

input IterationUpdateInput {
  name: String
  status: IterationStatus
  startAt: DateTime
  endAt: DateTime
  release: ReleaseUpdateOneRequiredWithoutIterationsInput
  project: ProjectUpdateOneRequiredWithoutIterationsInput
  userStories: UserStoryUpdateManyWithoutIterationInput
}

input IterationUpdateManyDataInput {
  name: String
  status: IterationStatus
  startAt: DateTime
  endAt: DateTime
}

input IterationUpdateManyMutationInput {
  name: String
  status: IterationStatus
  startAt: DateTime
  endAt: DateTime
}

input IterationUpdateManyWithoutProjectInput {
  create: [IterationCreateWithoutProjectInput!]
  connect: [IterationWhereUniqueInput!]
  disconnect: [IterationWhereUniqueInput!]
  delete: [IterationWhereUniqueInput!]
  update: [IterationUpdateWithWhereUniqueWithoutProjectInput!]
  updateMany: [IterationUpdateManyWithWhereNestedInput!]
  deleteMany: [IterationScalarWhereInput!]
  upsert: [IterationUpsertWithWhereUniqueWithoutProjectInput!]
}

input IterationUpdateManyWithoutReleaseInput {
  create: [IterationCreateWithoutReleaseInput!]
  connect: [IterationWhereUniqueInput!]
  disconnect: [IterationWhereUniqueInput!]
  delete: [IterationWhereUniqueInput!]
  update: [IterationUpdateWithWhereUniqueWithoutReleaseInput!]
  updateMany: [IterationUpdateManyWithWhereNestedInput!]
  deleteMany: [IterationScalarWhereInput!]
  upsert: [IterationUpsertWithWhereUniqueWithoutReleaseInput!]
}

input IterationUpdateManyWithWhereNestedInput {
  where: IterationScalarWhereInput!
  data: IterationUpdateManyDataInput!
}

input IterationUpdateOneWithoutUserStoriesInput {
  create: IterationCreateWithoutUserStoriesInput
  connect: IterationWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: IterationUpdateWithoutUserStoriesDataInput
  upsert: IterationUpsertWithoutUserStoriesInput
}

input IterationUpdateWithoutProjectDataInput {
  name: String
  status: IterationStatus
  startAt: DateTime
  endAt: DateTime
  release: ReleaseUpdateOneRequiredWithoutIterationsInput
  userStories: UserStoryUpdateManyWithoutIterationInput
}

input IterationUpdateWithoutReleaseDataInput {
  name: String
  status: IterationStatus
  startAt: DateTime
  endAt: DateTime
  project: ProjectUpdateOneRequiredWithoutIterationsInput
  userStories: UserStoryUpdateManyWithoutIterationInput
}

input IterationUpdateWithoutUserStoriesDataInput {
  name: String
  status: IterationStatus
  startAt: DateTime
  endAt: DateTime
  release: ReleaseUpdateOneRequiredWithoutIterationsInput
  project: ProjectUpdateOneRequiredWithoutIterationsInput
}

input IterationUpdateWithWhereUniqueWithoutProjectInput {
  where: IterationWhereUniqueInput!
  data: IterationUpdateWithoutProjectDataInput!
}

input IterationUpdateWithWhereUniqueWithoutReleaseInput {
  where: IterationWhereUniqueInput!
  data: IterationUpdateWithoutReleaseDataInput!
}

input IterationUpsertWithoutUserStoriesInput {
  update: IterationUpdateWithoutUserStoriesDataInput!
  create: IterationCreateWithoutUserStoriesInput!
}

input IterationUpsertWithWhereUniqueWithoutProjectInput {
  where: IterationWhereUniqueInput!
  update: IterationUpdateWithoutProjectDataInput!
  create: IterationCreateWithoutProjectInput!
}

input IterationUpsertWithWhereUniqueWithoutReleaseInput {
  where: IterationWhereUniqueInput!
  update: IterationUpdateWithoutReleaseDataInput!
  create: IterationCreateWithoutReleaseInput!
}

input IterationWhereInput {
  """Logical AND on all given filters."""
  AND: [IterationWhereInput!]

  """Logical OR on all given filters."""
  OR: [IterationWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [IterationWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  status: IterationStatus

  """All values that are not equal to given value."""
  status_not: IterationStatus

  """All values that are contained in given list."""
  status_in: [IterationStatus!]

  """All values that are not contained in given list."""
  status_not_in: [IterationStatus!]
  startAt: DateTime

  """All values that are not equal to given value."""
  startAt_not: DateTime

  """All values that are contained in given list."""
  startAt_in: [DateTime!]

  """All values that are not contained in given list."""
  startAt_not_in: [DateTime!]

  """All values less than the given value."""
  startAt_lt: DateTime

  """All values less than or equal the given value."""
  startAt_lte: DateTime

  """All values greater than the given value."""
  startAt_gt: DateTime

  """All values greater than or equal the given value."""
  startAt_gte: DateTime
  endAt: DateTime

  """All values that are not equal to given value."""
  endAt_not: DateTime

  """All values that are contained in given list."""
  endAt_in: [DateTime!]

  """All values that are not contained in given list."""
  endAt_not_in: [DateTime!]

  """All values less than the given value."""
  endAt_lt: DateTime

  """All values less than or equal the given value."""
  endAt_lte: DateTime

  """All values greater than the given value."""
  endAt_gt: DateTime

  """All values greater than or equal the given value."""
  endAt_gte: DateTime
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  release: ReleaseWhereInput
  project: ProjectWhereInput
  userStories_every: UserStoryWhereInput
  userStories_some: UserStoryWhereInput
  userStories_none: UserStoryWhereInput
}

input IterationWhereUniqueInput {
  id: ID
}

"""
The `Long` scalar type represents non-fractional signed whole numeric values.
Long can represent values between -(2^63) and 2^63 - 1.
"""
scalar Long

type Milestone implements Node {
  id: ID!
  name: String!
  description: String
  status: MilestoneStatus!
  dueDate: DateTime!
  createdAt: DateTime!
  updatedAt: DateTime!
  project: Project!
  contributor: Contributor!
}

"""A connection to a list of items."""
type MilestoneConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [MilestoneEdge]!
  aggregate: AggregateMilestone!
}

input MilestoneCreateInput {
  name: String!
  description: String
  status: MilestoneStatus!
  dueDate: DateTime!
  project: ProjectCreateOneWithoutMilestonesInput!
  contributor: ContributorCreateOneWithoutMilestonesInput!
}

input MilestoneCreateManyWithoutContributorInput {
  create: [MilestoneCreateWithoutContributorInput!]
  connect: [MilestoneWhereUniqueInput!]
}

input MilestoneCreateManyWithoutProjectInput {
  create: [MilestoneCreateWithoutProjectInput!]
  connect: [MilestoneWhereUniqueInput!]
}

input MilestoneCreateWithoutContributorInput {
  name: String!
  description: String
  status: MilestoneStatus!
  dueDate: DateTime!
  project: ProjectCreateOneWithoutMilestonesInput!
}

input MilestoneCreateWithoutProjectInput {
  name: String!
  description: String
  status: MilestoneStatus!
  dueDate: DateTime!
  contributor: ContributorCreateOneWithoutMilestonesInput!
}

"""An edge in a connection."""
type MilestoneEdge {
  """The item at the end of the edge."""
  node: Milestone!

  """A cursor for use in pagination."""
  cursor: String!
}

enum MilestoneOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  description_ASC
  description_DESC
  status_ASC
  status_DESC
  dueDate_ASC
  dueDate_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type MilestonePreviousValues {
  id: ID!
  name: String!
  description: String
  status: MilestoneStatus!
  dueDate: DateTime!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input MilestoneScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [MilestoneScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [MilestoneScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [MilestoneScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
  status: MilestoneStatus

  """All values that are not equal to given value."""
  status_not: MilestoneStatus

  """All values that are contained in given list."""
  status_in: [MilestoneStatus!]

  """All values that are not contained in given list."""
  status_not_in: [MilestoneStatus!]
  dueDate: DateTime

  """All values that are not equal to given value."""
  dueDate_not: DateTime

  """All values that are contained in given list."""
  dueDate_in: [DateTime!]

  """All values that are not contained in given list."""
  dueDate_not_in: [DateTime!]

  """All values less than the given value."""
  dueDate_lt: DateTime

  """All values less than or equal the given value."""
  dueDate_lte: DateTime

  """All values greater than the given value."""
  dueDate_gt: DateTime

  """All values greater than or equal the given value."""
  dueDate_gte: DateTime
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
}

enum MilestoneStatus {
  OPEN
  DONE
  CANCELED
}

type MilestoneSubscriptionPayload {
  mutation: MutationType!
  node: Milestone
  updatedFields: [String!]
  previousValues: MilestonePreviousValues
}

input MilestoneSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [MilestoneSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [MilestoneSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [MilestoneSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: MilestoneWhereInput
}

input MilestoneUpdateInput {
  name: String
  description: String
  status: MilestoneStatus
  dueDate: DateTime
  project: ProjectUpdateOneRequiredWithoutMilestonesInput
  contributor: ContributorUpdateOneRequiredWithoutMilestonesInput
}

input MilestoneUpdateManyDataInput {
  name: String
  description: String
  status: MilestoneStatus
  dueDate: DateTime
}

input MilestoneUpdateManyMutationInput {
  name: String
  description: String
  status: MilestoneStatus
  dueDate: DateTime
}

input MilestoneUpdateManyWithoutContributorInput {
  create: [MilestoneCreateWithoutContributorInput!]
  connect: [MilestoneWhereUniqueInput!]
  disconnect: [MilestoneWhereUniqueInput!]
  delete: [MilestoneWhereUniqueInput!]
  update: [MilestoneUpdateWithWhereUniqueWithoutContributorInput!]
  updateMany: [MilestoneUpdateManyWithWhereNestedInput!]
  deleteMany: [MilestoneScalarWhereInput!]
  upsert: [MilestoneUpsertWithWhereUniqueWithoutContributorInput!]
}

input MilestoneUpdateManyWithoutProjectInput {
  create: [MilestoneCreateWithoutProjectInput!]
  connect: [MilestoneWhereUniqueInput!]
  disconnect: [MilestoneWhereUniqueInput!]
  delete: [MilestoneWhereUniqueInput!]
  update: [MilestoneUpdateWithWhereUniqueWithoutProjectInput!]
  updateMany: [MilestoneUpdateManyWithWhereNestedInput!]
  deleteMany: [MilestoneScalarWhereInput!]
  upsert: [MilestoneUpsertWithWhereUniqueWithoutProjectInput!]
}

input MilestoneUpdateManyWithWhereNestedInput {
  where: MilestoneScalarWhereInput!
  data: MilestoneUpdateManyDataInput!
}

input MilestoneUpdateWithoutContributorDataInput {
  name: String
  description: String
  status: MilestoneStatus
  dueDate: DateTime
  project: ProjectUpdateOneRequiredWithoutMilestonesInput
}

input MilestoneUpdateWithoutProjectDataInput {
  name: String
  description: String
  status: MilestoneStatus
  dueDate: DateTime
  contributor: ContributorUpdateOneRequiredWithoutMilestonesInput
}

input MilestoneUpdateWithWhereUniqueWithoutContributorInput {
  where: MilestoneWhereUniqueInput!
  data: MilestoneUpdateWithoutContributorDataInput!
}

input MilestoneUpdateWithWhereUniqueWithoutProjectInput {
  where: MilestoneWhereUniqueInput!
  data: MilestoneUpdateWithoutProjectDataInput!
}

input MilestoneUpsertWithWhereUniqueWithoutContributorInput {
  where: MilestoneWhereUniqueInput!
  update: MilestoneUpdateWithoutContributorDataInput!
  create: MilestoneCreateWithoutContributorInput!
}

input MilestoneUpsertWithWhereUniqueWithoutProjectInput {
  where: MilestoneWhereUniqueInput!
  update: MilestoneUpdateWithoutProjectDataInput!
  create: MilestoneCreateWithoutProjectInput!
}

input MilestoneWhereInput {
  """Logical AND on all given filters."""
  AND: [MilestoneWhereInput!]

  """Logical OR on all given filters."""
  OR: [MilestoneWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [MilestoneWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
  status: MilestoneStatus

  """All values that are not equal to given value."""
  status_not: MilestoneStatus

  """All values that are contained in given list."""
  status_in: [MilestoneStatus!]

  """All values that are not contained in given list."""
  status_not_in: [MilestoneStatus!]
  dueDate: DateTime

  """All values that are not equal to given value."""
  dueDate_not: DateTime

  """All values that are contained in given list."""
  dueDate_in: [DateTime!]

  """All values that are not contained in given list."""
  dueDate_not_in: [DateTime!]

  """All values less than the given value."""
  dueDate_lt: DateTime

  """All values less than or equal the given value."""
  dueDate_lte: DateTime

  """All values greater than the given value."""
  dueDate_gt: DateTime

  """All values greater than or equal the given value."""
  dueDate_gte: DateTime
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  project: ProjectWhereInput
  contributor: ContributorWhereInput
}

input MilestoneWhereUniqueInput {
  id: ID
}

type Mutation {
  createUser(data: UserCreateInput!): User!
  createContributor(data: ContributorCreateInput!): Contributor!
  createContributorExperience(data: ContributorExperienceCreateInput!): ContributorExperience!
  createContributorFormation(data: ContributorFormationCreateInput!): ContributorFormation!
  createProject(data: ProjectCreateInput!): Project!
  createResource(data: ResourceCreateInput!): Resource!
  createProjectRole(data: ProjectRoleCreateInput!): ProjectRole!
  createProjectRoleContributor(data: ProjectRoleContributorCreateInput!): ProjectRoleContributor!
  createRole(data: RoleCreateInput!): Role!
  createRoleLevel(data: RoleLevelCreateInput!): RoleLevel!
  createMilestone(data: MilestoneCreateInput!): Milestone!
  createEpic(data: EpicCreateInput!): Epic!
  createUserStory(data: UserStoryCreateInput!): UserStory!
  createRelease(data: ReleaseCreateInput!): Release!
  createIteration(data: IterationCreateInput!): Iteration!
  createRisk(data: RiskCreateInput!): Risk!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateContributor(data: ContributorUpdateInput!, where: ContributorWhereUniqueInput!): Contributor
  updateContributorExperience(data: ContributorExperienceUpdateInput!, where: ContributorExperienceWhereUniqueInput!): ContributorExperience
  updateContributorFormation(data: ContributorFormationUpdateInput!, where: ContributorFormationWhereUniqueInput!): ContributorFormation
  updateProject(data: ProjectUpdateInput!, where: ProjectWhereUniqueInput!): Project
  updateResource(data: ResourceUpdateInput!, where: ResourceWhereUniqueInput!): Resource
  updateProjectRole(data: ProjectRoleUpdateInput!, where: ProjectRoleWhereUniqueInput!): ProjectRole
  updateProjectRoleContributor(data: ProjectRoleContributorUpdateInput!, where: ProjectRoleContributorWhereUniqueInput!): ProjectRoleContributor
  updateRole(data: RoleUpdateInput!, where: RoleWhereUniqueInput!): Role
  updateRoleLevel(data: RoleLevelUpdateInput!, where: RoleLevelWhereUniqueInput!): RoleLevel
  updateMilestone(data: MilestoneUpdateInput!, where: MilestoneWhereUniqueInput!): Milestone
  updateEpic(data: EpicUpdateInput!, where: EpicWhereUniqueInput!): Epic
  updateUserStory(data: UserStoryUpdateInput!, where: UserStoryWhereUniqueInput!): UserStory
  updateRelease(data: ReleaseUpdateInput!, where: ReleaseWhereUniqueInput!): Release
  updateIteration(data: IterationUpdateInput!, where: IterationWhereUniqueInput!): Iteration
  updateRisk(data: RiskUpdateInput!, where: RiskWhereUniqueInput!): Risk
  deleteUser(where: UserWhereUniqueInput!): User
  deleteContributor(where: ContributorWhereUniqueInput!): Contributor
  deleteContributorExperience(where: ContributorExperienceWhereUniqueInput!): ContributorExperience
  deleteContributorFormation(where: ContributorFormationWhereUniqueInput!): ContributorFormation
  deleteProject(where: ProjectWhereUniqueInput!): Project
  deleteResource(where: ResourceWhereUniqueInput!): Resource
  deleteProjectRole(where: ProjectRoleWhereUniqueInput!): ProjectRole
  deleteProjectRoleContributor(where: ProjectRoleContributorWhereUniqueInput!): ProjectRoleContributor
  deleteRole(where: RoleWhereUniqueInput!): Role
  deleteRoleLevel(where: RoleLevelWhereUniqueInput!): RoleLevel
  deleteMilestone(where: MilestoneWhereUniqueInput!): Milestone
  deleteEpic(where: EpicWhereUniqueInput!): Epic
  deleteUserStory(where: UserStoryWhereUniqueInput!): UserStory
  deleteRelease(where: ReleaseWhereUniqueInput!): Release
  deleteIteration(where: IterationWhereUniqueInput!): Iteration
  deleteRisk(where: RiskWhereUniqueInput!): Risk
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  upsertContributor(where: ContributorWhereUniqueInput!, create: ContributorCreateInput!, update: ContributorUpdateInput!): Contributor!
  upsertContributorExperience(where: ContributorExperienceWhereUniqueInput!, create: ContributorExperienceCreateInput!, update: ContributorExperienceUpdateInput!): ContributorExperience!
  upsertContributorFormation(where: ContributorFormationWhereUniqueInput!, create: ContributorFormationCreateInput!, update: ContributorFormationUpdateInput!): ContributorFormation!
  upsertProject(where: ProjectWhereUniqueInput!, create: ProjectCreateInput!, update: ProjectUpdateInput!): Project!
  upsertResource(where: ResourceWhereUniqueInput!, create: ResourceCreateInput!, update: ResourceUpdateInput!): Resource!
  upsertProjectRole(where: ProjectRoleWhereUniqueInput!, create: ProjectRoleCreateInput!, update: ProjectRoleUpdateInput!): ProjectRole!
  upsertProjectRoleContributor(where: ProjectRoleContributorWhereUniqueInput!, create: ProjectRoleContributorCreateInput!, update: ProjectRoleContributorUpdateInput!): ProjectRoleContributor!
  upsertRole(where: RoleWhereUniqueInput!, create: RoleCreateInput!, update: RoleUpdateInput!): Role!
  upsertRoleLevel(where: RoleLevelWhereUniqueInput!, create: RoleLevelCreateInput!, update: RoleLevelUpdateInput!): RoleLevel!
  upsertMilestone(where: MilestoneWhereUniqueInput!, create: MilestoneCreateInput!, update: MilestoneUpdateInput!): Milestone!
  upsertEpic(where: EpicWhereUniqueInput!, create: EpicCreateInput!, update: EpicUpdateInput!): Epic!
  upsertUserStory(where: UserStoryWhereUniqueInput!, create: UserStoryCreateInput!, update: UserStoryUpdateInput!): UserStory!
  upsertRelease(where: ReleaseWhereUniqueInput!, create: ReleaseCreateInput!, update: ReleaseUpdateInput!): Release!
  upsertIteration(where: IterationWhereUniqueInput!, create: IterationCreateInput!, update: IterationUpdateInput!): Iteration!
  upsertRisk(where: RiskWhereUniqueInput!, create: RiskCreateInput!, update: RiskUpdateInput!): Risk!
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  updateManyContributors(data: ContributorUpdateManyMutationInput!, where: ContributorWhereInput): BatchPayload!
  updateManyContributorExperiences(data: ContributorExperienceUpdateManyMutationInput!, where: ContributorExperienceWhereInput): BatchPayload!
  updateManyContributorFormations(data: ContributorFormationUpdateManyMutationInput!, where: ContributorFormationWhereInput): BatchPayload!
  updateManyProjects(data: ProjectUpdateManyMutationInput!, where: ProjectWhereInput): BatchPayload!
  updateManyResources(data: ResourceUpdateManyMutationInput!, where: ResourceWhereInput): BatchPayload!
  updateManyProjectRoles(data: ProjectRoleUpdateManyMutationInput!, where: ProjectRoleWhereInput): BatchPayload!
  updateManyProjectRoleContributors(data: ProjectRoleContributorUpdateManyMutationInput!, where: ProjectRoleContributorWhereInput): BatchPayload!
  updateManyRoles(data: RoleUpdateManyMutationInput!, where: RoleWhereInput): BatchPayload!
  updateManyRoleLevels(data: RoleLevelUpdateManyMutationInput!, where: RoleLevelWhereInput): BatchPayload!
  updateManyMilestones(data: MilestoneUpdateManyMutationInput!, where: MilestoneWhereInput): BatchPayload!
  updateManyEpics(data: EpicUpdateManyMutationInput!, where: EpicWhereInput): BatchPayload!
  updateManyUserStories(data: UserStoryUpdateManyMutationInput!, where: UserStoryWhereInput): BatchPayload!
  updateManyReleases(data: ReleaseUpdateManyMutationInput!, where: ReleaseWhereInput): BatchPayload!
  updateManyIterations(data: IterationUpdateManyMutationInput!, where: IterationWhereInput): BatchPayload!
  updateManyRisks(data: RiskUpdateManyMutationInput!, where: RiskWhereInput): BatchPayload!
  deleteManyUsers(where: UserWhereInput): BatchPayload!
  deleteManyContributors(where: ContributorWhereInput): BatchPayload!
  deleteManyContributorExperiences(where: ContributorExperienceWhereInput): BatchPayload!
  deleteManyContributorFormations(where: ContributorFormationWhereInput): BatchPayload!
  deleteManyProjects(where: ProjectWhereInput): BatchPayload!
  deleteManyResources(where: ResourceWhereInput): BatchPayload!
  deleteManyProjectRoles(where: ProjectRoleWhereInput): BatchPayload!
  deleteManyProjectRoleContributors(where: ProjectRoleContributorWhereInput): BatchPayload!
  deleteManyRoles(where: RoleWhereInput): BatchPayload!
  deleteManyRoleLevels(where: RoleLevelWhereInput): BatchPayload!
  deleteManyMilestones(where: MilestoneWhereInput): BatchPayload!
  deleteManyEpics(where: EpicWhereInput): BatchPayload!
  deleteManyUserStories(where: UserStoryWhereInput): BatchPayload!
  deleteManyReleases(where: ReleaseWhereInput): BatchPayload!
  deleteManyIterations(where: IterationWhereInput): BatchPayload!
  deleteManyRisks(where: RiskWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

type Project implements Node {
  id: ID!
  name: String!
  sponsor: String!
  plan: String
  objectives: String
  motivations: String
  limitations: String
  restrictions: String
  status: ProjectStatus
  startAt: DateTime
  endAt: DateTime
  twProjectId: String
  twTaskListId: String
  createdAt: DateTime!
  updatedAt: DateTime!
  risks(where: RiskWhereInput, orderBy: RiskOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Risk!]
  epics(where: EpicWhereInput, orderBy: EpicOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Epic!]
  releases(where: ReleaseWhereInput, orderBy: ReleaseOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Release!]
  resources(where: ResourceWhereInput, orderBy: ResourceOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Resource!]
  iterations(where: IterationWhereInput, orderBy: IterationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Iteration!]
  milestones(where: MilestoneWhereInput, orderBy: MilestoneOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Milestone!]
  projectRoles(where: ProjectRoleWhereInput, orderBy: ProjectRoleOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ProjectRole!]
}

"""A connection to a list of items."""
type ProjectConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ProjectEdge]!
  aggregate: AggregateProject!
}

input ProjectCreateInput {
  name: String!
  sponsor: String!
  plan: String
  objectives: String
  motivations: String
  limitations: String
  restrictions: String
  status: ProjectStatus
  startAt: DateTime
  endAt: DateTime
  twProjectId: String
  twTaskListId: String
  risks: RiskCreateManyWithoutProjectInput
  epics: EpicCreateManyWithoutProjectInput
  releases: ReleaseCreateManyWithoutProjectInput
  resources: ResourceCreateManyWithoutProjectInput
  iterations: IterationCreateManyWithoutProjectInput
  milestones: MilestoneCreateManyWithoutProjectInput
  projectRoles: ProjectRoleCreateManyWithoutProjectInput
}

input ProjectCreateOneWithoutEpicsInput {
  create: ProjectCreateWithoutEpicsInput
  connect: ProjectWhereUniqueInput
}

input ProjectCreateOneWithoutIterationsInput {
  create: ProjectCreateWithoutIterationsInput
  connect: ProjectWhereUniqueInput
}

input ProjectCreateOneWithoutMilestonesInput {
  create: ProjectCreateWithoutMilestonesInput
  connect: ProjectWhereUniqueInput
}

input ProjectCreateOneWithoutProjectRolesInput {
  create: ProjectCreateWithoutProjectRolesInput
  connect: ProjectWhereUniqueInput
}

input ProjectCreateOneWithoutReleasesInput {
  create: ProjectCreateWithoutReleasesInput
  connect: ProjectWhereUniqueInput
}

input ProjectCreateOneWithoutResourcesInput {
  create: ProjectCreateWithoutResourcesInput
  connect: ProjectWhereUniqueInput
}

input ProjectCreateOneWithoutRisksInput {
  create: ProjectCreateWithoutRisksInput
  connect: ProjectWhereUniqueInput
}

input ProjectCreateWithoutEpicsInput {
  name: String!
  sponsor: String!
  plan: String
  objectives: String
  motivations: String
  limitations: String
  restrictions: String
  status: ProjectStatus
  startAt: DateTime
  endAt: DateTime
  twProjectId: String
  twTaskListId: String
  risks: RiskCreateManyWithoutProjectInput
  releases: ReleaseCreateManyWithoutProjectInput
  resources: ResourceCreateManyWithoutProjectInput
  iterations: IterationCreateManyWithoutProjectInput
  milestones: MilestoneCreateManyWithoutProjectInput
  projectRoles: ProjectRoleCreateManyWithoutProjectInput
}

input ProjectCreateWithoutIterationsInput {
  name: String!
  sponsor: String!
  plan: String
  objectives: String
  motivations: String
  limitations: String
  restrictions: String
  status: ProjectStatus
  startAt: DateTime
  endAt: DateTime
  twProjectId: String
  twTaskListId: String
  risks: RiskCreateManyWithoutProjectInput
  epics: EpicCreateManyWithoutProjectInput
  releases: ReleaseCreateManyWithoutProjectInput
  resources: ResourceCreateManyWithoutProjectInput
  milestones: MilestoneCreateManyWithoutProjectInput
  projectRoles: ProjectRoleCreateManyWithoutProjectInput
}

input ProjectCreateWithoutMilestonesInput {
  name: String!
  sponsor: String!
  plan: String
  objectives: String
  motivations: String
  limitations: String
  restrictions: String
  status: ProjectStatus
  startAt: DateTime
  endAt: DateTime
  twProjectId: String
  twTaskListId: String
  risks: RiskCreateManyWithoutProjectInput
  epics: EpicCreateManyWithoutProjectInput
  releases: ReleaseCreateManyWithoutProjectInput
  resources: ResourceCreateManyWithoutProjectInput
  iterations: IterationCreateManyWithoutProjectInput
  projectRoles: ProjectRoleCreateManyWithoutProjectInput
}

input ProjectCreateWithoutProjectRolesInput {
  name: String!
  sponsor: String!
  plan: String
  objectives: String
  motivations: String
  limitations: String
  restrictions: String
  status: ProjectStatus
  startAt: DateTime
  endAt: DateTime
  twProjectId: String
  twTaskListId: String
  risks: RiskCreateManyWithoutProjectInput
  epics: EpicCreateManyWithoutProjectInput
  releases: ReleaseCreateManyWithoutProjectInput
  resources: ResourceCreateManyWithoutProjectInput
  iterations: IterationCreateManyWithoutProjectInput
  milestones: MilestoneCreateManyWithoutProjectInput
}

input ProjectCreateWithoutReleasesInput {
  name: String!
  sponsor: String!
  plan: String
  objectives: String
  motivations: String
  limitations: String
  restrictions: String
  status: ProjectStatus
  startAt: DateTime
  endAt: DateTime
  twProjectId: String
  twTaskListId: String
  risks: RiskCreateManyWithoutProjectInput
  epics: EpicCreateManyWithoutProjectInput
  resources: ResourceCreateManyWithoutProjectInput
  iterations: IterationCreateManyWithoutProjectInput
  milestones: MilestoneCreateManyWithoutProjectInput
  projectRoles: ProjectRoleCreateManyWithoutProjectInput
}

input ProjectCreateWithoutResourcesInput {
  name: String!
  sponsor: String!
  plan: String
  objectives: String
  motivations: String
  limitations: String
  restrictions: String
  status: ProjectStatus
  startAt: DateTime
  endAt: DateTime
  twProjectId: String
  twTaskListId: String
  risks: RiskCreateManyWithoutProjectInput
  epics: EpicCreateManyWithoutProjectInput
  releases: ReleaseCreateManyWithoutProjectInput
  iterations: IterationCreateManyWithoutProjectInput
  milestones: MilestoneCreateManyWithoutProjectInput
  projectRoles: ProjectRoleCreateManyWithoutProjectInput
}

input ProjectCreateWithoutRisksInput {
  name: String!
  sponsor: String!
  plan: String
  objectives: String
  motivations: String
  limitations: String
  restrictions: String
  status: ProjectStatus
  startAt: DateTime
  endAt: DateTime
  twProjectId: String
  twTaskListId: String
  epics: EpicCreateManyWithoutProjectInput
  releases: ReleaseCreateManyWithoutProjectInput
  resources: ResourceCreateManyWithoutProjectInput
  iterations: IterationCreateManyWithoutProjectInput
  milestones: MilestoneCreateManyWithoutProjectInput
  projectRoles: ProjectRoleCreateManyWithoutProjectInput
}

"""An edge in a connection."""
type ProjectEdge {
  """The item at the end of the edge."""
  node: Project!

  """A cursor for use in pagination."""
  cursor: String!
}

enum ProjectOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  sponsor_ASC
  sponsor_DESC
  plan_ASC
  plan_DESC
  objectives_ASC
  objectives_DESC
  motivations_ASC
  motivations_DESC
  limitations_ASC
  limitations_DESC
  restrictions_ASC
  restrictions_DESC
  status_ASC
  status_DESC
  startAt_ASC
  startAt_DESC
  endAt_ASC
  endAt_DESC
  twProjectId_ASC
  twProjectId_DESC
  twTaskListId_ASC
  twTaskListId_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type ProjectPreviousValues {
  id: ID!
  name: String!
  sponsor: String!
  plan: String
  objectives: String
  motivations: String
  limitations: String
  restrictions: String
  status: ProjectStatus
  startAt: DateTime
  endAt: DateTime
  twProjectId: String
  twTaskListId: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

type ProjectRole implements Node {
  id: ID!
  estimatePrice: Float
  estimateEffort: Int
  createdAt: DateTime!
  updatedAt: DateTime!
  role: Role!
  project: Project!
  contributors(where: ProjectRoleContributorWhereInput, orderBy: ProjectRoleContributorOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ProjectRoleContributor!]
}

"""A connection to a list of items."""
type ProjectRoleConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ProjectRoleEdge]!
  aggregate: AggregateProjectRole!
}

type ProjectRoleContributor implements Node {
  id: ID!
  price: Float!
  effort: Int
  estimateEffort: Int!
  startAt: DateTime!
  endAt: DateTime!
  createdAt: DateTime!
  updatedAt: DateTime!
  roleLevel: RoleLevelType!
  projectRole: ProjectRole!
  contributor: Contributor!
}

"""A connection to a list of items."""
type ProjectRoleContributorConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ProjectRoleContributorEdge]!
  aggregate: AggregateProjectRoleContributor!
}

input ProjectRoleContributorCreateInput {
  price: Float
  effort: Int
  estimateEffort: Int
  startAt: DateTime!
  endAt: DateTime!
  roleLevel: RoleLevelType!
  projectRole: ProjectRoleCreateOneWithoutContributorsInput!
  contributor: ContributorCreateOneWithoutProjectRolesInput!
}

input ProjectRoleContributorCreateManyWithoutContributorInput {
  create: [ProjectRoleContributorCreateWithoutContributorInput!]
  connect: [ProjectRoleContributorWhereUniqueInput!]
}

input ProjectRoleContributorCreateManyWithoutProjectRoleInput {
  create: [ProjectRoleContributorCreateWithoutProjectRoleInput!]
  connect: [ProjectRoleContributorWhereUniqueInput!]
}

input ProjectRoleContributorCreateWithoutContributorInput {
  price: Float
  effort: Int
  estimateEffort: Int
  startAt: DateTime!
  endAt: DateTime!
  roleLevel: RoleLevelType!
  projectRole: ProjectRoleCreateOneWithoutContributorsInput!
}

input ProjectRoleContributorCreateWithoutProjectRoleInput {
  price: Float
  effort: Int
  estimateEffort: Int
  startAt: DateTime!
  endAt: DateTime!
  roleLevel: RoleLevelType!
  contributor: ContributorCreateOneWithoutProjectRolesInput!
}

"""An edge in a connection."""
type ProjectRoleContributorEdge {
  """The item at the end of the edge."""
  node: ProjectRoleContributor!

  """A cursor for use in pagination."""
  cursor: String!
}

enum ProjectRoleContributorOrderByInput {
  id_ASC
  id_DESC
  price_ASC
  price_DESC
  effort_ASC
  effort_DESC
  estimateEffort_ASC
  estimateEffort_DESC
  startAt_ASC
  startAt_DESC
  endAt_ASC
  endAt_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  roleLevel_ASC
  roleLevel_DESC
}

type ProjectRoleContributorPreviousValues {
  id: ID!
  price: Float!
  effort: Int
  estimateEffort: Int!
  startAt: DateTime!
  endAt: DateTime!
  createdAt: DateTime!
  updatedAt: DateTime!
  roleLevel: RoleLevelType!
}

input ProjectRoleContributorScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [ProjectRoleContributorScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [ProjectRoleContributorScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ProjectRoleContributorScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  price: Float

  """All values that are not equal to given value."""
  price_not: Float

  """All values that are contained in given list."""
  price_in: [Float!]

  """All values that are not contained in given list."""
  price_not_in: [Float!]

  """All values less than the given value."""
  price_lt: Float

  """All values less than or equal the given value."""
  price_lte: Float

  """All values greater than the given value."""
  price_gt: Float

  """All values greater than or equal the given value."""
  price_gte: Float
  effort: Int

  """All values that are not equal to given value."""
  effort_not: Int

  """All values that are contained in given list."""
  effort_in: [Int!]

  """All values that are not contained in given list."""
  effort_not_in: [Int!]

  """All values less than the given value."""
  effort_lt: Int

  """All values less than or equal the given value."""
  effort_lte: Int

  """All values greater than the given value."""
  effort_gt: Int

  """All values greater than or equal the given value."""
  effort_gte: Int
  estimateEffort: Int

  """All values that are not equal to given value."""
  estimateEffort_not: Int

  """All values that are contained in given list."""
  estimateEffort_in: [Int!]

  """All values that are not contained in given list."""
  estimateEffort_not_in: [Int!]

  """All values less than the given value."""
  estimateEffort_lt: Int

  """All values less than or equal the given value."""
  estimateEffort_lte: Int

  """All values greater than the given value."""
  estimateEffort_gt: Int

  """All values greater than or equal the given value."""
  estimateEffort_gte: Int
  startAt: DateTime

  """All values that are not equal to given value."""
  startAt_not: DateTime

  """All values that are contained in given list."""
  startAt_in: [DateTime!]

  """All values that are not contained in given list."""
  startAt_not_in: [DateTime!]

  """All values less than the given value."""
  startAt_lt: DateTime

  """All values less than or equal the given value."""
  startAt_lte: DateTime

  """All values greater than the given value."""
  startAt_gt: DateTime

  """All values greater than or equal the given value."""
  startAt_gte: DateTime
  endAt: DateTime

  """All values that are not equal to given value."""
  endAt_not: DateTime

  """All values that are contained in given list."""
  endAt_in: [DateTime!]

  """All values that are not contained in given list."""
  endAt_not_in: [DateTime!]

  """All values less than the given value."""
  endAt_lt: DateTime

  """All values less than or equal the given value."""
  endAt_lte: DateTime

  """All values greater than the given value."""
  endAt_gt: DateTime

  """All values greater than or equal the given value."""
  endAt_gte: DateTime
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  roleLevel: RoleLevelType

  """All values that are not equal to given value."""
  roleLevel_not: RoleLevelType

  """All values that are contained in given list."""
  roleLevel_in: [RoleLevelType!]

  """All values that are not contained in given list."""
  roleLevel_not_in: [RoleLevelType!]
}

type ProjectRoleContributorSubscriptionPayload {
  mutation: MutationType!
  node: ProjectRoleContributor
  updatedFields: [String!]
  previousValues: ProjectRoleContributorPreviousValues
}

input ProjectRoleContributorSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [ProjectRoleContributorSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [ProjectRoleContributorSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ProjectRoleContributorSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: ProjectRoleContributorWhereInput
}

input ProjectRoleContributorUpdateInput {
  price: Float
  effort: Int
  estimateEffort: Int
  startAt: DateTime
  endAt: DateTime
  roleLevel: RoleLevelType
  projectRole: ProjectRoleUpdateOneRequiredWithoutContributorsInput
  contributor: ContributorUpdateOneRequiredWithoutProjectRolesInput
}

input ProjectRoleContributorUpdateManyDataInput {
  price: Float
  effort: Int
  estimateEffort: Int
  startAt: DateTime
  endAt: DateTime
  roleLevel: RoleLevelType
}

input ProjectRoleContributorUpdateManyMutationInput {
  price: Float
  effort: Int
  estimateEffort: Int
  startAt: DateTime
  endAt: DateTime
  roleLevel: RoleLevelType
}

input ProjectRoleContributorUpdateManyWithoutContributorInput {
  create: [ProjectRoleContributorCreateWithoutContributorInput!]
  connect: [ProjectRoleContributorWhereUniqueInput!]
  disconnect: [ProjectRoleContributorWhereUniqueInput!]
  delete: [ProjectRoleContributorWhereUniqueInput!]
  update: [ProjectRoleContributorUpdateWithWhereUniqueWithoutContributorInput!]
  updateMany: [ProjectRoleContributorUpdateManyWithWhereNestedInput!]
  deleteMany: [ProjectRoleContributorScalarWhereInput!]
  upsert: [ProjectRoleContributorUpsertWithWhereUniqueWithoutContributorInput!]
}

input ProjectRoleContributorUpdateManyWithoutProjectRoleInput {
  create: [ProjectRoleContributorCreateWithoutProjectRoleInput!]
  connect: [ProjectRoleContributorWhereUniqueInput!]
  disconnect: [ProjectRoleContributorWhereUniqueInput!]
  delete: [ProjectRoleContributorWhereUniqueInput!]
  update: [ProjectRoleContributorUpdateWithWhereUniqueWithoutProjectRoleInput!]
  updateMany: [ProjectRoleContributorUpdateManyWithWhereNestedInput!]
  deleteMany: [ProjectRoleContributorScalarWhereInput!]
  upsert: [ProjectRoleContributorUpsertWithWhereUniqueWithoutProjectRoleInput!]
}

input ProjectRoleContributorUpdateManyWithWhereNestedInput {
  where: ProjectRoleContributorScalarWhereInput!
  data: ProjectRoleContributorUpdateManyDataInput!
}

input ProjectRoleContributorUpdateWithoutContributorDataInput {
  price: Float
  effort: Int
  estimateEffort: Int
  startAt: DateTime
  endAt: DateTime
  roleLevel: RoleLevelType
  projectRole: ProjectRoleUpdateOneRequiredWithoutContributorsInput
}

input ProjectRoleContributorUpdateWithoutProjectRoleDataInput {
  price: Float
  effort: Int
  estimateEffort: Int
  startAt: DateTime
  endAt: DateTime
  roleLevel: RoleLevelType
  contributor: ContributorUpdateOneRequiredWithoutProjectRolesInput
}

input ProjectRoleContributorUpdateWithWhereUniqueWithoutContributorInput {
  where: ProjectRoleContributorWhereUniqueInput!
  data: ProjectRoleContributorUpdateWithoutContributorDataInput!
}

input ProjectRoleContributorUpdateWithWhereUniqueWithoutProjectRoleInput {
  where: ProjectRoleContributorWhereUniqueInput!
  data: ProjectRoleContributorUpdateWithoutProjectRoleDataInput!
}

input ProjectRoleContributorUpsertWithWhereUniqueWithoutContributorInput {
  where: ProjectRoleContributorWhereUniqueInput!
  update: ProjectRoleContributorUpdateWithoutContributorDataInput!
  create: ProjectRoleContributorCreateWithoutContributorInput!
}

input ProjectRoleContributorUpsertWithWhereUniqueWithoutProjectRoleInput {
  where: ProjectRoleContributorWhereUniqueInput!
  update: ProjectRoleContributorUpdateWithoutProjectRoleDataInput!
  create: ProjectRoleContributorCreateWithoutProjectRoleInput!
}

input ProjectRoleContributorWhereInput {
  """Logical AND on all given filters."""
  AND: [ProjectRoleContributorWhereInput!]

  """Logical OR on all given filters."""
  OR: [ProjectRoleContributorWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ProjectRoleContributorWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  price: Float

  """All values that are not equal to given value."""
  price_not: Float

  """All values that are contained in given list."""
  price_in: [Float!]

  """All values that are not contained in given list."""
  price_not_in: [Float!]

  """All values less than the given value."""
  price_lt: Float

  """All values less than or equal the given value."""
  price_lte: Float

  """All values greater than the given value."""
  price_gt: Float

  """All values greater than or equal the given value."""
  price_gte: Float
  effort: Int

  """All values that are not equal to given value."""
  effort_not: Int

  """All values that are contained in given list."""
  effort_in: [Int!]

  """All values that are not contained in given list."""
  effort_not_in: [Int!]

  """All values less than the given value."""
  effort_lt: Int

  """All values less than or equal the given value."""
  effort_lte: Int

  """All values greater than the given value."""
  effort_gt: Int

  """All values greater than or equal the given value."""
  effort_gte: Int
  estimateEffort: Int

  """All values that are not equal to given value."""
  estimateEffort_not: Int

  """All values that are contained in given list."""
  estimateEffort_in: [Int!]

  """All values that are not contained in given list."""
  estimateEffort_not_in: [Int!]

  """All values less than the given value."""
  estimateEffort_lt: Int

  """All values less than or equal the given value."""
  estimateEffort_lte: Int

  """All values greater than the given value."""
  estimateEffort_gt: Int

  """All values greater than or equal the given value."""
  estimateEffort_gte: Int
  startAt: DateTime

  """All values that are not equal to given value."""
  startAt_not: DateTime

  """All values that are contained in given list."""
  startAt_in: [DateTime!]

  """All values that are not contained in given list."""
  startAt_not_in: [DateTime!]

  """All values less than the given value."""
  startAt_lt: DateTime

  """All values less than or equal the given value."""
  startAt_lte: DateTime

  """All values greater than the given value."""
  startAt_gt: DateTime

  """All values greater than or equal the given value."""
  startAt_gte: DateTime
  endAt: DateTime

  """All values that are not equal to given value."""
  endAt_not: DateTime

  """All values that are contained in given list."""
  endAt_in: [DateTime!]

  """All values that are not contained in given list."""
  endAt_not_in: [DateTime!]

  """All values less than the given value."""
  endAt_lt: DateTime

  """All values less than or equal the given value."""
  endAt_lte: DateTime

  """All values greater than the given value."""
  endAt_gt: DateTime

  """All values greater than or equal the given value."""
  endAt_gte: DateTime
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  roleLevel: RoleLevelType

  """All values that are not equal to given value."""
  roleLevel_not: RoleLevelType

  """All values that are contained in given list."""
  roleLevel_in: [RoleLevelType!]

  """All values that are not contained in given list."""
  roleLevel_not_in: [RoleLevelType!]
  projectRole: ProjectRoleWhereInput
  contributor: ContributorWhereInput
}

input ProjectRoleContributorWhereUniqueInput {
  id: ID
}

input ProjectRoleCreateInput {
  estimatePrice: Float
  estimateEffort: Int
  role: RoleCreateOneWithoutProjectRolesInput!
  project: ProjectCreateOneWithoutProjectRolesInput!
  contributors: ProjectRoleContributorCreateManyWithoutProjectRoleInput
}

input ProjectRoleCreateManyWithoutProjectInput {
  create: [ProjectRoleCreateWithoutProjectInput!]
  connect: [ProjectRoleWhereUniqueInput!]
}

input ProjectRoleCreateManyWithoutRoleInput {
  create: [ProjectRoleCreateWithoutRoleInput!]
  connect: [ProjectRoleWhereUniqueInput!]
}

input ProjectRoleCreateOneWithoutContributorsInput {
  create: ProjectRoleCreateWithoutContributorsInput
  connect: ProjectRoleWhereUniqueInput
}

input ProjectRoleCreateWithoutContributorsInput {
  estimatePrice: Float
  estimateEffort: Int
  role: RoleCreateOneWithoutProjectRolesInput!
  project: ProjectCreateOneWithoutProjectRolesInput!
}

input ProjectRoleCreateWithoutProjectInput {
  estimatePrice: Float
  estimateEffort: Int
  role: RoleCreateOneWithoutProjectRolesInput!
  contributors: ProjectRoleContributorCreateManyWithoutProjectRoleInput
}

input ProjectRoleCreateWithoutRoleInput {
  estimatePrice: Float
  estimateEffort: Int
  project: ProjectCreateOneWithoutProjectRolesInput!
  contributors: ProjectRoleContributorCreateManyWithoutProjectRoleInput
}

"""An edge in a connection."""
type ProjectRoleEdge {
  """The item at the end of the edge."""
  node: ProjectRole!

  """A cursor for use in pagination."""
  cursor: String!
}

enum ProjectRoleOrderByInput {
  id_ASC
  id_DESC
  estimatePrice_ASC
  estimatePrice_DESC
  estimateEffort_ASC
  estimateEffort_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type ProjectRolePreviousValues {
  id: ID!
  estimatePrice: Float
  estimateEffort: Int
  createdAt: DateTime!
  updatedAt: DateTime!
}

input ProjectRoleScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [ProjectRoleScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [ProjectRoleScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ProjectRoleScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  estimatePrice: Float

  """All values that are not equal to given value."""
  estimatePrice_not: Float

  """All values that are contained in given list."""
  estimatePrice_in: [Float!]

  """All values that are not contained in given list."""
  estimatePrice_not_in: [Float!]

  """All values less than the given value."""
  estimatePrice_lt: Float

  """All values less than or equal the given value."""
  estimatePrice_lte: Float

  """All values greater than the given value."""
  estimatePrice_gt: Float

  """All values greater than or equal the given value."""
  estimatePrice_gte: Float
  estimateEffort: Int

  """All values that are not equal to given value."""
  estimateEffort_not: Int

  """All values that are contained in given list."""
  estimateEffort_in: [Int!]

  """All values that are not contained in given list."""
  estimateEffort_not_in: [Int!]

  """All values less than the given value."""
  estimateEffort_lt: Int

  """All values less than or equal the given value."""
  estimateEffort_lte: Int

  """All values greater than the given value."""
  estimateEffort_gt: Int

  """All values greater than or equal the given value."""
  estimateEffort_gte: Int
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
}

type ProjectRoleSubscriptionPayload {
  mutation: MutationType!
  node: ProjectRole
  updatedFields: [String!]
  previousValues: ProjectRolePreviousValues
}

input ProjectRoleSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [ProjectRoleSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [ProjectRoleSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ProjectRoleSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: ProjectRoleWhereInput
}

input ProjectRoleUpdateInput {
  estimatePrice: Float
  estimateEffort: Int
  role: RoleUpdateOneRequiredWithoutProjectRolesInput
  project: ProjectUpdateOneRequiredWithoutProjectRolesInput
  contributors: ProjectRoleContributorUpdateManyWithoutProjectRoleInput
}

input ProjectRoleUpdateManyDataInput {
  estimatePrice: Float
  estimateEffort: Int
}

input ProjectRoleUpdateManyMutationInput {
  estimatePrice: Float
  estimateEffort: Int
}

input ProjectRoleUpdateManyWithoutProjectInput {
  create: [ProjectRoleCreateWithoutProjectInput!]
  connect: [ProjectRoleWhereUniqueInput!]
  disconnect: [ProjectRoleWhereUniqueInput!]
  delete: [ProjectRoleWhereUniqueInput!]
  update: [ProjectRoleUpdateWithWhereUniqueWithoutProjectInput!]
  updateMany: [ProjectRoleUpdateManyWithWhereNestedInput!]
  deleteMany: [ProjectRoleScalarWhereInput!]
  upsert: [ProjectRoleUpsertWithWhereUniqueWithoutProjectInput!]
}

input ProjectRoleUpdateManyWithoutRoleInput {
  create: [ProjectRoleCreateWithoutRoleInput!]
  connect: [ProjectRoleWhereUniqueInput!]
  disconnect: [ProjectRoleWhereUniqueInput!]
  delete: [ProjectRoleWhereUniqueInput!]
  update: [ProjectRoleUpdateWithWhereUniqueWithoutRoleInput!]
  updateMany: [ProjectRoleUpdateManyWithWhereNestedInput!]
  deleteMany: [ProjectRoleScalarWhereInput!]
  upsert: [ProjectRoleUpsertWithWhereUniqueWithoutRoleInput!]
}

input ProjectRoleUpdateManyWithWhereNestedInput {
  where: ProjectRoleScalarWhereInput!
  data: ProjectRoleUpdateManyDataInput!
}

input ProjectRoleUpdateOneRequiredWithoutContributorsInput {
  create: ProjectRoleCreateWithoutContributorsInput
  connect: ProjectRoleWhereUniqueInput
  update: ProjectRoleUpdateWithoutContributorsDataInput
  upsert: ProjectRoleUpsertWithoutContributorsInput
}

input ProjectRoleUpdateWithoutContributorsDataInput {
  estimatePrice: Float
  estimateEffort: Int
  role: RoleUpdateOneRequiredWithoutProjectRolesInput
  project: ProjectUpdateOneRequiredWithoutProjectRolesInput
}

input ProjectRoleUpdateWithoutProjectDataInput {
  estimatePrice: Float
  estimateEffort: Int
  role: RoleUpdateOneRequiredWithoutProjectRolesInput
  contributors: ProjectRoleContributorUpdateManyWithoutProjectRoleInput
}

input ProjectRoleUpdateWithoutRoleDataInput {
  estimatePrice: Float
  estimateEffort: Int
  project: ProjectUpdateOneRequiredWithoutProjectRolesInput
  contributors: ProjectRoleContributorUpdateManyWithoutProjectRoleInput
}

input ProjectRoleUpdateWithWhereUniqueWithoutProjectInput {
  where: ProjectRoleWhereUniqueInput!
  data: ProjectRoleUpdateWithoutProjectDataInput!
}

input ProjectRoleUpdateWithWhereUniqueWithoutRoleInput {
  where: ProjectRoleWhereUniqueInput!
  data: ProjectRoleUpdateWithoutRoleDataInput!
}

input ProjectRoleUpsertWithoutContributorsInput {
  update: ProjectRoleUpdateWithoutContributorsDataInput!
  create: ProjectRoleCreateWithoutContributorsInput!
}

input ProjectRoleUpsertWithWhereUniqueWithoutProjectInput {
  where: ProjectRoleWhereUniqueInput!
  update: ProjectRoleUpdateWithoutProjectDataInput!
  create: ProjectRoleCreateWithoutProjectInput!
}

input ProjectRoleUpsertWithWhereUniqueWithoutRoleInput {
  where: ProjectRoleWhereUniqueInput!
  update: ProjectRoleUpdateWithoutRoleDataInput!
  create: ProjectRoleCreateWithoutRoleInput!
}

input ProjectRoleWhereInput {
  """Logical AND on all given filters."""
  AND: [ProjectRoleWhereInput!]

  """Logical OR on all given filters."""
  OR: [ProjectRoleWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ProjectRoleWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  estimatePrice: Float

  """All values that are not equal to given value."""
  estimatePrice_not: Float

  """All values that are contained in given list."""
  estimatePrice_in: [Float!]

  """All values that are not contained in given list."""
  estimatePrice_not_in: [Float!]

  """All values less than the given value."""
  estimatePrice_lt: Float

  """All values less than or equal the given value."""
  estimatePrice_lte: Float

  """All values greater than the given value."""
  estimatePrice_gt: Float

  """All values greater than or equal the given value."""
  estimatePrice_gte: Float
  estimateEffort: Int

  """All values that are not equal to given value."""
  estimateEffort_not: Int

  """All values that are contained in given list."""
  estimateEffort_in: [Int!]

  """All values that are not contained in given list."""
  estimateEffort_not_in: [Int!]

  """All values less than the given value."""
  estimateEffort_lt: Int

  """All values less than or equal the given value."""
  estimateEffort_lte: Int

  """All values greater than the given value."""
  estimateEffort_gt: Int

  """All values greater than or equal the given value."""
  estimateEffort_gte: Int
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  role: RoleWhereInput
  project: ProjectWhereInput
  contributors_every: ProjectRoleContributorWhereInput
  contributors_some: ProjectRoleContributorWhereInput
  contributors_none: ProjectRoleContributorWhereInput
}

input ProjectRoleWhereUniqueInput {
  id: ID
}

enum ProjectStatus {
  OPEN
  TODO
  PLANNED
  INPROGRESS
  DONE
  CANCELED
}

type ProjectSubscriptionPayload {
  mutation: MutationType!
  node: Project
  updatedFields: [String!]
  previousValues: ProjectPreviousValues
}

input ProjectSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [ProjectSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [ProjectSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ProjectSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: ProjectWhereInput
}

input ProjectUpdateInput {
  name: String
  sponsor: String
  plan: String
  objectives: String
  motivations: String
  limitations: String
  restrictions: String
  status: ProjectStatus
  startAt: DateTime
  endAt: DateTime
  twProjectId: String
  twTaskListId: String
  risks: RiskUpdateManyWithoutProjectInput
  epics: EpicUpdateManyWithoutProjectInput
  releases: ReleaseUpdateManyWithoutProjectInput
  resources: ResourceUpdateManyWithoutProjectInput
  iterations: IterationUpdateManyWithoutProjectInput
  milestones: MilestoneUpdateManyWithoutProjectInput
  projectRoles: ProjectRoleUpdateManyWithoutProjectInput
}

input ProjectUpdateManyMutationInput {
  name: String
  sponsor: String
  plan: String
  objectives: String
  motivations: String
  limitations: String
  restrictions: String
  status: ProjectStatus
  startAt: DateTime
  endAt: DateTime
  twProjectId: String
  twTaskListId: String
}

input ProjectUpdateOneRequiredWithoutEpicsInput {
  create: ProjectCreateWithoutEpicsInput
  connect: ProjectWhereUniqueInput
  update: ProjectUpdateWithoutEpicsDataInput
  upsert: ProjectUpsertWithoutEpicsInput
}

input ProjectUpdateOneRequiredWithoutIterationsInput {
  create: ProjectCreateWithoutIterationsInput
  connect: ProjectWhereUniqueInput
  update: ProjectUpdateWithoutIterationsDataInput
  upsert: ProjectUpsertWithoutIterationsInput
}

input ProjectUpdateOneRequiredWithoutMilestonesInput {
  create: ProjectCreateWithoutMilestonesInput
  connect: ProjectWhereUniqueInput
  update: ProjectUpdateWithoutMilestonesDataInput
  upsert: ProjectUpsertWithoutMilestonesInput
}

input ProjectUpdateOneRequiredWithoutProjectRolesInput {
  create: ProjectCreateWithoutProjectRolesInput
  connect: ProjectWhereUniqueInput
  update: ProjectUpdateWithoutProjectRolesDataInput
  upsert: ProjectUpsertWithoutProjectRolesInput
}

input ProjectUpdateOneRequiredWithoutReleasesInput {
  create: ProjectCreateWithoutReleasesInput
  connect: ProjectWhereUniqueInput
  update: ProjectUpdateWithoutReleasesDataInput
  upsert: ProjectUpsertWithoutReleasesInput
}

input ProjectUpdateOneRequiredWithoutResourcesInput {
  create: ProjectCreateWithoutResourcesInput
  connect: ProjectWhereUniqueInput
  update: ProjectUpdateWithoutResourcesDataInput
  upsert: ProjectUpsertWithoutResourcesInput
}

input ProjectUpdateOneRequiredWithoutRisksInput {
  create: ProjectCreateWithoutRisksInput
  connect: ProjectWhereUniqueInput
  update: ProjectUpdateWithoutRisksDataInput
  upsert: ProjectUpsertWithoutRisksInput
}

input ProjectUpdateWithoutEpicsDataInput {
  name: String
  sponsor: String
  plan: String
  objectives: String
  motivations: String
  limitations: String
  restrictions: String
  status: ProjectStatus
  startAt: DateTime
  endAt: DateTime
  twProjectId: String
  twTaskListId: String
  risks: RiskUpdateManyWithoutProjectInput
  releases: ReleaseUpdateManyWithoutProjectInput
  resources: ResourceUpdateManyWithoutProjectInput
  iterations: IterationUpdateManyWithoutProjectInput
  milestones: MilestoneUpdateManyWithoutProjectInput
  projectRoles: ProjectRoleUpdateManyWithoutProjectInput
}

input ProjectUpdateWithoutIterationsDataInput {
  name: String
  sponsor: String
  plan: String
  objectives: String
  motivations: String
  limitations: String
  restrictions: String
  status: ProjectStatus
  startAt: DateTime
  endAt: DateTime
  twProjectId: String
  twTaskListId: String
  risks: RiskUpdateManyWithoutProjectInput
  epics: EpicUpdateManyWithoutProjectInput
  releases: ReleaseUpdateManyWithoutProjectInput
  resources: ResourceUpdateManyWithoutProjectInput
  milestones: MilestoneUpdateManyWithoutProjectInput
  projectRoles: ProjectRoleUpdateManyWithoutProjectInput
}

input ProjectUpdateWithoutMilestonesDataInput {
  name: String
  sponsor: String
  plan: String
  objectives: String
  motivations: String
  limitations: String
  restrictions: String
  status: ProjectStatus
  startAt: DateTime
  endAt: DateTime
  twProjectId: String
  twTaskListId: String
  risks: RiskUpdateManyWithoutProjectInput
  epics: EpicUpdateManyWithoutProjectInput
  releases: ReleaseUpdateManyWithoutProjectInput
  resources: ResourceUpdateManyWithoutProjectInput
  iterations: IterationUpdateManyWithoutProjectInput
  projectRoles: ProjectRoleUpdateManyWithoutProjectInput
}

input ProjectUpdateWithoutProjectRolesDataInput {
  name: String
  sponsor: String
  plan: String
  objectives: String
  motivations: String
  limitations: String
  restrictions: String
  status: ProjectStatus
  startAt: DateTime
  endAt: DateTime
  twProjectId: String
  twTaskListId: String
  risks: RiskUpdateManyWithoutProjectInput
  epics: EpicUpdateManyWithoutProjectInput
  releases: ReleaseUpdateManyWithoutProjectInput
  resources: ResourceUpdateManyWithoutProjectInput
  iterations: IterationUpdateManyWithoutProjectInput
  milestones: MilestoneUpdateManyWithoutProjectInput
}

input ProjectUpdateWithoutReleasesDataInput {
  name: String
  sponsor: String
  plan: String
  objectives: String
  motivations: String
  limitations: String
  restrictions: String
  status: ProjectStatus
  startAt: DateTime
  endAt: DateTime
  twProjectId: String
  twTaskListId: String
  risks: RiskUpdateManyWithoutProjectInput
  epics: EpicUpdateManyWithoutProjectInput
  resources: ResourceUpdateManyWithoutProjectInput
  iterations: IterationUpdateManyWithoutProjectInput
  milestones: MilestoneUpdateManyWithoutProjectInput
  projectRoles: ProjectRoleUpdateManyWithoutProjectInput
}

input ProjectUpdateWithoutResourcesDataInput {
  name: String
  sponsor: String
  plan: String
  objectives: String
  motivations: String
  limitations: String
  restrictions: String
  status: ProjectStatus
  startAt: DateTime
  endAt: DateTime
  twProjectId: String
  twTaskListId: String
  risks: RiskUpdateManyWithoutProjectInput
  epics: EpicUpdateManyWithoutProjectInput
  releases: ReleaseUpdateManyWithoutProjectInput
  iterations: IterationUpdateManyWithoutProjectInput
  milestones: MilestoneUpdateManyWithoutProjectInput
  projectRoles: ProjectRoleUpdateManyWithoutProjectInput
}

input ProjectUpdateWithoutRisksDataInput {
  name: String
  sponsor: String
  plan: String
  objectives: String
  motivations: String
  limitations: String
  restrictions: String
  status: ProjectStatus
  startAt: DateTime
  endAt: DateTime
  twProjectId: String
  twTaskListId: String
  epics: EpicUpdateManyWithoutProjectInput
  releases: ReleaseUpdateManyWithoutProjectInput
  resources: ResourceUpdateManyWithoutProjectInput
  iterations: IterationUpdateManyWithoutProjectInput
  milestones: MilestoneUpdateManyWithoutProjectInput
  projectRoles: ProjectRoleUpdateManyWithoutProjectInput
}

input ProjectUpsertWithoutEpicsInput {
  update: ProjectUpdateWithoutEpicsDataInput!
  create: ProjectCreateWithoutEpicsInput!
}

input ProjectUpsertWithoutIterationsInput {
  update: ProjectUpdateWithoutIterationsDataInput!
  create: ProjectCreateWithoutIterationsInput!
}

input ProjectUpsertWithoutMilestonesInput {
  update: ProjectUpdateWithoutMilestonesDataInput!
  create: ProjectCreateWithoutMilestonesInput!
}

input ProjectUpsertWithoutProjectRolesInput {
  update: ProjectUpdateWithoutProjectRolesDataInput!
  create: ProjectCreateWithoutProjectRolesInput!
}

input ProjectUpsertWithoutReleasesInput {
  update: ProjectUpdateWithoutReleasesDataInput!
  create: ProjectCreateWithoutReleasesInput!
}

input ProjectUpsertWithoutResourcesInput {
  update: ProjectUpdateWithoutResourcesDataInput!
  create: ProjectCreateWithoutResourcesInput!
}

input ProjectUpsertWithoutRisksInput {
  update: ProjectUpdateWithoutRisksDataInput!
  create: ProjectCreateWithoutRisksInput!
}

input ProjectWhereInput {
  """Logical AND on all given filters."""
  AND: [ProjectWhereInput!]

  """Logical OR on all given filters."""
  OR: [ProjectWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ProjectWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  sponsor: String

  """All values that are not equal to given value."""
  sponsor_not: String

  """All values that are contained in given list."""
  sponsor_in: [String!]

  """All values that are not contained in given list."""
  sponsor_not_in: [String!]

  """All values less than the given value."""
  sponsor_lt: String

  """All values less than or equal the given value."""
  sponsor_lte: String

  """All values greater than the given value."""
  sponsor_gt: String

  """All values greater than or equal the given value."""
  sponsor_gte: String

  """All values containing the given string."""
  sponsor_contains: String

  """All values not containing the given string."""
  sponsor_not_contains: String

  """All values starting with the given string."""
  sponsor_starts_with: String

  """All values not starting with the given string."""
  sponsor_not_starts_with: String

  """All values ending with the given string."""
  sponsor_ends_with: String

  """All values not ending with the given string."""
  sponsor_not_ends_with: String
  plan: String

  """All values that are not equal to given value."""
  plan_not: String

  """All values that are contained in given list."""
  plan_in: [String!]

  """All values that are not contained in given list."""
  plan_not_in: [String!]

  """All values less than the given value."""
  plan_lt: String

  """All values less than or equal the given value."""
  plan_lte: String

  """All values greater than the given value."""
  plan_gt: String

  """All values greater than or equal the given value."""
  plan_gte: String

  """All values containing the given string."""
  plan_contains: String

  """All values not containing the given string."""
  plan_not_contains: String

  """All values starting with the given string."""
  plan_starts_with: String

  """All values not starting with the given string."""
  plan_not_starts_with: String

  """All values ending with the given string."""
  plan_ends_with: String

  """All values not ending with the given string."""
  plan_not_ends_with: String
  objectives: String

  """All values that are not equal to given value."""
  objectives_not: String

  """All values that are contained in given list."""
  objectives_in: [String!]

  """All values that are not contained in given list."""
  objectives_not_in: [String!]

  """All values less than the given value."""
  objectives_lt: String

  """All values less than or equal the given value."""
  objectives_lte: String

  """All values greater than the given value."""
  objectives_gt: String

  """All values greater than or equal the given value."""
  objectives_gte: String

  """All values containing the given string."""
  objectives_contains: String

  """All values not containing the given string."""
  objectives_not_contains: String

  """All values starting with the given string."""
  objectives_starts_with: String

  """All values not starting with the given string."""
  objectives_not_starts_with: String

  """All values ending with the given string."""
  objectives_ends_with: String

  """All values not ending with the given string."""
  objectives_not_ends_with: String
  motivations: String

  """All values that are not equal to given value."""
  motivations_not: String

  """All values that are contained in given list."""
  motivations_in: [String!]

  """All values that are not contained in given list."""
  motivations_not_in: [String!]

  """All values less than the given value."""
  motivations_lt: String

  """All values less than or equal the given value."""
  motivations_lte: String

  """All values greater than the given value."""
  motivations_gt: String

  """All values greater than or equal the given value."""
  motivations_gte: String

  """All values containing the given string."""
  motivations_contains: String

  """All values not containing the given string."""
  motivations_not_contains: String

  """All values starting with the given string."""
  motivations_starts_with: String

  """All values not starting with the given string."""
  motivations_not_starts_with: String

  """All values ending with the given string."""
  motivations_ends_with: String

  """All values not ending with the given string."""
  motivations_not_ends_with: String
  limitations: String

  """All values that are not equal to given value."""
  limitations_not: String

  """All values that are contained in given list."""
  limitations_in: [String!]

  """All values that are not contained in given list."""
  limitations_not_in: [String!]

  """All values less than the given value."""
  limitations_lt: String

  """All values less than or equal the given value."""
  limitations_lte: String

  """All values greater than the given value."""
  limitations_gt: String

  """All values greater than or equal the given value."""
  limitations_gte: String

  """All values containing the given string."""
  limitations_contains: String

  """All values not containing the given string."""
  limitations_not_contains: String

  """All values starting with the given string."""
  limitations_starts_with: String

  """All values not starting with the given string."""
  limitations_not_starts_with: String

  """All values ending with the given string."""
  limitations_ends_with: String

  """All values not ending with the given string."""
  limitations_not_ends_with: String
  restrictions: String

  """All values that are not equal to given value."""
  restrictions_not: String

  """All values that are contained in given list."""
  restrictions_in: [String!]

  """All values that are not contained in given list."""
  restrictions_not_in: [String!]

  """All values less than the given value."""
  restrictions_lt: String

  """All values less than or equal the given value."""
  restrictions_lte: String

  """All values greater than the given value."""
  restrictions_gt: String

  """All values greater than or equal the given value."""
  restrictions_gte: String

  """All values containing the given string."""
  restrictions_contains: String

  """All values not containing the given string."""
  restrictions_not_contains: String

  """All values starting with the given string."""
  restrictions_starts_with: String

  """All values not starting with the given string."""
  restrictions_not_starts_with: String

  """All values ending with the given string."""
  restrictions_ends_with: String

  """All values not ending with the given string."""
  restrictions_not_ends_with: String
  status: ProjectStatus

  """All values that are not equal to given value."""
  status_not: ProjectStatus

  """All values that are contained in given list."""
  status_in: [ProjectStatus!]

  """All values that are not contained in given list."""
  status_not_in: [ProjectStatus!]
  startAt: DateTime

  """All values that are not equal to given value."""
  startAt_not: DateTime

  """All values that are contained in given list."""
  startAt_in: [DateTime!]

  """All values that are not contained in given list."""
  startAt_not_in: [DateTime!]

  """All values less than the given value."""
  startAt_lt: DateTime

  """All values less than or equal the given value."""
  startAt_lte: DateTime

  """All values greater than the given value."""
  startAt_gt: DateTime

  """All values greater than or equal the given value."""
  startAt_gte: DateTime
  endAt: DateTime

  """All values that are not equal to given value."""
  endAt_not: DateTime

  """All values that are contained in given list."""
  endAt_in: [DateTime!]

  """All values that are not contained in given list."""
  endAt_not_in: [DateTime!]

  """All values less than the given value."""
  endAt_lt: DateTime

  """All values less than or equal the given value."""
  endAt_lte: DateTime

  """All values greater than the given value."""
  endAt_gt: DateTime

  """All values greater than or equal the given value."""
  endAt_gte: DateTime
  twProjectId: String

  """All values that are not equal to given value."""
  twProjectId_not: String

  """All values that are contained in given list."""
  twProjectId_in: [String!]

  """All values that are not contained in given list."""
  twProjectId_not_in: [String!]

  """All values less than the given value."""
  twProjectId_lt: String

  """All values less than or equal the given value."""
  twProjectId_lte: String

  """All values greater than the given value."""
  twProjectId_gt: String

  """All values greater than or equal the given value."""
  twProjectId_gte: String

  """All values containing the given string."""
  twProjectId_contains: String

  """All values not containing the given string."""
  twProjectId_not_contains: String

  """All values starting with the given string."""
  twProjectId_starts_with: String

  """All values not starting with the given string."""
  twProjectId_not_starts_with: String

  """All values ending with the given string."""
  twProjectId_ends_with: String

  """All values not ending with the given string."""
  twProjectId_not_ends_with: String
  twTaskListId: String

  """All values that are not equal to given value."""
  twTaskListId_not: String

  """All values that are contained in given list."""
  twTaskListId_in: [String!]

  """All values that are not contained in given list."""
  twTaskListId_not_in: [String!]

  """All values less than the given value."""
  twTaskListId_lt: String

  """All values less than or equal the given value."""
  twTaskListId_lte: String

  """All values greater than the given value."""
  twTaskListId_gt: String

  """All values greater than or equal the given value."""
  twTaskListId_gte: String

  """All values containing the given string."""
  twTaskListId_contains: String

  """All values not containing the given string."""
  twTaskListId_not_contains: String

  """All values starting with the given string."""
  twTaskListId_starts_with: String

  """All values not starting with the given string."""
  twTaskListId_not_starts_with: String

  """All values ending with the given string."""
  twTaskListId_ends_with: String

  """All values not ending with the given string."""
  twTaskListId_not_ends_with: String
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  risks_every: RiskWhereInput
  risks_some: RiskWhereInput
  risks_none: RiskWhereInput
  epics_every: EpicWhereInput
  epics_some: EpicWhereInput
  epics_none: EpicWhereInput
  releases_every: ReleaseWhereInput
  releases_some: ReleaseWhereInput
  releases_none: ReleaseWhereInput
  resources_every: ResourceWhereInput
  resources_some: ResourceWhereInput
  resources_none: ResourceWhereInput
  iterations_every: IterationWhereInput
  iterations_some: IterationWhereInput
  iterations_none: IterationWhereInput
  milestones_every: MilestoneWhereInput
  milestones_some: MilestoneWhereInput
  milestones_none: MilestoneWhereInput
  projectRoles_every: ProjectRoleWhereInput
  projectRoles_some: ProjectRoleWhereInput
  projectRoles_none: ProjectRoleWhereInput
}

input ProjectWhereUniqueInput {
  id: ID
}

type Query {
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  contributors(where: ContributorWhereInput, orderBy: ContributorOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Contributor]!
  contributorExperiences(where: ContributorExperienceWhereInput, orderBy: ContributorExperienceOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ContributorExperience]!
  contributorFormations(where: ContributorFormationWhereInput, orderBy: ContributorFormationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ContributorFormation]!
  projects(where: ProjectWhereInput, orderBy: ProjectOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Project]!
  resources(where: ResourceWhereInput, orderBy: ResourceOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Resource]!
  projectRoles(where: ProjectRoleWhereInput, orderBy: ProjectRoleOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ProjectRole]!
  projectRoleContributors(where: ProjectRoleContributorWhereInput, orderBy: ProjectRoleContributorOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ProjectRoleContributor]!
  roles(where: RoleWhereInput, orderBy: RoleOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Role]!
  roleLevels(where: RoleLevelWhereInput, orderBy: RoleLevelOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [RoleLevel]!
  milestones(where: MilestoneWhereInput, orderBy: MilestoneOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Milestone]!
  epics(where: EpicWhereInput, orderBy: EpicOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Epic]!
  userStories(where: UserStoryWhereInput, orderBy: UserStoryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [UserStory]!
  releases(where: ReleaseWhereInput, orderBy: ReleaseOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Release]!
  iterations(where: IterationWhereInput, orderBy: IterationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Iteration]!
  risks(where: RiskWhereInput, orderBy: RiskOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Risk]!
  user(where: UserWhereUniqueInput!): User
  contributor(where: ContributorWhereUniqueInput!): Contributor
  contributorExperience(where: ContributorExperienceWhereUniqueInput!): ContributorExperience
  contributorFormation(where: ContributorFormationWhereUniqueInput!): ContributorFormation
  project(where: ProjectWhereUniqueInput!): Project
  resource(where: ResourceWhereUniqueInput!): Resource
  projectRole(where: ProjectRoleWhereUniqueInput!): ProjectRole
  projectRoleContributor(where: ProjectRoleContributorWhereUniqueInput!): ProjectRoleContributor
  role(where: RoleWhereUniqueInput!): Role
  roleLevel(where: RoleLevelWhereUniqueInput!): RoleLevel
  milestone(where: MilestoneWhereUniqueInput!): Milestone
  epic(where: EpicWhereUniqueInput!): Epic
  userStory(where: UserStoryWhereUniqueInput!): UserStory
  release(where: ReleaseWhereUniqueInput!): Release
  iteration(where: IterationWhereUniqueInput!): Iteration
  risk(where: RiskWhereUniqueInput!): Risk
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  contributorsConnection(where: ContributorWhereInput, orderBy: ContributorOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ContributorConnection!
  contributorExperiencesConnection(where: ContributorExperienceWhereInput, orderBy: ContributorExperienceOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ContributorExperienceConnection!
  contributorFormationsConnection(where: ContributorFormationWhereInput, orderBy: ContributorFormationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ContributorFormationConnection!
  projectsConnection(where: ProjectWhereInput, orderBy: ProjectOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ProjectConnection!
  resourcesConnection(where: ResourceWhereInput, orderBy: ResourceOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ResourceConnection!
  projectRolesConnection(where: ProjectRoleWhereInput, orderBy: ProjectRoleOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ProjectRoleConnection!
  projectRoleContributorsConnection(where: ProjectRoleContributorWhereInput, orderBy: ProjectRoleContributorOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ProjectRoleContributorConnection!
  rolesConnection(where: RoleWhereInput, orderBy: RoleOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): RoleConnection!
  roleLevelsConnection(where: RoleLevelWhereInput, orderBy: RoleLevelOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): RoleLevelConnection!
  milestonesConnection(where: MilestoneWhereInput, orderBy: MilestoneOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): MilestoneConnection!
  epicsConnection(where: EpicWhereInput, orderBy: EpicOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): EpicConnection!
  userStoriesConnection(where: UserStoryWhereInput, orderBy: UserStoryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserStoryConnection!
  releasesConnection(where: ReleaseWhereInput, orderBy: ReleaseOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ReleaseConnection!
  iterationsConnection(where: IterationWhereInput, orderBy: IterationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): IterationConnection!
  risksConnection(where: RiskWhereInput, orderBy: RiskOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): RiskConnection!

  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node
}

type Release implements Node {
  id: ID!
  name: String!
  status: ReleaseStatus!
  startAt: DateTime!
  endAt: DateTime!
  createdAt: DateTime!
  updatedAt: DateTime!
  project: Project!
  epics(where: EpicWhereInput, orderBy: EpicOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Epic!]
  iterations(where: IterationWhereInput, orderBy: IterationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Iteration!]
}

"""A connection to a list of items."""
type ReleaseConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ReleaseEdge]!
  aggregate: AggregateRelease!
}

input ReleaseCreateInput {
  name: String!
  status: ReleaseStatus!
  startAt: DateTime!
  endAt: DateTime!
  project: ProjectCreateOneWithoutReleasesInput!
  epics: EpicCreateManyWithoutReleaseInput
  iterations: IterationCreateManyWithoutReleaseInput
}

input ReleaseCreateManyWithoutProjectInput {
  create: [ReleaseCreateWithoutProjectInput!]
  connect: [ReleaseWhereUniqueInput!]
}

input ReleaseCreateOneWithoutEpicsInput {
  create: ReleaseCreateWithoutEpicsInput
  connect: ReleaseWhereUniqueInput
}

input ReleaseCreateOneWithoutIterationsInput {
  create: ReleaseCreateWithoutIterationsInput
  connect: ReleaseWhereUniqueInput
}

input ReleaseCreateWithoutEpicsInput {
  name: String!
  status: ReleaseStatus!
  startAt: DateTime!
  endAt: DateTime!
  project: ProjectCreateOneWithoutReleasesInput!
  iterations: IterationCreateManyWithoutReleaseInput
}

input ReleaseCreateWithoutIterationsInput {
  name: String!
  status: ReleaseStatus!
  startAt: DateTime!
  endAt: DateTime!
  project: ProjectCreateOneWithoutReleasesInput!
  epics: EpicCreateManyWithoutReleaseInput
}

input ReleaseCreateWithoutProjectInput {
  name: String!
  status: ReleaseStatus!
  startAt: DateTime!
  endAt: DateTime!
  epics: EpicCreateManyWithoutReleaseInput
  iterations: IterationCreateManyWithoutReleaseInput
}

"""An edge in a connection."""
type ReleaseEdge {
  """The item at the end of the edge."""
  node: Release!

  """A cursor for use in pagination."""
  cursor: String!
}

enum ReleaseOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  status_ASC
  status_DESC
  startAt_ASC
  startAt_DESC
  endAt_ASC
  endAt_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type ReleasePreviousValues {
  id: ID!
  name: String!
  status: ReleaseStatus!
  startAt: DateTime!
  endAt: DateTime!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input ReleaseScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [ReleaseScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [ReleaseScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ReleaseScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  status: ReleaseStatus

  """All values that are not equal to given value."""
  status_not: ReleaseStatus

  """All values that are contained in given list."""
  status_in: [ReleaseStatus!]

  """All values that are not contained in given list."""
  status_not_in: [ReleaseStatus!]
  startAt: DateTime

  """All values that are not equal to given value."""
  startAt_not: DateTime

  """All values that are contained in given list."""
  startAt_in: [DateTime!]

  """All values that are not contained in given list."""
  startAt_not_in: [DateTime!]

  """All values less than the given value."""
  startAt_lt: DateTime

  """All values less than or equal the given value."""
  startAt_lte: DateTime

  """All values greater than the given value."""
  startAt_gt: DateTime

  """All values greater than or equal the given value."""
  startAt_gte: DateTime
  endAt: DateTime

  """All values that are not equal to given value."""
  endAt_not: DateTime

  """All values that are contained in given list."""
  endAt_in: [DateTime!]

  """All values that are not contained in given list."""
  endAt_not_in: [DateTime!]

  """All values less than the given value."""
  endAt_lt: DateTime

  """All values less than or equal the given value."""
  endAt_lte: DateTime

  """All values greater than the given value."""
  endAt_gt: DateTime

  """All values greater than or equal the given value."""
  endAt_gte: DateTime
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
}

enum ReleaseStatus {
  OPEN
  DONE
}

type ReleaseSubscriptionPayload {
  mutation: MutationType!
  node: Release
  updatedFields: [String!]
  previousValues: ReleasePreviousValues
}

input ReleaseSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [ReleaseSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [ReleaseSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ReleaseSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: ReleaseWhereInput
}

input ReleaseUpdateInput {
  name: String
  status: ReleaseStatus
  startAt: DateTime
  endAt: DateTime
  project: ProjectUpdateOneRequiredWithoutReleasesInput
  epics: EpicUpdateManyWithoutReleaseInput
  iterations: IterationUpdateManyWithoutReleaseInput
}

input ReleaseUpdateManyDataInput {
  name: String
  status: ReleaseStatus
  startAt: DateTime
  endAt: DateTime
}

input ReleaseUpdateManyMutationInput {
  name: String
  status: ReleaseStatus
  startAt: DateTime
  endAt: DateTime
}

input ReleaseUpdateManyWithoutProjectInput {
  create: [ReleaseCreateWithoutProjectInput!]
  connect: [ReleaseWhereUniqueInput!]
  disconnect: [ReleaseWhereUniqueInput!]
  delete: [ReleaseWhereUniqueInput!]
  update: [ReleaseUpdateWithWhereUniqueWithoutProjectInput!]
  updateMany: [ReleaseUpdateManyWithWhereNestedInput!]
  deleteMany: [ReleaseScalarWhereInput!]
  upsert: [ReleaseUpsertWithWhereUniqueWithoutProjectInput!]
}

input ReleaseUpdateManyWithWhereNestedInput {
  where: ReleaseScalarWhereInput!
  data: ReleaseUpdateManyDataInput!
}

input ReleaseUpdateOneRequiredWithoutIterationsInput {
  create: ReleaseCreateWithoutIterationsInput
  connect: ReleaseWhereUniqueInput
  update: ReleaseUpdateWithoutIterationsDataInput
  upsert: ReleaseUpsertWithoutIterationsInput
}

input ReleaseUpdateOneWithoutEpicsInput {
  create: ReleaseCreateWithoutEpicsInput
  connect: ReleaseWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: ReleaseUpdateWithoutEpicsDataInput
  upsert: ReleaseUpsertWithoutEpicsInput
}

input ReleaseUpdateWithoutEpicsDataInput {
  name: String
  status: ReleaseStatus
  startAt: DateTime
  endAt: DateTime
  project: ProjectUpdateOneRequiredWithoutReleasesInput
  iterations: IterationUpdateManyWithoutReleaseInput
}

input ReleaseUpdateWithoutIterationsDataInput {
  name: String
  status: ReleaseStatus
  startAt: DateTime
  endAt: DateTime
  project: ProjectUpdateOneRequiredWithoutReleasesInput
  epics: EpicUpdateManyWithoutReleaseInput
}

input ReleaseUpdateWithoutProjectDataInput {
  name: String
  status: ReleaseStatus
  startAt: DateTime
  endAt: DateTime
  epics: EpicUpdateManyWithoutReleaseInput
  iterations: IterationUpdateManyWithoutReleaseInput
}

input ReleaseUpdateWithWhereUniqueWithoutProjectInput {
  where: ReleaseWhereUniqueInput!
  data: ReleaseUpdateWithoutProjectDataInput!
}

input ReleaseUpsertWithoutEpicsInput {
  update: ReleaseUpdateWithoutEpicsDataInput!
  create: ReleaseCreateWithoutEpicsInput!
}

input ReleaseUpsertWithoutIterationsInput {
  update: ReleaseUpdateWithoutIterationsDataInput!
  create: ReleaseCreateWithoutIterationsInput!
}

input ReleaseUpsertWithWhereUniqueWithoutProjectInput {
  where: ReleaseWhereUniqueInput!
  update: ReleaseUpdateWithoutProjectDataInput!
  create: ReleaseCreateWithoutProjectInput!
}

input ReleaseWhereInput {
  """Logical AND on all given filters."""
  AND: [ReleaseWhereInput!]

  """Logical OR on all given filters."""
  OR: [ReleaseWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ReleaseWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  status: ReleaseStatus

  """All values that are not equal to given value."""
  status_not: ReleaseStatus

  """All values that are contained in given list."""
  status_in: [ReleaseStatus!]

  """All values that are not contained in given list."""
  status_not_in: [ReleaseStatus!]
  startAt: DateTime

  """All values that are not equal to given value."""
  startAt_not: DateTime

  """All values that are contained in given list."""
  startAt_in: [DateTime!]

  """All values that are not contained in given list."""
  startAt_not_in: [DateTime!]

  """All values less than the given value."""
  startAt_lt: DateTime

  """All values less than or equal the given value."""
  startAt_lte: DateTime

  """All values greater than the given value."""
  startAt_gt: DateTime

  """All values greater than or equal the given value."""
  startAt_gte: DateTime
  endAt: DateTime

  """All values that are not equal to given value."""
  endAt_not: DateTime

  """All values that are contained in given list."""
  endAt_in: [DateTime!]

  """All values that are not contained in given list."""
  endAt_not_in: [DateTime!]

  """All values less than the given value."""
  endAt_lt: DateTime

  """All values less than or equal the given value."""
  endAt_lte: DateTime

  """All values greater than the given value."""
  endAt_gt: DateTime

  """All values greater than or equal the given value."""
  endAt_gte: DateTime
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  project: ProjectWhereInput
  epics_every: EpicWhereInput
  epics_some: EpicWhereInput
  epics_none: EpicWhereInput
  iterations_every: IterationWhereInput
  iterations_some: IterationWhereInput
  iterations_none: IterationWhereInput
}

input ReleaseWhereUniqueInput {
  id: ID
}

type Resource implements Node {
  id: ID!
  name: String!
  description: String
  type: ResourceType!
  price: Float
  createdAt: DateTime!
  updatedAt: DateTime!
  project: Project!
}

"""A connection to a list of items."""
type ResourceConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ResourceEdge]!
  aggregate: AggregateResource!
}

input ResourceCreateInput {
  name: String!
  description: String
  type: ResourceType!
  price: Float
  project: ProjectCreateOneWithoutResourcesInput!
}

input ResourceCreateManyWithoutProjectInput {
  create: [ResourceCreateWithoutProjectInput!]
  connect: [ResourceWhereUniqueInput!]
}

input ResourceCreateWithoutProjectInput {
  name: String!
  description: String
  type: ResourceType!
  price: Float
}

"""An edge in a connection."""
type ResourceEdge {
  """The item at the end of the edge."""
  node: Resource!

  """A cursor for use in pagination."""
  cursor: String!
}

enum ResourceOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  description_ASC
  description_DESC
  type_ASC
  type_DESC
  price_ASC
  price_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type ResourcePreviousValues {
  id: ID!
  name: String!
  description: String
  type: ResourceType!
  price: Float
  createdAt: DateTime!
  updatedAt: DateTime!
}

input ResourceScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [ResourceScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [ResourceScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ResourceScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
  type: ResourceType

  """All values that are not equal to given value."""
  type_not: ResourceType

  """All values that are contained in given list."""
  type_in: [ResourceType!]

  """All values that are not contained in given list."""
  type_not_in: [ResourceType!]
  price: Float

  """All values that are not equal to given value."""
  price_not: Float

  """All values that are contained in given list."""
  price_in: [Float!]

  """All values that are not contained in given list."""
  price_not_in: [Float!]

  """All values less than the given value."""
  price_lt: Float

  """All values less than or equal the given value."""
  price_lte: Float

  """All values greater than the given value."""
  price_gt: Float

  """All values greater than or equal the given value."""
  price_gte: Float
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
}

type ResourceSubscriptionPayload {
  mutation: MutationType!
  node: Resource
  updatedFields: [String!]
  previousValues: ResourcePreviousValues
}

input ResourceSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [ResourceSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [ResourceSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ResourceSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: ResourceWhereInput
}

enum ResourceType {
  EQUIPAMENT
  TOOL
  SERVICE
  COMPONENT
  TRAVEL
  OTHER
}

input ResourceUpdateInput {
  name: String
  description: String
  type: ResourceType
  price: Float
  project: ProjectUpdateOneRequiredWithoutResourcesInput
}

input ResourceUpdateManyDataInput {
  name: String
  description: String
  type: ResourceType
  price: Float
}

input ResourceUpdateManyMutationInput {
  name: String
  description: String
  type: ResourceType
  price: Float
}

input ResourceUpdateManyWithoutProjectInput {
  create: [ResourceCreateWithoutProjectInput!]
  connect: [ResourceWhereUniqueInput!]
  disconnect: [ResourceWhereUniqueInput!]
  delete: [ResourceWhereUniqueInput!]
  update: [ResourceUpdateWithWhereUniqueWithoutProjectInput!]
  updateMany: [ResourceUpdateManyWithWhereNestedInput!]
  deleteMany: [ResourceScalarWhereInput!]
  upsert: [ResourceUpsertWithWhereUniqueWithoutProjectInput!]
}

input ResourceUpdateManyWithWhereNestedInput {
  where: ResourceScalarWhereInput!
  data: ResourceUpdateManyDataInput!
}

input ResourceUpdateWithoutProjectDataInput {
  name: String
  description: String
  type: ResourceType
  price: Float
}

input ResourceUpdateWithWhereUniqueWithoutProjectInput {
  where: ResourceWhereUniqueInput!
  data: ResourceUpdateWithoutProjectDataInput!
}

input ResourceUpsertWithWhereUniqueWithoutProjectInput {
  where: ResourceWhereUniqueInput!
  update: ResourceUpdateWithoutProjectDataInput!
  create: ResourceCreateWithoutProjectInput!
}

input ResourceWhereInput {
  """Logical AND on all given filters."""
  AND: [ResourceWhereInput!]

  """Logical OR on all given filters."""
  OR: [ResourceWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ResourceWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
  type: ResourceType

  """All values that are not equal to given value."""
  type_not: ResourceType

  """All values that are contained in given list."""
  type_in: [ResourceType!]

  """All values that are not contained in given list."""
  type_not_in: [ResourceType!]
  price: Float

  """All values that are not equal to given value."""
  price_not: Float

  """All values that are contained in given list."""
  price_in: [Float!]

  """All values that are not contained in given list."""
  price_not_in: [Float!]

  """All values less than the given value."""
  price_lt: Float

  """All values less than or equal the given value."""
  price_lte: Float

  """All values greater than the given value."""
  price_gt: Float

  """All values greater than or equal the given value."""
  price_gte: Float
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  project: ProjectWhereInput
}

input ResourceWhereUniqueInput {
  id: ID
}

type Risk implements Node {
  id: ID!
  name: String!
  plan: String!
  impact: Int
  priority: Int
  probability: Int
  status: RiskStatus!
  createdAt: DateTime!
  updatedAt: DateTime!
  project: Project!
}

"""A connection to a list of items."""
type RiskConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [RiskEdge]!
  aggregate: AggregateRisk!
}

input RiskCreateInput {
  name: String!
  plan: String!
  impact: Int
  priority: Int
  probability: Int
  status: RiskStatus!
  project: ProjectCreateOneWithoutRisksInput!
}

input RiskCreateManyWithoutProjectInput {
  create: [RiskCreateWithoutProjectInput!]
  connect: [RiskWhereUniqueInput!]
}

input RiskCreateWithoutProjectInput {
  name: String!
  plan: String!
  impact: Int
  priority: Int
  probability: Int
  status: RiskStatus!
}

"""An edge in a connection."""
type RiskEdge {
  """The item at the end of the edge."""
  node: Risk!

  """A cursor for use in pagination."""
  cursor: String!
}

enum RiskOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  plan_ASC
  plan_DESC
  impact_ASC
  impact_DESC
  priority_ASC
  priority_DESC
  probability_ASC
  probability_DESC
  status_ASC
  status_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type RiskPreviousValues {
  id: ID!
  name: String!
  plan: String!
  impact: Int
  priority: Int
  probability: Int
  status: RiskStatus!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input RiskScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [RiskScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [RiskScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [RiskScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  plan: String

  """All values that are not equal to given value."""
  plan_not: String

  """All values that are contained in given list."""
  plan_in: [String!]

  """All values that are not contained in given list."""
  plan_not_in: [String!]

  """All values less than the given value."""
  plan_lt: String

  """All values less than or equal the given value."""
  plan_lte: String

  """All values greater than the given value."""
  plan_gt: String

  """All values greater than or equal the given value."""
  plan_gte: String

  """All values containing the given string."""
  plan_contains: String

  """All values not containing the given string."""
  plan_not_contains: String

  """All values starting with the given string."""
  plan_starts_with: String

  """All values not starting with the given string."""
  plan_not_starts_with: String

  """All values ending with the given string."""
  plan_ends_with: String

  """All values not ending with the given string."""
  plan_not_ends_with: String
  impact: Int

  """All values that are not equal to given value."""
  impact_not: Int

  """All values that are contained in given list."""
  impact_in: [Int!]

  """All values that are not contained in given list."""
  impact_not_in: [Int!]

  """All values less than the given value."""
  impact_lt: Int

  """All values less than or equal the given value."""
  impact_lte: Int

  """All values greater than the given value."""
  impact_gt: Int

  """All values greater than or equal the given value."""
  impact_gte: Int
  priority: Int

  """All values that are not equal to given value."""
  priority_not: Int

  """All values that are contained in given list."""
  priority_in: [Int!]

  """All values that are not contained in given list."""
  priority_not_in: [Int!]

  """All values less than the given value."""
  priority_lt: Int

  """All values less than or equal the given value."""
  priority_lte: Int

  """All values greater than the given value."""
  priority_gt: Int

  """All values greater than or equal the given value."""
  priority_gte: Int
  probability: Int

  """All values that are not equal to given value."""
  probability_not: Int

  """All values that are contained in given list."""
  probability_in: [Int!]

  """All values that are not contained in given list."""
  probability_not_in: [Int!]

  """All values less than the given value."""
  probability_lt: Int

  """All values less than or equal the given value."""
  probability_lte: Int

  """All values greater than the given value."""
  probability_gt: Int

  """All values greater than or equal the given value."""
  probability_gte: Int
  status: RiskStatus

  """All values that are not equal to given value."""
  status_not: RiskStatus

  """All values that are contained in given list."""
  status_in: [RiskStatus!]

  """All values that are not contained in given list."""
  status_not_in: [RiskStatus!]
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
}

enum RiskStatus {
  OPEN
  PENDING
  DONE
}

type RiskSubscriptionPayload {
  mutation: MutationType!
  node: Risk
  updatedFields: [String!]
  previousValues: RiskPreviousValues
}

input RiskSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [RiskSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [RiskSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [RiskSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: RiskWhereInput
}

input RiskUpdateInput {
  name: String
  plan: String
  impact: Int
  priority: Int
  probability: Int
  status: RiskStatus
  project: ProjectUpdateOneRequiredWithoutRisksInput
}

input RiskUpdateManyDataInput {
  name: String
  plan: String
  impact: Int
  priority: Int
  probability: Int
  status: RiskStatus
}

input RiskUpdateManyMutationInput {
  name: String
  plan: String
  impact: Int
  priority: Int
  probability: Int
  status: RiskStatus
}

input RiskUpdateManyWithoutProjectInput {
  create: [RiskCreateWithoutProjectInput!]
  connect: [RiskWhereUniqueInput!]
  disconnect: [RiskWhereUniqueInput!]
  delete: [RiskWhereUniqueInput!]
  update: [RiskUpdateWithWhereUniqueWithoutProjectInput!]
  updateMany: [RiskUpdateManyWithWhereNestedInput!]
  deleteMany: [RiskScalarWhereInput!]
  upsert: [RiskUpsertWithWhereUniqueWithoutProjectInput!]
}

input RiskUpdateManyWithWhereNestedInput {
  where: RiskScalarWhereInput!
  data: RiskUpdateManyDataInput!
}

input RiskUpdateWithoutProjectDataInput {
  name: String
  plan: String
  impact: Int
  priority: Int
  probability: Int
  status: RiskStatus
}

input RiskUpdateWithWhereUniqueWithoutProjectInput {
  where: RiskWhereUniqueInput!
  data: RiskUpdateWithoutProjectDataInput!
}

input RiskUpsertWithWhereUniqueWithoutProjectInput {
  where: RiskWhereUniqueInput!
  update: RiskUpdateWithoutProjectDataInput!
  create: RiskCreateWithoutProjectInput!
}

input RiskWhereInput {
  """Logical AND on all given filters."""
  AND: [RiskWhereInput!]

  """Logical OR on all given filters."""
  OR: [RiskWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [RiskWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  plan: String

  """All values that are not equal to given value."""
  plan_not: String

  """All values that are contained in given list."""
  plan_in: [String!]

  """All values that are not contained in given list."""
  plan_not_in: [String!]

  """All values less than the given value."""
  plan_lt: String

  """All values less than or equal the given value."""
  plan_lte: String

  """All values greater than the given value."""
  plan_gt: String

  """All values greater than or equal the given value."""
  plan_gte: String

  """All values containing the given string."""
  plan_contains: String

  """All values not containing the given string."""
  plan_not_contains: String

  """All values starting with the given string."""
  plan_starts_with: String

  """All values not starting with the given string."""
  plan_not_starts_with: String

  """All values ending with the given string."""
  plan_ends_with: String

  """All values not ending with the given string."""
  plan_not_ends_with: String
  impact: Int

  """All values that are not equal to given value."""
  impact_not: Int

  """All values that are contained in given list."""
  impact_in: [Int!]

  """All values that are not contained in given list."""
  impact_not_in: [Int!]

  """All values less than the given value."""
  impact_lt: Int

  """All values less than or equal the given value."""
  impact_lte: Int

  """All values greater than the given value."""
  impact_gt: Int

  """All values greater than or equal the given value."""
  impact_gte: Int
  priority: Int

  """All values that are not equal to given value."""
  priority_not: Int

  """All values that are contained in given list."""
  priority_in: [Int!]

  """All values that are not contained in given list."""
  priority_not_in: [Int!]

  """All values less than the given value."""
  priority_lt: Int

  """All values less than or equal the given value."""
  priority_lte: Int

  """All values greater than the given value."""
  priority_gt: Int

  """All values greater than or equal the given value."""
  priority_gte: Int
  probability: Int

  """All values that are not equal to given value."""
  probability_not: Int

  """All values that are contained in given list."""
  probability_in: [Int!]

  """All values that are not contained in given list."""
  probability_not_in: [Int!]

  """All values less than the given value."""
  probability_lt: Int

  """All values less than or equal the given value."""
  probability_lte: Int

  """All values greater than the given value."""
  probability_gt: Int

  """All values greater than or equal the given value."""
  probability_gte: Int
  status: RiskStatus

  """All values that are not equal to given value."""
  status_not: RiskStatus

  """All values that are contained in given list."""
  status_in: [RiskStatus!]

  """All values that are not contained in given list."""
  status_not_in: [RiskStatus!]
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  project: ProjectWhereInput
}

input RiskWhereUniqueInput {
  id: ID
}

type Role implements Node {
  id: ID!
  name: String!
  description: String
  department: String
  createdAt: DateTime!
  updatedAt: DateTime!
  roleLevels(where: RoleLevelWhereInput, orderBy: RoleLevelOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [RoleLevel!]
  projectRoles(where: ProjectRoleWhereInput, orderBy: ProjectRoleOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ProjectRole!]
}

"""A connection to a list of items."""
type RoleConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [RoleEdge]!
  aggregate: AggregateRole!
}

input RoleCreateInput {
  name: String!
  description: String
  department: String
  roleLevels: RoleLevelCreateManyWithoutRoleInput
  projectRoles: ProjectRoleCreateManyWithoutRoleInput
}

input RoleCreateOneWithoutProjectRolesInput {
  create: RoleCreateWithoutProjectRolesInput
  connect: RoleWhereUniqueInput
}

input RoleCreateOneWithoutRoleLevelsInput {
  create: RoleCreateWithoutRoleLevelsInput
  connect: RoleWhereUniqueInput
}

input RoleCreateWithoutProjectRolesInput {
  name: String!
  description: String
  department: String
  roleLevels: RoleLevelCreateManyWithoutRoleInput
}

input RoleCreateWithoutRoleLevelsInput {
  name: String!
  description: String
  department: String
  projectRoles: ProjectRoleCreateManyWithoutRoleInput
}

"""An edge in a connection."""
type RoleEdge {
  """The item at the end of the edge."""
  node: Role!

  """A cursor for use in pagination."""
  cursor: String!
}

type RoleLevel implements Node {
  id: ID!
  level: RoleLevelType!
  experience: String
  priceMin: Float!
  priceMax: Float!
  createdAt: DateTime!
  updatedAt: DateTime!
  role: Role!
}

"""A connection to a list of items."""
type RoleLevelConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [RoleLevelEdge]!
  aggregate: AggregateRoleLevel!
}

input RoleLevelCreateInput {
  level: RoleLevelType!
  experience: String
  priceMin: Float
  priceMax: Float
  role: RoleCreateOneWithoutRoleLevelsInput!
}

input RoleLevelCreateManyWithoutRoleInput {
  create: [RoleLevelCreateWithoutRoleInput!]
  connect: [RoleLevelWhereUniqueInput!]
}

input RoleLevelCreateWithoutRoleInput {
  level: RoleLevelType!
  experience: String
  priceMin: Float
  priceMax: Float
}

"""An edge in a connection."""
type RoleLevelEdge {
  """The item at the end of the edge."""
  node: RoleLevel!

  """A cursor for use in pagination."""
  cursor: String!
}

enum RoleLevelOrderByInput {
  id_ASC
  id_DESC
  level_ASC
  level_DESC
  experience_ASC
  experience_DESC
  priceMin_ASC
  priceMin_DESC
  priceMax_ASC
  priceMax_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type RoleLevelPreviousValues {
  id: ID!
  level: RoleLevelType!
  experience: String
  priceMin: Float!
  priceMax: Float!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input RoleLevelScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [RoleLevelScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [RoleLevelScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [RoleLevelScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  level: RoleLevelType

  """All values that are not equal to given value."""
  level_not: RoleLevelType

  """All values that are contained in given list."""
  level_in: [RoleLevelType!]

  """All values that are not contained in given list."""
  level_not_in: [RoleLevelType!]
  experience: String

  """All values that are not equal to given value."""
  experience_not: String

  """All values that are contained in given list."""
  experience_in: [String!]

  """All values that are not contained in given list."""
  experience_not_in: [String!]

  """All values less than the given value."""
  experience_lt: String

  """All values less than or equal the given value."""
  experience_lte: String

  """All values greater than the given value."""
  experience_gt: String

  """All values greater than or equal the given value."""
  experience_gte: String

  """All values containing the given string."""
  experience_contains: String

  """All values not containing the given string."""
  experience_not_contains: String

  """All values starting with the given string."""
  experience_starts_with: String

  """All values not starting with the given string."""
  experience_not_starts_with: String

  """All values ending with the given string."""
  experience_ends_with: String

  """All values not ending with the given string."""
  experience_not_ends_with: String
  priceMin: Float

  """All values that are not equal to given value."""
  priceMin_not: Float

  """All values that are contained in given list."""
  priceMin_in: [Float!]

  """All values that are not contained in given list."""
  priceMin_not_in: [Float!]

  """All values less than the given value."""
  priceMin_lt: Float

  """All values less than or equal the given value."""
  priceMin_lte: Float

  """All values greater than the given value."""
  priceMin_gt: Float

  """All values greater than or equal the given value."""
  priceMin_gte: Float
  priceMax: Float

  """All values that are not equal to given value."""
  priceMax_not: Float

  """All values that are contained in given list."""
  priceMax_in: [Float!]

  """All values that are not contained in given list."""
  priceMax_not_in: [Float!]

  """All values less than the given value."""
  priceMax_lt: Float

  """All values less than or equal the given value."""
  priceMax_lte: Float

  """All values greater than the given value."""
  priceMax_gt: Float

  """All values greater than or equal the given value."""
  priceMax_gte: Float
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
}

type RoleLevelSubscriptionPayload {
  mutation: MutationType!
  node: RoleLevel
  updatedFields: [String!]
  previousValues: RoleLevelPreviousValues
}

input RoleLevelSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [RoleLevelSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [RoleLevelSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [RoleLevelSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: RoleLevelWhereInput
}

enum RoleLevelType {
  TRAINEE
  JUNIOR
  INTERMEDIATE
  SENIOR
  EXPERT
}

input RoleLevelUpdateInput {
  level: RoleLevelType
  experience: String
  priceMin: Float
  priceMax: Float
  role: RoleUpdateOneRequiredWithoutRoleLevelsInput
}

input RoleLevelUpdateManyDataInput {
  level: RoleLevelType
  experience: String
  priceMin: Float
  priceMax: Float
}

input RoleLevelUpdateManyMutationInput {
  level: RoleLevelType
  experience: String
  priceMin: Float
  priceMax: Float
}

input RoleLevelUpdateManyWithoutRoleInput {
  create: [RoleLevelCreateWithoutRoleInput!]
  connect: [RoleLevelWhereUniqueInput!]
  disconnect: [RoleLevelWhereUniqueInput!]
  delete: [RoleLevelWhereUniqueInput!]
  update: [RoleLevelUpdateWithWhereUniqueWithoutRoleInput!]
  updateMany: [RoleLevelUpdateManyWithWhereNestedInput!]
  deleteMany: [RoleLevelScalarWhereInput!]
  upsert: [RoleLevelUpsertWithWhereUniqueWithoutRoleInput!]
}

input RoleLevelUpdateManyWithWhereNestedInput {
  where: RoleLevelScalarWhereInput!
  data: RoleLevelUpdateManyDataInput!
}

input RoleLevelUpdateWithoutRoleDataInput {
  level: RoleLevelType
  experience: String
  priceMin: Float
  priceMax: Float
}

input RoleLevelUpdateWithWhereUniqueWithoutRoleInput {
  where: RoleLevelWhereUniqueInput!
  data: RoleLevelUpdateWithoutRoleDataInput!
}

input RoleLevelUpsertWithWhereUniqueWithoutRoleInput {
  where: RoleLevelWhereUniqueInput!
  update: RoleLevelUpdateWithoutRoleDataInput!
  create: RoleLevelCreateWithoutRoleInput!
}

input RoleLevelWhereInput {
  """Logical AND on all given filters."""
  AND: [RoleLevelWhereInput!]

  """Logical OR on all given filters."""
  OR: [RoleLevelWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [RoleLevelWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  level: RoleLevelType

  """All values that are not equal to given value."""
  level_not: RoleLevelType

  """All values that are contained in given list."""
  level_in: [RoleLevelType!]

  """All values that are not contained in given list."""
  level_not_in: [RoleLevelType!]
  experience: String

  """All values that are not equal to given value."""
  experience_not: String

  """All values that are contained in given list."""
  experience_in: [String!]

  """All values that are not contained in given list."""
  experience_not_in: [String!]

  """All values less than the given value."""
  experience_lt: String

  """All values less than or equal the given value."""
  experience_lte: String

  """All values greater than the given value."""
  experience_gt: String

  """All values greater than or equal the given value."""
  experience_gte: String

  """All values containing the given string."""
  experience_contains: String

  """All values not containing the given string."""
  experience_not_contains: String

  """All values starting with the given string."""
  experience_starts_with: String

  """All values not starting with the given string."""
  experience_not_starts_with: String

  """All values ending with the given string."""
  experience_ends_with: String

  """All values not ending with the given string."""
  experience_not_ends_with: String
  priceMin: Float

  """All values that are not equal to given value."""
  priceMin_not: Float

  """All values that are contained in given list."""
  priceMin_in: [Float!]

  """All values that are not contained in given list."""
  priceMin_not_in: [Float!]

  """All values less than the given value."""
  priceMin_lt: Float

  """All values less than or equal the given value."""
  priceMin_lte: Float

  """All values greater than the given value."""
  priceMin_gt: Float

  """All values greater than or equal the given value."""
  priceMin_gte: Float
  priceMax: Float

  """All values that are not equal to given value."""
  priceMax_not: Float

  """All values that are contained in given list."""
  priceMax_in: [Float!]

  """All values that are not contained in given list."""
  priceMax_not_in: [Float!]

  """All values less than the given value."""
  priceMax_lt: Float

  """All values less than or equal the given value."""
  priceMax_lte: Float

  """All values greater than the given value."""
  priceMax_gt: Float

  """All values greater than or equal the given value."""
  priceMax_gte: Float
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  role: RoleWhereInput
}

input RoleLevelWhereUniqueInput {
  id: ID
}

enum RoleOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  description_ASC
  description_DESC
  department_ASC
  department_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type RolePreviousValues {
  id: ID!
  name: String!
  description: String
  department: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

type RoleSubscriptionPayload {
  mutation: MutationType!
  node: Role
  updatedFields: [String!]
  previousValues: RolePreviousValues
}

input RoleSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [RoleSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [RoleSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [RoleSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: RoleWhereInput
}

input RoleUpdateInput {
  name: String
  description: String
  department: String
  roleLevels: RoleLevelUpdateManyWithoutRoleInput
  projectRoles: ProjectRoleUpdateManyWithoutRoleInput
}

input RoleUpdateManyMutationInput {
  name: String
  description: String
  department: String
}

input RoleUpdateOneRequiredWithoutProjectRolesInput {
  create: RoleCreateWithoutProjectRolesInput
  connect: RoleWhereUniqueInput
  update: RoleUpdateWithoutProjectRolesDataInput
  upsert: RoleUpsertWithoutProjectRolesInput
}

input RoleUpdateOneRequiredWithoutRoleLevelsInput {
  create: RoleCreateWithoutRoleLevelsInput
  connect: RoleWhereUniqueInput
  update: RoleUpdateWithoutRoleLevelsDataInput
  upsert: RoleUpsertWithoutRoleLevelsInput
}

input RoleUpdateWithoutProjectRolesDataInput {
  name: String
  description: String
  department: String
  roleLevels: RoleLevelUpdateManyWithoutRoleInput
}

input RoleUpdateWithoutRoleLevelsDataInput {
  name: String
  description: String
  department: String
  projectRoles: ProjectRoleUpdateManyWithoutRoleInput
}

input RoleUpsertWithoutProjectRolesInput {
  update: RoleUpdateWithoutProjectRolesDataInput!
  create: RoleCreateWithoutProjectRolesInput!
}

input RoleUpsertWithoutRoleLevelsInput {
  update: RoleUpdateWithoutRoleLevelsDataInput!
  create: RoleCreateWithoutRoleLevelsInput!
}

input RoleWhereInput {
  """Logical AND on all given filters."""
  AND: [RoleWhereInput!]

  """Logical OR on all given filters."""
  OR: [RoleWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [RoleWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
  department: String

  """All values that are not equal to given value."""
  department_not: String

  """All values that are contained in given list."""
  department_in: [String!]

  """All values that are not contained in given list."""
  department_not_in: [String!]

  """All values less than the given value."""
  department_lt: String

  """All values less than or equal the given value."""
  department_lte: String

  """All values greater than the given value."""
  department_gt: String

  """All values greater than or equal the given value."""
  department_gte: String

  """All values containing the given string."""
  department_contains: String

  """All values not containing the given string."""
  department_not_contains: String

  """All values starting with the given string."""
  department_starts_with: String

  """All values not starting with the given string."""
  department_not_starts_with: String

  """All values ending with the given string."""
  department_ends_with: String

  """All values not ending with the given string."""
  department_not_ends_with: String
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  roleLevels_every: RoleLevelWhereInput
  roleLevels_some: RoleLevelWhereInput
  roleLevels_none: RoleLevelWhereInput
  projectRoles_every: ProjectRoleWhereInput
  projectRoles_some: ProjectRoleWhereInput
  projectRoles_none: ProjectRoleWhereInput
}

input RoleWhereUniqueInput {
  id: ID
}

type Subscription {
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
  contributor(where: ContributorSubscriptionWhereInput): ContributorSubscriptionPayload
  contributorExperience(where: ContributorExperienceSubscriptionWhereInput): ContributorExperienceSubscriptionPayload
  contributorFormation(where: ContributorFormationSubscriptionWhereInput): ContributorFormationSubscriptionPayload
  project(where: ProjectSubscriptionWhereInput): ProjectSubscriptionPayload
  resource(where: ResourceSubscriptionWhereInput): ResourceSubscriptionPayload
  projectRole(where: ProjectRoleSubscriptionWhereInput): ProjectRoleSubscriptionPayload
  projectRoleContributor(where: ProjectRoleContributorSubscriptionWhereInput): ProjectRoleContributorSubscriptionPayload
  role(where: RoleSubscriptionWhereInput): RoleSubscriptionPayload
  roleLevel(where: RoleLevelSubscriptionWhereInput): RoleLevelSubscriptionPayload
  milestone(where: MilestoneSubscriptionWhereInput): MilestoneSubscriptionPayload
  epic(where: EpicSubscriptionWhereInput): EpicSubscriptionPayload
  userStory(where: UserStorySubscriptionWhereInput): UserStorySubscriptionPayload
  release(where: ReleaseSubscriptionWhereInput): ReleaseSubscriptionPayload
  iteration(where: IterationSubscriptionWhereInput): IterationSubscriptionPayload
  risk(where: RiskSubscriptionWhereInput): RiskSubscriptionPayload
}

type User implements Node {
  id: ID!
  name: String!
  email: String!
  password: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""A connection to a list of items."""
type UserConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  name: String!
  email: String!
  password: String!
}

"""An edge in a connection."""
type UserEdge {
  """The item at the end of the edge."""
  node: User!

  """A cursor for use in pagination."""
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  email_ASC
  email_DESC
  password_ASC
  password_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type UserPreviousValues {
  id: ID!
  name: String!
  email: String!
  password: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type UserStory implements Node {
  id: ID!
  name: String!
  description: String
  priority: Int
  status: String
  effort: Int
  estimateEffort: Int
  estimateStart: DateTime
  estimateEnd: DateTime
  twTaskId: String
  createdAt: DateTime!
  updatedAt: DateTime!
  epic: Epic!
  iteration: Iteration
}

"""A connection to a list of items."""
type UserStoryConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [UserStoryEdge]!
  aggregate: AggregateUserStory!
}

input UserStoryCreateInput {
  name: String!
  description: String
  priority: Int
  status: String
  effort: Int
  estimateEffort: Int
  estimateStart: DateTime
  estimateEnd: DateTime
  twTaskId: String
  epic: EpicCreateOneWithoutUserStoriesInput!
  iteration: IterationCreateOneWithoutUserStoriesInput
}

input UserStoryCreateManyWithoutEpicInput {
  create: [UserStoryCreateWithoutEpicInput!]
  connect: [UserStoryWhereUniqueInput!]
}

input UserStoryCreateManyWithoutIterationInput {
  create: [UserStoryCreateWithoutIterationInput!]
  connect: [UserStoryWhereUniqueInput!]
}

input UserStoryCreateWithoutEpicInput {
  name: String!
  description: String
  priority: Int
  status: String
  effort: Int
  estimateEffort: Int
  estimateStart: DateTime
  estimateEnd: DateTime
  twTaskId: String
  iteration: IterationCreateOneWithoutUserStoriesInput
}

input UserStoryCreateWithoutIterationInput {
  name: String!
  description: String
  priority: Int
  status: String
  effort: Int
  estimateEffort: Int
  estimateStart: DateTime
  estimateEnd: DateTime
  twTaskId: String
  epic: EpicCreateOneWithoutUserStoriesInput!
}

"""An edge in a connection."""
type UserStoryEdge {
  """The item at the end of the edge."""
  node: UserStory!

  """A cursor for use in pagination."""
  cursor: String!
}

enum UserStoryOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  description_ASC
  description_DESC
  priority_ASC
  priority_DESC
  status_ASC
  status_DESC
  effort_ASC
  effort_DESC
  estimateEffort_ASC
  estimateEffort_DESC
  estimateStart_ASC
  estimateStart_DESC
  estimateEnd_ASC
  estimateEnd_DESC
  twTaskId_ASC
  twTaskId_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type UserStoryPreviousValues {
  id: ID!
  name: String!
  description: String
  priority: Int
  status: String
  effort: Int
  estimateEffort: Int
  estimateStart: DateTime
  estimateEnd: DateTime
  twTaskId: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

input UserStoryScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [UserStoryScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserStoryScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserStoryScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
  priority: Int

  """All values that are not equal to given value."""
  priority_not: Int

  """All values that are contained in given list."""
  priority_in: [Int!]

  """All values that are not contained in given list."""
  priority_not_in: [Int!]

  """All values less than the given value."""
  priority_lt: Int

  """All values less than or equal the given value."""
  priority_lte: Int

  """All values greater than the given value."""
  priority_gt: Int

  """All values greater than or equal the given value."""
  priority_gte: Int
  status: String

  """All values that are not equal to given value."""
  status_not: String

  """All values that are contained in given list."""
  status_in: [String!]

  """All values that are not contained in given list."""
  status_not_in: [String!]

  """All values less than the given value."""
  status_lt: String

  """All values less than or equal the given value."""
  status_lte: String

  """All values greater than the given value."""
  status_gt: String

  """All values greater than or equal the given value."""
  status_gte: String

  """All values containing the given string."""
  status_contains: String

  """All values not containing the given string."""
  status_not_contains: String

  """All values starting with the given string."""
  status_starts_with: String

  """All values not starting with the given string."""
  status_not_starts_with: String

  """All values ending with the given string."""
  status_ends_with: String

  """All values not ending with the given string."""
  status_not_ends_with: String
  effort: Int

  """All values that are not equal to given value."""
  effort_not: Int

  """All values that are contained in given list."""
  effort_in: [Int!]

  """All values that are not contained in given list."""
  effort_not_in: [Int!]

  """All values less than the given value."""
  effort_lt: Int

  """All values less than or equal the given value."""
  effort_lte: Int

  """All values greater than the given value."""
  effort_gt: Int

  """All values greater than or equal the given value."""
  effort_gte: Int
  estimateEffort: Int

  """All values that are not equal to given value."""
  estimateEffort_not: Int

  """All values that are contained in given list."""
  estimateEffort_in: [Int!]

  """All values that are not contained in given list."""
  estimateEffort_not_in: [Int!]

  """All values less than the given value."""
  estimateEffort_lt: Int

  """All values less than or equal the given value."""
  estimateEffort_lte: Int

  """All values greater than the given value."""
  estimateEffort_gt: Int

  """All values greater than or equal the given value."""
  estimateEffort_gte: Int
  estimateStart: DateTime

  """All values that are not equal to given value."""
  estimateStart_not: DateTime

  """All values that are contained in given list."""
  estimateStart_in: [DateTime!]

  """All values that are not contained in given list."""
  estimateStart_not_in: [DateTime!]

  """All values less than the given value."""
  estimateStart_lt: DateTime

  """All values less than or equal the given value."""
  estimateStart_lte: DateTime

  """All values greater than the given value."""
  estimateStart_gt: DateTime

  """All values greater than or equal the given value."""
  estimateStart_gte: DateTime
  estimateEnd: DateTime

  """All values that are not equal to given value."""
  estimateEnd_not: DateTime

  """All values that are contained in given list."""
  estimateEnd_in: [DateTime!]

  """All values that are not contained in given list."""
  estimateEnd_not_in: [DateTime!]

  """All values less than the given value."""
  estimateEnd_lt: DateTime

  """All values less than or equal the given value."""
  estimateEnd_lte: DateTime

  """All values greater than the given value."""
  estimateEnd_gt: DateTime

  """All values greater than or equal the given value."""
  estimateEnd_gte: DateTime
  twTaskId: String

  """All values that are not equal to given value."""
  twTaskId_not: String

  """All values that are contained in given list."""
  twTaskId_in: [String!]

  """All values that are not contained in given list."""
  twTaskId_not_in: [String!]

  """All values less than the given value."""
  twTaskId_lt: String

  """All values less than or equal the given value."""
  twTaskId_lte: String

  """All values greater than the given value."""
  twTaskId_gt: String

  """All values greater than or equal the given value."""
  twTaskId_gte: String

  """All values containing the given string."""
  twTaskId_contains: String

  """All values not containing the given string."""
  twTaskId_not_contains: String

  """All values starting with the given string."""
  twTaskId_starts_with: String

  """All values not starting with the given string."""
  twTaskId_not_starts_with: String

  """All values ending with the given string."""
  twTaskId_ends_with: String

  """All values not ending with the given string."""
  twTaskId_not_ends_with: String
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
}

type UserStorySubscriptionPayload {
  mutation: MutationType!
  node: UserStory
  updatedFields: [String!]
  previousValues: UserStoryPreviousValues
}

input UserStorySubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [UserStorySubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserStorySubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserStorySubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: UserStoryWhereInput
}

input UserStoryUpdateInput {
  name: String
  description: String
  priority: Int
  status: String
  effort: Int
  estimateEffort: Int
  estimateStart: DateTime
  estimateEnd: DateTime
  twTaskId: String
  epic: EpicUpdateOneRequiredWithoutUserStoriesInput
  iteration: IterationUpdateOneWithoutUserStoriesInput
}

input UserStoryUpdateManyDataInput {
  name: String
  description: String
  priority: Int
  status: String
  effort: Int
  estimateEffort: Int
  estimateStart: DateTime
  estimateEnd: DateTime
  twTaskId: String
}

input UserStoryUpdateManyMutationInput {
  name: String
  description: String
  priority: Int
  status: String
  effort: Int
  estimateEffort: Int
  estimateStart: DateTime
  estimateEnd: DateTime
  twTaskId: String
}

input UserStoryUpdateManyWithoutEpicInput {
  create: [UserStoryCreateWithoutEpicInput!]
  connect: [UserStoryWhereUniqueInput!]
  disconnect: [UserStoryWhereUniqueInput!]
  delete: [UserStoryWhereUniqueInput!]
  update: [UserStoryUpdateWithWhereUniqueWithoutEpicInput!]
  updateMany: [UserStoryUpdateManyWithWhereNestedInput!]
  deleteMany: [UserStoryScalarWhereInput!]
  upsert: [UserStoryUpsertWithWhereUniqueWithoutEpicInput!]
}

input UserStoryUpdateManyWithoutIterationInput {
  create: [UserStoryCreateWithoutIterationInput!]
  connect: [UserStoryWhereUniqueInput!]
  disconnect: [UserStoryWhereUniqueInput!]
  delete: [UserStoryWhereUniqueInput!]
  update: [UserStoryUpdateWithWhereUniqueWithoutIterationInput!]
  updateMany: [UserStoryUpdateManyWithWhereNestedInput!]
  deleteMany: [UserStoryScalarWhereInput!]
  upsert: [UserStoryUpsertWithWhereUniqueWithoutIterationInput!]
}

input UserStoryUpdateManyWithWhereNestedInput {
  where: UserStoryScalarWhereInput!
  data: UserStoryUpdateManyDataInput!
}

input UserStoryUpdateWithoutEpicDataInput {
  name: String
  description: String
  priority: Int
  status: String
  effort: Int
  estimateEffort: Int
  estimateStart: DateTime
  estimateEnd: DateTime
  twTaskId: String
  iteration: IterationUpdateOneWithoutUserStoriesInput
}

input UserStoryUpdateWithoutIterationDataInput {
  name: String
  description: String
  priority: Int
  status: String
  effort: Int
  estimateEffort: Int
  estimateStart: DateTime
  estimateEnd: DateTime
  twTaskId: String
  epic: EpicUpdateOneRequiredWithoutUserStoriesInput
}

input UserStoryUpdateWithWhereUniqueWithoutEpicInput {
  where: UserStoryWhereUniqueInput!
  data: UserStoryUpdateWithoutEpicDataInput!
}

input UserStoryUpdateWithWhereUniqueWithoutIterationInput {
  where: UserStoryWhereUniqueInput!
  data: UserStoryUpdateWithoutIterationDataInput!
}

input UserStoryUpsertWithWhereUniqueWithoutEpicInput {
  where: UserStoryWhereUniqueInput!
  update: UserStoryUpdateWithoutEpicDataInput!
  create: UserStoryCreateWithoutEpicInput!
}

input UserStoryUpsertWithWhereUniqueWithoutIterationInput {
  where: UserStoryWhereUniqueInput!
  update: UserStoryUpdateWithoutIterationDataInput!
  create: UserStoryCreateWithoutIterationInput!
}

input UserStoryWhereInput {
  """Logical AND on all given filters."""
  AND: [UserStoryWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserStoryWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserStoryWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
  priority: Int

  """All values that are not equal to given value."""
  priority_not: Int

  """All values that are contained in given list."""
  priority_in: [Int!]

  """All values that are not contained in given list."""
  priority_not_in: [Int!]

  """All values less than the given value."""
  priority_lt: Int

  """All values less than or equal the given value."""
  priority_lte: Int

  """All values greater than the given value."""
  priority_gt: Int

  """All values greater than or equal the given value."""
  priority_gte: Int
  status: String

  """All values that are not equal to given value."""
  status_not: String

  """All values that are contained in given list."""
  status_in: [String!]

  """All values that are not contained in given list."""
  status_not_in: [String!]

  """All values less than the given value."""
  status_lt: String

  """All values less than or equal the given value."""
  status_lte: String

  """All values greater than the given value."""
  status_gt: String

  """All values greater than or equal the given value."""
  status_gte: String

  """All values containing the given string."""
  status_contains: String

  """All values not containing the given string."""
  status_not_contains: String

  """All values starting with the given string."""
  status_starts_with: String

  """All values not starting with the given string."""
  status_not_starts_with: String

  """All values ending with the given string."""
  status_ends_with: String

  """All values not ending with the given string."""
  status_not_ends_with: String
  effort: Int

  """All values that are not equal to given value."""
  effort_not: Int

  """All values that are contained in given list."""
  effort_in: [Int!]

  """All values that are not contained in given list."""
  effort_not_in: [Int!]

  """All values less than the given value."""
  effort_lt: Int

  """All values less than or equal the given value."""
  effort_lte: Int

  """All values greater than the given value."""
  effort_gt: Int

  """All values greater than or equal the given value."""
  effort_gte: Int
  estimateEffort: Int

  """All values that are not equal to given value."""
  estimateEffort_not: Int

  """All values that are contained in given list."""
  estimateEffort_in: [Int!]

  """All values that are not contained in given list."""
  estimateEffort_not_in: [Int!]

  """All values less than the given value."""
  estimateEffort_lt: Int

  """All values less than or equal the given value."""
  estimateEffort_lte: Int

  """All values greater than the given value."""
  estimateEffort_gt: Int

  """All values greater than or equal the given value."""
  estimateEffort_gte: Int
  estimateStart: DateTime

  """All values that are not equal to given value."""
  estimateStart_not: DateTime

  """All values that are contained in given list."""
  estimateStart_in: [DateTime!]

  """All values that are not contained in given list."""
  estimateStart_not_in: [DateTime!]

  """All values less than the given value."""
  estimateStart_lt: DateTime

  """All values less than or equal the given value."""
  estimateStart_lte: DateTime

  """All values greater than the given value."""
  estimateStart_gt: DateTime

  """All values greater than or equal the given value."""
  estimateStart_gte: DateTime
  estimateEnd: DateTime

  """All values that are not equal to given value."""
  estimateEnd_not: DateTime

  """All values that are contained in given list."""
  estimateEnd_in: [DateTime!]

  """All values that are not contained in given list."""
  estimateEnd_not_in: [DateTime!]

  """All values less than the given value."""
  estimateEnd_lt: DateTime

  """All values less than or equal the given value."""
  estimateEnd_lte: DateTime

  """All values greater than the given value."""
  estimateEnd_gt: DateTime

  """All values greater than or equal the given value."""
  estimateEnd_gte: DateTime
  twTaskId: String

  """All values that are not equal to given value."""
  twTaskId_not: String

  """All values that are contained in given list."""
  twTaskId_in: [String!]

  """All values that are not contained in given list."""
  twTaskId_not_in: [String!]

  """All values less than the given value."""
  twTaskId_lt: String

  """All values less than or equal the given value."""
  twTaskId_lte: String

  """All values greater than the given value."""
  twTaskId_gt: String

  """All values greater than or equal the given value."""
  twTaskId_gte: String

  """All values containing the given string."""
  twTaskId_contains: String

  """All values not containing the given string."""
  twTaskId_not_contains: String

  """All values starting with the given string."""
  twTaskId_starts_with: String

  """All values not starting with the given string."""
  twTaskId_not_starts_with: String

  """All values ending with the given string."""
  twTaskId_ends_with: String

  """All values not ending with the given string."""
  twTaskId_not_ends_with: String
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  epic: EpicWhereInput
  iteration: IterationWhereInput
}

input UserStoryWhereUniqueInput {
  id: ID
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [UserSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: UserWhereInput
}

input UserUpdateInput {
  name: String
  email: String
  password: String
}

input UserUpdateManyMutationInput {
  name: String
  email: String
  password: String
}

input UserWhereInput {
  """Logical AND on all given filters."""
  AND: [UserWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  email: String

  """All values that are not equal to given value."""
  email_not: String

  """All values that are contained in given list."""
  email_in: [String!]

  """All values that are not contained in given list."""
  email_not_in: [String!]

  """All values less than the given value."""
  email_lt: String

  """All values less than or equal the given value."""
  email_lte: String

  """All values greater than the given value."""
  email_gt: String

  """All values greater than or equal the given value."""
  email_gte: String

  """All values containing the given string."""
  email_contains: String

  """All values not containing the given string."""
  email_not_contains: String

  """All values starting with the given string."""
  email_starts_with: String

  """All values not starting with the given string."""
  email_not_starts_with: String

  """All values ending with the given string."""
  email_ends_with: String

  """All values not ending with the given string."""
  email_not_ends_with: String
  password: String

  """All values that are not equal to given value."""
  password_not: String

  """All values that are contained in given list."""
  password_in: [String!]

  """All values that are not contained in given list."""
  password_not_in: [String!]

  """All values less than the given value."""
  password_lt: String

  """All values less than or equal the given value."""
  password_lte: String

  """All values greater than the given value."""
  password_gt: String

  """All values greater than or equal the given value."""
  password_gte: String

  """All values containing the given string."""
  password_contains: String

  """All values not containing the given string."""
  password_not_contains: String

  """All values starting with the given string."""
  password_starts_with: String

  """All values not starting with the given string."""
  password_not_starts_with: String

  """All values ending with the given string."""
  password_ends_with: String

  """All values not ending with the given string."""
  password_not_ends_with: String
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
}

input UserWhereUniqueInput {
  id: ID
  email: String
}
