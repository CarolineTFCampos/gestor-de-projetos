# source: https://us1.prisma.sh/carolineedecampos-881f88/gestor-de-projetos/dev
# timestamp: Mon Oct 22 2018 16:59:09 GMT-0300 (-03)

type AggregateContributor {
  count: Int!
}

type AggregateContributorExperience {
  count: Int!
}

type AggregateContributorFormation {
  count: Int!
}

type AggregateEpic {
  count: Int!
}

type AggregateFeature {
  count: Int!
}

type AggregateLifecycle {
  count: Int!
}

type AggregateProject {
  count: Int!
}

type AggregateProjectRoles {
  count: Int!
}

type AggregateRole {
  count: Int!
}

type AggregateRoleLevel {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type BatchPayload {
  """The number of nodes that have been affected by the Batch operation."""
  count: Long!
}

type Contributor implements Node {
  id: ID!
  name: String!
  email: String!
  doc: String!
  price: Float!
  active: Boolean!
  createdAt: DateTime!
  updatedAt: DateTime!
  projectRoles(where: ProjectRolesWhereInput, orderBy: ProjectRolesOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ProjectRoles!]
  experiences(where: ContributorExperienceWhereInput, orderBy: ContributorExperienceOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ContributorExperience!]
  formations(where: ContributorFormationWhereInput, orderBy: ContributorFormationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ContributorFormation!]
}

"""A connection to a list of items."""
type ContributorConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ContributorEdge]!
  aggregate: AggregateContributor!
}

input ContributorCreateInput {
  name: String!
  email: String!
  doc: String!
  price: Float
  active: Boolean
  projectRoles: ProjectRolesCreateManyWithoutContributorInput
  experiences: ContributorExperienceCreateManyWithoutContributorInput
  formations: ContributorFormationCreateManyWithoutContributorInput
}

input ContributorCreateOneWithoutExperiencesInput {
  create: ContributorCreateWithoutExperiencesInput
  connect: ContributorWhereUniqueInput
}

input ContributorCreateOneWithoutFormationsInput {
  create: ContributorCreateWithoutFormationsInput
  connect: ContributorWhereUniqueInput
}

input ContributorCreateOneWithoutProjectRolesInput {
  create: ContributorCreateWithoutProjectRolesInput
  connect: ContributorWhereUniqueInput
}

input ContributorCreateWithoutExperiencesInput {
  name: String!
  email: String!
  doc: String!
  price: Float
  active: Boolean
  projectRoles: ProjectRolesCreateManyWithoutContributorInput
  formations: ContributorFormationCreateManyWithoutContributorInput
}

input ContributorCreateWithoutFormationsInput {
  name: String!
  email: String!
  doc: String!
  price: Float
  active: Boolean
  projectRoles: ProjectRolesCreateManyWithoutContributorInput
  experiences: ContributorExperienceCreateManyWithoutContributorInput
}

input ContributorCreateWithoutProjectRolesInput {
  name: String!
  email: String!
  doc: String!
  price: Float
  active: Boolean
  experiences: ContributorExperienceCreateManyWithoutContributorInput
  formations: ContributorFormationCreateManyWithoutContributorInput
}

"""An edge in a connection."""
type ContributorEdge {
  """The item at the end of the edge."""
  node: Contributor!

  """A cursor for use in pagination."""
  cursor: String!
}

type ContributorExperience implements Node {
  id: ID!
  name: String!
  company: String!
  description: String
  startAt: DateTime!
  endAt: DateTime!
  createdAt: DateTime!
  updatedAt: DateTime!
  contributor: Contributor!
}

"""A connection to a list of items."""
type ContributorExperienceConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ContributorExperienceEdge]!
  aggregate: AggregateContributorExperience!
}

input ContributorExperienceCreateInput {
  name: String!
  company: String!
  description: String
  startAt: DateTime!
  endAt: DateTime!
  contributor: ContributorCreateOneWithoutExperiencesInput!
}

input ContributorExperienceCreateManyWithoutContributorInput {
  create: [ContributorExperienceCreateWithoutContributorInput!]
  connect: [ContributorExperienceWhereUniqueInput!]
}

input ContributorExperienceCreateWithoutContributorInput {
  name: String!
  company: String!
  description: String
  startAt: DateTime!
  endAt: DateTime!
}

"""An edge in a connection."""
type ContributorExperienceEdge {
  """The item at the end of the edge."""
  node: ContributorExperience!

  """A cursor for use in pagination."""
  cursor: String!
}

enum ContributorExperienceOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  company_ASC
  company_DESC
  description_ASC
  description_DESC
  startAt_ASC
  startAt_DESC
  endAt_ASC
  endAt_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type ContributorExperiencePreviousValues {
  id: ID!
  name: String!
  company: String!
  description: String
  startAt: DateTime!
  endAt: DateTime!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type ContributorExperienceSubscriptionPayload {
  mutation: MutationType!
  node: ContributorExperience
  updatedFields: [String!]
  previousValues: ContributorExperiencePreviousValues
}

input ContributorExperienceSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [ContributorExperienceSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [ContributorExperienceSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ContributorExperienceSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: ContributorExperienceWhereInput
}

input ContributorExperienceUpdateInput {
  name: String
  company: String
  description: String
  startAt: DateTime
  endAt: DateTime
  contributor: ContributorUpdateOneRequiredWithoutExperiencesInput
}

input ContributorExperienceUpdateManyWithoutContributorInput {
  create: [ContributorExperienceCreateWithoutContributorInput!]
  connect: [ContributorExperienceWhereUniqueInput!]
  disconnect: [ContributorExperienceWhereUniqueInput!]
  delete: [ContributorExperienceWhereUniqueInput!]
  update: [ContributorExperienceUpdateWithWhereUniqueWithoutContributorInput!]
  upsert: [ContributorExperienceUpsertWithWhereUniqueWithoutContributorInput!]
}

input ContributorExperienceUpdateWithoutContributorDataInput {
  name: String
  company: String
  description: String
  startAt: DateTime
  endAt: DateTime
}

input ContributorExperienceUpdateWithWhereUniqueWithoutContributorInput {
  where: ContributorExperienceWhereUniqueInput!
  data: ContributorExperienceUpdateWithoutContributorDataInput!
}

input ContributorExperienceUpsertWithWhereUniqueWithoutContributorInput {
  where: ContributorExperienceWhereUniqueInput!
  update: ContributorExperienceUpdateWithoutContributorDataInput!
  create: ContributorExperienceCreateWithoutContributorInput!
}

input ContributorExperienceWhereInput {
  """Logical AND on all given filters."""
  AND: [ContributorExperienceWhereInput!]

  """Logical OR on all given filters."""
  OR: [ContributorExperienceWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ContributorExperienceWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  company: String

  """All values that are not equal to given value."""
  company_not: String

  """All values that are contained in given list."""
  company_in: [String!]

  """All values that are not contained in given list."""
  company_not_in: [String!]

  """All values less than the given value."""
  company_lt: String

  """All values less than or equal the given value."""
  company_lte: String

  """All values greater than the given value."""
  company_gt: String

  """All values greater than or equal the given value."""
  company_gte: String

  """All values containing the given string."""
  company_contains: String

  """All values not containing the given string."""
  company_not_contains: String

  """All values starting with the given string."""
  company_starts_with: String

  """All values not starting with the given string."""
  company_not_starts_with: String

  """All values ending with the given string."""
  company_ends_with: String

  """All values not ending with the given string."""
  company_not_ends_with: String
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
  startAt: DateTime

  """All values that are not equal to given value."""
  startAt_not: DateTime

  """All values that are contained in given list."""
  startAt_in: [DateTime!]

  """All values that are not contained in given list."""
  startAt_not_in: [DateTime!]

  """All values less than the given value."""
  startAt_lt: DateTime

  """All values less than or equal the given value."""
  startAt_lte: DateTime

  """All values greater than the given value."""
  startAt_gt: DateTime

  """All values greater than or equal the given value."""
  startAt_gte: DateTime
  endAt: DateTime

  """All values that are not equal to given value."""
  endAt_not: DateTime

  """All values that are contained in given list."""
  endAt_in: [DateTime!]

  """All values that are not contained in given list."""
  endAt_not_in: [DateTime!]

  """All values less than the given value."""
  endAt_lt: DateTime

  """All values less than or equal the given value."""
  endAt_lte: DateTime

  """All values greater than the given value."""
  endAt_gt: DateTime

  """All values greater than or equal the given value."""
  endAt_gte: DateTime
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  contributor: ContributorWhereInput
}

input ContributorExperienceWhereUniqueInput {
  id: ID
}

type ContributorFormation implements Node {
  id: ID!
  name: String!
  institution: String!
  description: String
  startAt: DateTime!
  endAt: DateTime!
  createdAt: DateTime!
  updatedAt: DateTime!
  contributor: Contributor!
}

"""A connection to a list of items."""
type ContributorFormationConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ContributorFormationEdge]!
  aggregate: AggregateContributorFormation!
}

input ContributorFormationCreateInput {
  name: String!
  institution: String!
  description: String
  startAt: DateTime!
  endAt: DateTime!
  contributor: ContributorCreateOneWithoutFormationsInput!
}

input ContributorFormationCreateManyWithoutContributorInput {
  create: [ContributorFormationCreateWithoutContributorInput!]
  connect: [ContributorFormationWhereUniqueInput!]
}

input ContributorFormationCreateWithoutContributorInput {
  name: String!
  institution: String!
  description: String
  startAt: DateTime!
  endAt: DateTime!
}

"""An edge in a connection."""
type ContributorFormationEdge {
  """The item at the end of the edge."""
  node: ContributorFormation!

  """A cursor for use in pagination."""
  cursor: String!
}

enum ContributorFormationOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  institution_ASC
  institution_DESC
  description_ASC
  description_DESC
  startAt_ASC
  startAt_DESC
  endAt_ASC
  endAt_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type ContributorFormationPreviousValues {
  id: ID!
  name: String!
  institution: String!
  description: String
  startAt: DateTime!
  endAt: DateTime!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type ContributorFormationSubscriptionPayload {
  mutation: MutationType!
  node: ContributorFormation
  updatedFields: [String!]
  previousValues: ContributorFormationPreviousValues
}

input ContributorFormationSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [ContributorFormationSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [ContributorFormationSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ContributorFormationSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: ContributorFormationWhereInput
}

input ContributorFormationUpdateInput {
  name: String
  institution: String
  description: String
  startAt: DateTime
  endAt: DateTime
  contributor: ContributorUpdateOneRequiredWithoutFormationsInput
}

input ContributorFormationUpdateManyWithoutContributorInput {
  create: [ContributorFormationCreateWithoutContributorInput!]
  connect: [ContributorFormationWhereUniqueInput!]
  disconnect: [ContributorFormationWhereUniqueInput!]
  delete: [ContributorFormationWhereUniqueInput!]
  update: [ContributorFormationUpdateWithWhereUniqueWithoutContributorInput!]
  upsert: [ContributorFormationUpsertWithWhereUniqueWithoutContributorInput!]
}

input ContributorFormationUpdateWithoutContributorDataInput {
  name: String
  institution: String
  description: String
  startAt: DateTime
  endAt: DateTime
}

input ContributorFormationUpdateWithWhereUniqueWithoutContributorInput {
  where: ContributorFormationWhereUniqueInput!
  data: ContributorFormationUpdateWithoutContributorDataInput!
}

input ContributorFormationUpsertWithWhereUniqueWithoutContributorInput {
  where: ContributorFormationWhereUniqueInput!
  update: ContributorFormationUpdateWithoutContributorDataInput!
  create: ContributorFormationCreateWithoutContributorInput!
}

input ContributorFormationWhereInput {
  """Logical AND on all given filters."""
  AND: [ContributorFormationWhereInput!]

  """Logical OR on all given filters."""
  OR: [ContributorFormationWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ContributorFormationWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  institution: String

  """All values that are not equal to given value."""
  institution_not: String

  """All values that are contained in given list."""
  institution_in: [String!]

  """All values that are not contained in given list."""
  institution_not_in: [String!]

  """All values less than the given value."""
  institution_lt: String

  """All values less than or equal the given value."""
  institution_lte: String

  """All values greater than the given value."""
  institution_gt: String

  """All values greater than or equal the given value."""
  institution_gte: String

  """All values containing the given string."""
  institution_contains: String

  """All values not containing the given string."""
  institution_not_contains: String

  """All values starting with the given string."""
  institution_starts_with: String

  """All values not starting with the given string."""
  institution_not_starts_with: String

  """All values ending with the given string."""
  institution_ends_with: String

  """All values not ending with the given string."""
  institution_not_ends_with: String
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
  startAt: DateTime

  """All values that are not equal to given value."""
  startAt_not: DateTime

  """All values that are contained in given list."""
  startAt_in: [DateTime!]

  """All values that are not contained in given list."""
  startAt_not_in: [DateTime!]

  """All values less than the given value."""
  startAt_lt: DateTime

  """All values less than or equal the given value."""
  startAt_lte: DateTime

  """All values greater than the given value."""
  startAt_gt: DateTime

  """All values greater than or equal the given value."""
  startAt_gte: DateTime
  endAt: DateTime

  """All values that are not equal to given value."""
  endAt_not: DateTime

  """All values that are contained in given list."""
  endAt_in: [DateTime!]

  """All values that are not contained in given list."""
  endAt_not_in: [DateTime!]

  """All values less than the given value."""
  endAt_lt: DateTime

  """All values less than or equal the given value."""
  endAt_lte: DateTime

  """All values greater than the given value."""
  endAt_gt: DateTime

  """All values greater than or equal the given value."""
  endAt_gte: DateTime
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  contributor: ContributorWhereInput
}

input ContributorFormationWhereUniqueInput {
  id: ID
}

enum ContributorOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  email_ASC
  email_DESC
  doc_ASC
  doc_DESC
  price_ASC
  price_DESC
  active_ASC
  active_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type ContributorPreviousValues {
  id: ID!
  name: String!
  email: String!
  doc: String!
  price: Float!
  active: Boolean!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type ContributorSubscriptionPayload {
  mutation: MutationType!
  node: Contributor
  updatedFields: [String!]
  previousValues: ContributorPreviousValues
}

input ContributorSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [ContributorSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [ContributorSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ContributorSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: ContributorWhereInput
}

input ContributorUpdateInput {
  name: String
  email: String
  doc: String
  price: Float
  active: Boolean
  projectRoles: ProjectRolesUpdateManyWithoutContributorInput
  experiences: ContributorExperienceUpdateManyWithoutContributorInput
  formations: ContributorFormationUpdateManyWithoutContributorInput
}

input ContributorUpdateOneRequiredWithoutExperiencesInput {
  create: ContributorCreateWithoutExperiencesInput
  connect: ContributorWhereUniqueInput
  update: ContributorUpdateWithoutExperiencesDataInput
  upsert: ContributorUpsertWithoutExperiencesInput
}

input ContributorUpdateOneRequiredWithoutFormationsInput {
  create: ContributorCreateWithoutFormationsInput
  connect: ContributorWhereUniqueInput
  update: ContributorUpdateWithoutFormationsDataInput
  upsert: ContributorUpsertWithoutFormationsInput
}

input ContributorUpdateOneWithoutProjectRolesInput {
  create: ContributorCreateWithoutProjectRolesInput
  connect: ContributorWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: ContributorUpdateWithoutProjectRolesDataInput
  upsert: ContributorUpsertWithoutProjectRolesInput
}

input ContributorUpdateWithoutExperiencesDataInput {
  name: String
  email: String
  doc: String
  price: Float
  active: Boolean
  projectRoles: ProjectRolesUpdateManyWithoutContributorInput
  formations: ContributorFormationUpdateManyWithoutContributorInput
}

input ContributorUpdateWithoutFormationsDataInput {
  name: String
  email: String
  doc: String
  price: Float
  active: Boolean
  projectRoles: ProjectRolesUpdateManyWithoutContributorInput
  experiences: ContributorExperienceUpdateManyWithoutContributorInput
}

input ContributorUpdateWithoutProjectRolesDataInput {
  name: String
  email: String
  doc: String
  price: Float
  active: Boolean
  experiences: ContributorExperienceUpdateManyWithoutContributorInput
  formations: ContributorFormationUpdateManyWithoutContributorInput
}

input ContributorUpsertWithoutExperiencesInput {
  update: ContributorUpdateWithoutExperiencesDataInput!
  create: ContributorCreateWithoutExperiencesInput!
}

input ContributorUpsertWithoutFormationsInput {
  update: ContributorUpdateWithoutFormationsDataInput!
  create: ContributorCreateWithoutFormationsInput!
}

input ContributorUpsertWithoutProjectRolesInput {
  update: ContributorUpdateWithoutProjectRolesDataInput!
  create: ContributorCreateWithoutProjectRolesInput!
}

input ContributorWhereInput {
  """Logical AND on all given filters."""
  AND: [ContributorWhereInput!]

  """Logical OR on all given filters."""
  OR: [ContributorWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ContributorWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  email: String

  """All values that are not equal to given value."""
  email_not: String

  """All values that are contained in given list."""
  email_in: [String!]

  """All values that are not contained in given list."""
  email_not_in: [String!]

  """All values less than the given value."""
  email_lt: String

  """All values less than or equal the given value."""
  email_lte: String

  """All values greater than the given value."""
  email_gt: String

  """All values greater than or equal the given value."""
  email_gte: String

  """All values containing the given string."""
  email_contains: String

  """All values not containing the given string."""
  email_not_contains: String

  """All values starting with the given string."""
  email_starts_with: String

  """All values not starting with the given string."""
  email_not_starts_with: String

  """All values ending with the given string."""
  email_ends_with: String

  """All values not ending with the given string."""
  email_not_ends_with: String
  doc: String

  """All values that are not equal to given value."""
  doc_not: String

  """All values that are contained in given list."""
  doc_in: [String!]

  """All values that are not contained in given list."""
  doc_not_in: [String!]

  """All values less than the given value."""
  doc_lt: String

  """All values less than or equal the given value."""
  doc_lte: String

  """All values greater than the given value."""
  doc_gt: String

  """All values greater than or equal the given value."""
  doc_gte: String

  """All values containing the given string."""
  doc_contains: String

  """All values not containing the given string."""
  doc_not_contains: String

  """All values starting with the given string."""
  doc_starts_with: String

  """All values not starting with the given string."""
  doc_not_starts_with: String

  """All values ending with the given string."""
  doc_ends_with: String

  """All values not ending with the given string."""
  doc_not_ends_with: String
  price: Float

  """All values that are not equal to given value."""
  price_not: Float

  """All values that are contained in given list."""
  price_in: [Float!]

  """All values that are not contained in given list."""
  price_not_in: [Float!]

  """All values less than the given value."""
  price_lt: Float

  """All values less than or equal the given value."""
  price_lte: Float

  """All values greater than the given value."""
  price_gt: Float

  """All values greater than or equal the given value."""
  price_gte: Float
  active: Boolean

  """All values that are not equal to given value."""
  active_not: Boolean
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  projectRoles_every: ProjectRolesWhereInput
  projectRoles_some: ProjectRolesWhereInput
  projectRoles_none: ProjectRolesWhereInput
  experiences_every: ContributorExperienceWhereInput
  experiences_some: ContributorExperienceWhereInput
  experiences_none: ContributorExperienceWhereInput
  formations_every: ContributorFormationWhereInput
  formations_some: ContributorFormationWhereInput
  formations_none: ContributorFormationWhereInput
}

input ContributorWhereUniqueInput {
  id: ID
  email: String
  doc: String
}

scalar DateTime

type Epic implements Node {
  id: ID!
  name: String!
  descriptions: String
  userStory: [String!]!
  priority: Int!
  estimateSize: Int
  estimatePrice: Int
  estimateEffort: Int
  estimateStart: DateTime
  estimateEnd: DateTime
  createdAt: DateTime!
  updatedAt: DateTime!
  feature: Feature!
}

"""A connection to a list of items."""
type EpicConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [EpicEdge]!
  aggregate: AggregateEpic!
}

input EpicCreateInput {
  name: String!
  descriptions: String
  priority: Int
  estimateSize: Int
  estimatePrice: Int
  estimateEffort: Int
  estimateStart: DateTime
  estimateEnd: DateTime
  userStory: EpicCreateuserStoryInput
  feature: FeatureCreateOneWithoutEpicsInput!
}

input EpicCreateManyWithoutFeatureInput {
  create: [EpicCreateWithoutFeatureInput!]
  connect: [EpicWhereUniqueInput!]
}

input EpicCreateuserStoryInput {
  set: [String!]
}

input EpicCreateWithoutFeatureInput {
  name: String!
  descriptions: String
  priority: Int
  estimateSize: Int
  estimatePrice: Int
  estimateEffort: Int
  estimateStart: DateTime
  estimateEnd: DateTime
  userStory: EpicCreateuserStoryInput
}

"""An edge in a connection."""
type EpicEdge {
  """The item at the end of the edge."""
  node: Epic!

  """A cursor for use in pagination."""
  cursor: String!
}

enum EpicOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  descriptions_ASC
  descriptions_DESC
  priority_ASC
  priority_DESC
  estimateSize_ASC
  estimateSize_DESC
  estimatePrice_ASC
  estimatePrice_DESC
  estimateEffort_ASC
  estimateEffort_DESC
  estimateStart_ASC
  estimateStart_DESC
  estimateEnd_ASC
  estimateEnd_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type EpicPreviousValues {
  id: ID!
  name: String!
  descriptions: String
  userStory: [String!]!
  priority: Int!
  estimateSize: Int
  estimatePrice: Int
  estimateEffort: Int
  estimateStart: DateTime
  estimateEnd: DateTime
  createdAt: DateTime!
  updatedAt: DateTime!
}

type EpicSubscriptionPayload {
  mutation: MutationType!
  node: Epic
  updatedFields: [String!]
  previousValues: EpicPreviousValues
}

input EpicSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [EpicSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [EpicSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [EpicSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: EpicWhereInput
}

input EpicUpdateInput {
  name: String
  descriptions: String
  priority: Int
  estimateSize: Int
  estimatePrice: Int
  estimateEffort: Int
  estimateStart: DateTime
  estimateEnd: DateTime
  userStory: EpicUpdateuserStoryInput
  feature: FeatureUpdateOneRequiredWithoutEpicsInput
}

input EpicUpdateManyWithoutFeatureInput {
  create: [EpicCreateWithoutFeatureInput!]
  connect: [EpicWhereUniqueInput!]
  disconnect: [EpicWhereUniqueInput!]
  delete: [EpicWhereUniqueInput!]
  update: [EpicUpdateWithWhereUniqueWithoutFeatureInput!]
  upsert: [EpicUpsertWithWhereUniqueWithoutFeatureInput!]
}

input EpicUpdateuserStoryInput {
  set: [String!]
}

input EpicUpdateWithoutFeatureDataInput {
  name: String
  descriptions: String
  priority: Int
  estimateSize: Int
  estimatePrice: Int
  estimateEffort: Int
  estimateStart: DateTime
  estimateEnd: DateTime
  userStory: EpicUpdateuserStoryInput
}

input EpicUpdateWithWhereUniqueWithoutFeatureInput {
  where: EpicWhereUniqueInput!
  data: EpicUpdateWithoutFeatureDataInput!
}

input EpicUpsertWithWhereUniqueWithoutFeatureInput {
  where: EpicWhereUniqueInput!
  update: EpicUpdateWithoutFeatureDataInput!
  create: EpicCreateWithoutFeatureInput!
}

input EpicWhereInput {
  """Logical AND on all given filters."""
  AND: [EpicWhereInput!]

  """Logical OR on all given filters."""
  OR: [EpicWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [EpicWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  descriptions: String

  """All values that are not equal to given value."""
  descriptions_not: String

  """All values that are contained in given list."""
  descriptions_in: [String!]

  """All values that are not contained in given list."""
  descriptions_not_in: [String!]

  """All values less than the given value."""
  descriptions_lt: String

  """All values less than or equal the given value."""
  descriptions_lte: String

  """All values greater than the given value."""
  descriptions_gt: String

  """All values greater than or equal the given value."""
  descriptions_gte: String

  """All values containing the given string."""
  descriptions_contains: String

  """All values not containing the given string."""
  descriptions_not_contains: String

  """All values starting with the given string."""
  descriptions_starts_with: String

  """All values not starting with the given string."""
  descriptions_not_starts_with: String

  """All values ending with the given string."""
  descriptions_ends_with: String

  """All values not ending with the given string."""
  descriptions_not_ends_with: String
  priority: Int

  """All values that are not equal to given value."""
  priority_not: Int

  """All values that are contained in given list."""
  priority_in: [Int!]

  """All values that are not contained in given list."""
  priority_not_in: [Int!]

  """All values less than the given value."""
  priority_lt: Int

  """All values less than or equal the given value."""
  priority_lte: Int

  """All values greater than the given value."""
  priority_gt: Int

  """All values greater than or equal the given value."""
  priority_gte: Int
  estimateSize: Int

  """All values that are not equal to given value."""
  estimateSize_not: Int

  """All values that are contained in given list."""
  estimateSize_in: [Int!]

  """All values that are not contained in given list."""
  estimateSize_not_in: [Int!]

  """All values less than the given value."""
  estimateSize_lt: Int

  """All values less than or equal the given value."""
  estimateSize_lte: Int

  """All values greater than the given value."""
  estimateSize_gt: Int

  """All values greater than or equal the given value."""
  estimateSize_gte: Int
  estimatePrice: Int

  """All values that are not equal to given value."""
  estimatePrice_not: Int

  """All values that are contained in given list."""
  estimatePrice_in: [Int!]

  """All values that are not contained in given list."""
  estimatePrice_not_in: [Int!]

  """All values less than the given value."""
  estimatePrice_lt: Int

  """All values less than or equal the given value."""
  estimatePrice_lte: Int

  """All values greater than the given value."""
  estimatePrice_gt: Int

  """All values greater than or equal the given value."""
  estimatePrice_gte: Int
  estimateEffort: Int

  """All values that are not equal to given value."""
  estimateEffort_not: Int

  """All values that are contained in given list."""
  estimateEffort_in: [Int!]

  """All values that are not contained in given list."""
  estimateEffort_not_in: [Int!]

  """All values less than the given value."""
  estimateEffort_lt: Int

  """All values less than or equal the given value."""
  estimateEffort_lte: Int

  """All values greater than the given value."""
  estimateEffort_gt: Int

  """All values greater than or equal the given value."""
  estimateEffort_gte: Int
  estimateStart: DateTime

  """All values that are not equal to given value."""
  estimateStart_not: DateTime

  """All values that are contained in given list."""
  estimateStart_in: [DateTime!]

  """All values that are not contained in given list."""
  estimateStart_not_in: [DateTime!]

  """All values less than the given value."""
  estimateStart_lt: DateTime

  """All values less than or equal the given value."""
  estimateStart_lte: DateTime

  """All values greater than the given value."""
  estimateStart_gt: DateTime

  """All values greater than or equal the given value."""
  estimateStart_gte: DateTime
  estimateEnd: DateTime

  """All values that are not equal to given value."""
  estimateEnd_not: DateTime

  """All values that are contained in given list."""
  estimateEnd_in: [DateTime!]

  """All values that are not contained in given list."""
  estimateEnd_not_in: [DateTime!]

  """All values less than the given value."""
  estimateEnd_lt: DateTime

  """All values less than or equal the given value."""
  estimateEnd_lte: DateTime

  """All values greater than the given value."""
  estimateEnd_gt: DateTime

  """All values greater than or equal the given value."""
  estimateEnd_gte: DateTime
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  feature: FeatureWhereInput
}

input EpicWhereUniqueInput {
  id: ID
}

type Feature implements Node {
  id: ID!
  name: String!
  descriptions: String
  userStory: [String!]!
  priority: Int!
  estimateSize: Int
  estimatePrice: Int
  estimateEffort: Int
  estimateStart: DateTime
  estimateEnd: DateTime
  createdAt: DateTime!
  updatedAt: DateTime!
  epics(where: EpicWhereInput, orderBy: EpicOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Epic!]
  project: Project!
}

"""A connection to a list of items."""
type FeatureConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [FeatureEdge]!
  aggregate: AggregateFeature!
}

input FeatureCreateInput {
  name: String!
  descriptions: String
  priority: Int
  estimateSize: Int
  estimatePrice: Int
  estimateEffort: Int
  estimateStart: DateTime
  estimateEnd: DateTime
  userStory: FeatureCreateuserStoryInput
  epics: EpicCreateManyWithoutFeatureInput
  project: ProjectCreateOneWithoutFeaturesInput!
}

input FeatureCreateManyWithoutProjectInput {
  create: [FeatureCreateWithoutProjectInput!]
  connect: [FeatureWhereUniqueInput!]
}

input FeatureCreateOneWithoutEpicsInput {
  create: FeatureCreateWithoutEpicsInput
  connect: FeatureWhereUniqueInput
}

input FeatureCreateuserStoryInput {
  set: [String!]
}

input FeatureCreateWithoutEpicsInput {
  name: String!
  descriptions: String
  priority: Int
  estimateSize: Int
  estimatePrice: Int
  estimateEffort: Int
  estimateStart: DateTime
  estimateEnd: DateTime
  userStory: FeatureCreateuserStoryInput
  project: ProjectCreateOneWithoutFeaturesInput!
}

input FeatureCreateWithoutProjectInput {
  name: String!
  descriptions: String
  priority: Int
  estimateSize: Int
  estimatePrice: Int
  estimateEffort: Int
  estimateStart: DateTime
  estimateEnd: DateTime
  userStory: FeatureCreateuserStoryInput
  epics: EpicCreateManyWithoutFeatureInput
}

"""An edge in a connection."""
type FeatureEdge {
  """The item at the end of the edge."""
  node: Feature!

  """A cursor for use in pagination."""
  cursor: String!
}

enum FeatureOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  descriptions_ASC
  descriptions_DESC
  priority_ASC
  priority_DESC
  estimateSize_ASC
  estimateSize_DESC
  estimatePrice_ASC
  estimatePrice_DESC
  estimateEffort_ASC
  estimateEffort_DESC
  estimateStart_ASC
  estimateStart_DESC
  estimateEnd_ASC
  estimateEnd_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type FeaturePreviousValues {
  id: ID!
  name: String!
  descriptions: String
  userStory: [String!]!
  priority: Int!
  estimateSize: Int
  estimatePrice: Int
  estimateEffort: Int
  estimateStart: DateTime
  estimateEnd: DateTime
  createdAt: DateTime!
  updatedAt: DateTime!
}

type FeatureSubscriptionPayload {
  mutation: MutationType!
  node: Feature
  updatedFields: [String!]
  previousValues: FeaturePreviousValues
}

input FeatureSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [FeatureSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [FeatureSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [FeatureSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: FeatureWhereInput
}

input FeatureUpdateInput {
  name: String
  descriptions: String
  priority: Int
  estimateSize: Int
  estimatePrice: Int
  estimateEffort: Int
  estimateStart: DateTime
  estimateEnd: DateTime
  userStory: FeatureUpdateuserStoryInput
  epics: EpicUpdateManyWithoutFeatureInput
  project: ProjectUpdateOneRequiredWithoutFeaturesInput
}

input FeatureUpdateManyWithoutProjectInput {
  create: [FeatureCreateWithoutProjectInput!]
  connect: [FeatureWhereUniqueInput!]
  disconnect: [FeatureWhereUniqueInput!]
  delete: [FeatureWhereUniqueInput!]
  update: [FeatureUpdateWithWhereUniqueWithoutProjectInput!]
  upsert: [FeatureUpsertWithWhereUniqueWithoutProjectInput!]
}

input FeatureUpdateOneRequiredWithoutEpicsInput {
  create: FeatureCreateWithoutEpicsInput
  connect: FeatureWhereUniqueInput
  update: FeatureUpdateWithoutEpicsDataInput
  upsert: FeatureUpsertWithoutEpicsInput
}

input FeatureUpdateuserStoryInput {
  set: [String!]
}

input FeatureUpdateWithoutEpicsDataInput {
  name: String
  descriptions: String
  priority: Int
  estimateSize: Int
  estimatePrice: Int
  estimateEffort: Int
  estimateStart: DateTime
  estimateEnd: DateTime
  userStory: FeatureUpdateuserStoryInput
  project: ProjectUpdateOneRequiredWithoutFeaturesInput
}

input FeatureUpdateWithoutProjectDataInput {
  name: String
  descriptions: String
  priority: Int
  estimateSize: Int
  estimatePrice: Int
  estimateEffort: Int
  estimateStart: DateTime
  estimateEnd: DateTime
  userStory: FeatureUpdateuserStoryInput
  epics: EpicUpdateManyWithoutFeatureInput
}

input FeatureUpdateWithWhereUniqueWithoutProjectInput {
  where: FeatureWhereUniqueInput!
  data: FeatureUpdateWithoutProjectDataInput!
}

input FeatureUpsertWithoutEpicsInput {
  update: FeatureUpdateWithoutEpicsDataInput!
  create: FeatureCreateWithoutEpicsInput!
}

input FeatureUpsertWithWhereUniqueWithoutProjectInput {
  where: FeatureWhereUniqueInput!
  update: FeatureUpdateWithoutProjectDataInput!
  create: FeatureCreateWithoutProjectInput!
}

input FeatureWhereInput {
  """Logical AND on all given filters."""
  AND: [FeatureWhereInput!]

  """Logical OR on all given filters."""
  OR: [FeatureWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [FeatureWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  descriptions: String

  """All values that are not equal to given value."""
  descriptions_not: String

  """All values that are contained in given list."""
  descriptions_in: [String!]

  """All values that are not contained in given list."""
  descriptions_not_in: [String!]

  """All values less than the given value."""
  descriptions_lt: String

  """All values less than or equal the given value."""
  descriptions_lte: String

  """All values greater than the given value."""
  descriptions_gt: String

  """All values greater than or equal the given value."""
  descriptions_gte: String

  """All values containing the given string."""
  descriptions_contains: String

  """All values not containing the given string."""
  descriptions_not_contains: String

  """All values starting with the given string."""
  descriptions_starts_with: String

  """All values not starting with the given string."""
  descriptions_not_starts_with: String

  """All values ending with the given string."""
  descriptions_ends_with: String

  """All values not ending with the given string."""
  descriptions_not_ends_with: String
  priority: Int

  """All values that are not equal to given value."""
  priority_not: Int

  """All values that are contained in given list."""
  priority_in: [Int!]

  """All values that are not contained in given list."""
  priority_not_in: [Int!]

  """All values less than the given value."""
  priority_lt: Int

  """All values less than or equal the given value."""
  priority_lte: Int

  """All values greater than the given value."""
  priority_gt: Int

  """All values greater than or equal the given value."""
  priority_gte: Int
  estimateSize: Int

  """All values that are not equal to given value."""
  estimateSize_not: Int

  """All values that are contained in given list."""
  estimateSize_in: [Int!]

  """All values that are not contained in given list."""
  estimateSize_not_in: [Int!]

  """All values less than the given value."""
  estimateSize_lt: Int

  """All values less than or equal the given value."""
  estimateSize_lte: Int

  """All values greater than the given value."""
  estimateSize_gt: Int

  """All values greater than or equal the given value."""
  estimateSize_gte: Int
  estimatePrice: Int

  """All values that are not equal to given value."""
  estimatePrice_not: Int

  """All values that are contained in given list."""
  estimatePrice_in: [Int!]

  """All values that are not contained in given list."""
  estimatePrice_not_in: [Int!]

  """All values less than the given value."""
  estimatePrice_lt: Int

  """All values less than or equal the given value."""
  estimatePrice_lte: Int

  """All values greater than the given value."""
  estimatePrice_gt: Int

  """All values greater than or equal the given value."""
  estimatePrice_gte: Int
  estimateEffort: Int

  """All values that are not equal to given value."""
  estimateEffort_not: Int

  """All values that are contained in given list."""
  estimateEffort_in: [Int!]

  """All values that are not contained in given list."""
  estimateEffort_not_in: [Int!]

  """All values less than the given value."""
  estimateEffort_lt: Int

  """All values less than or equal the given value."""
  estimateEffort_lte: Int

  """All values greater than the given value."""
  estimateEffort_gt: Int

  """All values greater than or equal the given value."""
  estimateEffort_gte: Int
  estimateStart: DateTime

  """All values that are not equal to given value."""
  estimateStart_not: DateTime

  """All values that are contained in given list."""
  estimateStart_in: [DateTime!]

  """All values that are not contained in given list."""
  estimateStart_not_in: [DateTime!]

  """All values less than the given value."""
  estimateStart_lt: DateTime

  """All values less than or equal the given value."""
  estimateStart_lte: DateTime

  """All values greater than the given value."""
  estimateStart_gt: DateTime

  """All values greater than or equal the given value."""
  estimateStart_gte: DateTime
  estimateEnd: DateTime

  """All values that are not equal to given value."""
  estimateEnd_not: DateTime

  """All values that are contained in given list."""
  estimateEnd_in: [DateTime!]

  """All values that are not contained in given list."""
  estimateEnd_not_in: [DateTime!]

  """All values less than the given value."""
  estimateEnd_lt: DateTime

  """All values less than or equal the given value."""
  estimateEnd_lte: DateTime

  """All values greater than the given value."""
  estimateEnd_gt: DateTime

  """All values greater than or equal the given value."""
  estimateEnd_gte: DateTime
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  epics_every: EpicWhereInput
  epics_some: EpicWhereInput
  epics_none: EpicWhereInput
  project: ProjectWhereInput
}

input FeatureWhereUniqueInput {
  id: ID
}

type Lifecycle implements Node {
  id: ID!
  name: String!
  phase: [String!]!
  createdAt: DateTime!
  updatedAt: DateTime!
  projects(where: ProjectWhereInput, orderBy: ProjectOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Project!]
}

"""A connection to a list of items."""
type LifecycleConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [LifecycleEdge]!
  aggregate: AggregateLifecycle!
}

input LifecycleCreateInput {
  name: String!
  phase: LifecycleCreatephaseInput
  projects: ProjectCreateManyWithoutLifecycleInput
}

input LifecycleCreateOneWithoutProjectsInput {
  create: LifecycleCreateWithoutProjectsInput
  connect: LifecycleWhereUniqueInput
}

input LifecycleCreatephaseInput {
  set: [String!]
}

input LifecycleCreateWithoutProjectsInput {
  name: String!
  phase: LifecycleCreatephaseInput
}

"""An edge in a connection."""
type LifecycleEdge {
  """The item at the end of the edge."""
  node: Lifecycle!

  """A cursor for use in pagination."""
  cursor: String!
}

enum LifecycleOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type LifecyclePreviousValues {
  id: ID!
  name: String!
  phase: [String!]!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type LifecycleSubscriptionPayload {
  mutation: MutationType!
  node: Lifecycle
  updatedFields: [String!]
  previousValues: LifecyclePreviousValues
}

input LifecycleSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [LifecycleSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [LifecycleSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [LifecycleSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: LifecycleWhereInput
}

input LifecycleUpdateInput {
  name: String
  phase: LifecycleUpdatephaseInput
  projects: ProjectUpdateManyWithoutLifecycleInput
}

input LifecycleUpdateOneWithoutProjectsInput {
  create: LifecycleCreateWithoutProjectsInput
  connect: LifecycleWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: LifecycleUpdateWithoutProjectsDataInput
  upsert: LifecycleUpsertWithoutProjectsInput
}

input LifecycleUpdatephaseInput {
  set: [String!]
}

input LifecycleUpdateWithoutProjectsDataInput {
  name: String
  phase: LifecycleUpdatephaseInput
}

input LifecycleUpsertWithoutProjectsInput {
  update: LifecycleUpdateWithoutProjectsDataInput!
  create: LifecycleCreateWithoutProjectsInput!
}

input LifecycleWhereInput {
  """Logical AND on all given filters."""
  AND: [LifecycleWhereInput!]

  """Logical OR on all given filters."""
  OR: [LifecycleWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [LifecycleWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  projects_every: ProjectWhereInput
  projects_some: ProjectWhereInput
  projects_none: ProjectWhereInput
}

input LifecycleWhereUniqueInput {
  id: ID
}

"""
The `Long` scalar type represents non-fractional signed whole numeric values.
Long can represent values between -(2^63) and 2^63 - 1.
"""
scalar Long

type Mutation {
  createUser(data: UserCreateInput!): User!
  createContributor(data: ContributorCreateInput!): Contributor!
  createContributorExperience(data: ContributorExperienceCreateInput!): ContributorExperience!
  createContributorFormation(data: ContributorFormationCreateInput!): ContributorFormation!
  createProject(data: ProjectCreateInput!): Project!
  createProjectRoles(data: ProjectRolesCreateInput!): ProjectRoles!
  createRole(data: RoleCreateInput!): Role!
  createRoleLevel(data: RoleLevelCreateInput!): RoleLevel!
  createLifecycle(data: LifecycleCreateInput!): Lifecycle!
  createFeature(data: FeatureCreateInput!): Feature!
  createEpic(data: EpicCreateInput!): Epic!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateContributor(data: ContributorUpdateInput!, where: ContributorWhereUniqueInput!): Contributor
  updateContributorExperience(data: ContributorExperienceUpdateInput!, where: ContributorExperienceWhereUniqueInput!): ContributorExperience
  updateContributorFormation(data: ContributorFormationUpdateInput!, where: ContributorFormationWhereUniqueInput!): ContributorFormation
  updateProject(data: ProjectUpdateInput!, where: ProjectWhereUniqueInput!): Project
  updateProjectRoles(data: ProjectRolesUpdateInput!, where: ProjectRolesWhereUniqueInput!): ProjectRoles
  updateRole(data: RoleUpdateInput!, where: RoleWhereUniqueInput!): Role
  updateRoleLevel(data: RoleLevelUpdateInput!, where: RoleLevelWhereUniqueInput!): RoleLevel
  updateLifecycle(data: LifecycleUpdateInput!, where: LifecycleWhereUniqueInput!): Lifecycle
  updateFeature(data: FeatureUpdateInput!, where: FeatureWhereUniqueInput!): Feature
  updateEpic(data: EpicUpdateInput!, where: EpicWhereUniqueInput!): Epic
  deleteUser(where: UserWhereUniqueInput!): User
  deleteContributor(where: ContributorWhereUniqueInput!): Contributor
  deleteContributorExperience(where: ContributorExperienceWhereUniqueInput!): ContributorExperience
  deleteContributorFormation(where: ContributorFormationWhereUniqueInput!): ContributorFormation
  deleteProject(where: ProjectWhereUniqueInput!): Project
  deleteProjectRoles(where: ProjectRolesWhereUniqueInput!): ProjectRoles
  deleteRole(where: RoleWhereUniqueInput!): Role
  deleteRoleLevel(where: RoleLevelWhereUniqueInput!): RoleLevel
  deleteLifecycle(where: LifecycleWhereUniqueInput!): Lifecycle
  deleteFeature(where: FeatureWhereUniqueInput!): Feature
  deleteEpic(where: EpicWhereUniqueInput!): Epic
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  upsertContributor(where: ContributorWhereUniqueInput!, create: ContributorCreateInput!, update: ContributorUpdateInput!): Contributor!
  upsertContributorExperience(where: ContributorExperienceWhereUniqueInput!, create: ContributorExperienceCreateInput!, update: ContributorExperienceUpdateInput!): ContributorExperience!
  upsertContributorFormation(where: ContributorFormationWhereUniqueInput!, create: ContributorFormationCreateInput!, update: ContributorFormationUpdateInput!): ContributorFormation!
  upsertProject(where: ProjectWhereUniqueInput!, create: ProjectCreateInput!, update: ProjectUpdateInput!): Project!
  upsertProjectRoles(where: ProjectRolesWhereUniqueInput!, create: ProjectRolesCreateInput!, update: ProjectRolesUpdateInput!): ProjectRoles!
  upsertRole(where: RoleWhereUniqueInput!, create: RoleCreateInput!, update: RoleUpdateInput!): Role!
  upsertRoleLevel(where: RoleLevelWhereUniqueInput!, create: RoleLevelCreateInput!, update: RoleLevelUpdateInput!): RoleLevel!
  upsertLifecycle(where: LifecycleWhereUniqueInput!, create: LifecycleCreateInput!, update: LifecycleUpdateInput!): Lifecycle!
  upsertFeature(where: FeatureWhereUniqueInput!, create: FeatureCreateInput!, update: FeatureUpdateInput!): Feature!
  upsertEpic(where: EpicWhereUniqueInput!, create: EpicCreateInput!, update: EpicUpdateInput!): Epic!
  updateManyUsers(data: UserUpdateInput!, where: UserWhereInput): BatchPayload!
  updateManyContributors(data: ContributorUpdateInput!, where: ContributorWhereInput): BatchPayload!
  updateManyContributorExperiences(data: ContributorExperienceUpdateInput!, where: ContributorExperienceWhereInput): BatchPayload!
  updateManyContributorFormations(data: ContributorFormationUpdateInput!, where: ContributorFormationWhereInput): BatchPayload!
  updateManyProjects(data: ProjectUpdateInput!, where: ProjectWhereInput): BatchPayload!
  updateManyProjectRoleses(data: ProjectRolesUpdateInput!, where: ProjectRolesWhereInput): BatchPayload!
  updateManyRoles(data: RoleUpdateInput!, where: RoleWhereInput): BatchPayload!
  updateManyRoleLevels(data: RoleLevelUpdateInput!, where: RoleLevelWhereInput): BatchPayload!
  updateManyLifecycles(data: LifecycleUpdateInput!, where: LifecycleWhereInput): BatchPayload!
  updateManyFeatures(data: FeatureUpdateInput!, where: FeatureWhereInput): BatchPayload!
  updateManyEpics(data: EpicUpdateInput!, where: EpicWhereInput): BatchPayload!
  deleteManyUsers(where: UserWhereInput): BatchPayload!
  deleteManyContributors(where: ContributorWhereInput): BatchPayload!
  deleteManyContributorExperiences(where: ContributorExperienceWhereInput): BatchPayload!
  deleteManyContributorFormations(where: ContributorFormationWhereInput): BatchPayload!
  deleteManyProjects(where: ProjectWhereInput): BatchPayload!
  deleteManyProjectRoleses(where: ProjectRolesWhereInput): BatchPayload!
  deleteManyRoles(where: RoleWhereInput): BatchPayload!
  deleteManyRoleLevels(where: RoleLevelWhereInput): BatchPayload!
  deleteManyLifecycles(where: LifecycleWhereInput): BatchPayload!
  deleteManyFeatures(where: FeatureWhereInput): BatchPayload!
  deleteManyEpics(where: EpicWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

type Project implements Node {
  id: ID!
  name: String!
  sponsor: String!
  objectives: String
  motivations: String
  limitations: String
  restrictions: String
  status: ProjectStatus
  startAt: DateTime
  endAt: DateTime
  createdAt: DateTime!
  updatedAt: DateTime!
  features(where: FeatureWhereInput, orderBy: FeatureOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Feature!]
  lifecycle: Lifecycle
  projectRoles(where: ProjectRolesWhereInput, orderBy: ProjectRolesOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ProjectRoles!]
}

"""A connection to a list of items."""
type ProjectConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ProjectEdge]!
  aggregate: AggregateProject!
}

input ProjectCreateInput {
  name: String!
  sponsor: String!
  objectives: String
  motivations: String
  limitations: String
  restrictions: String
  status: ProjectStatus
  startAt: DateTime
  endAt: DateTime
  features: FeatureCreateManyWithoutProjectInput
  lifecycle: LifecycleCreateOneWithoutProjectsInput
  projectRoles: ProjectRolesCreateManyWithoutProjectInput
}

input ProjectCreateManyWithoutLifecycleInput {
  create: [ProjectCreateWithoutLifecycleInput!]
  connect: [ProjectWhereUniqueInput!]
}

input ProjectCreateOneWithoutFeaturesInput {
  create: ProjectCreateWithoutFeaturesInput
  connect: ProjectWhereUniqueInput
}

input ProjectCreateOneWithoutProjectRolesInput {
  create: ProjectCreateWithoutProjectRolesInput
  connect: ProjectWhereUniqueInput
}

input ProjectCreateWithoutFeaturesInput {
  name: String!
  sponsor: String!
  objectives: String
  motivations: String
  limitations: String
  restrictions: String
  status: ProjectStatus
  startAt: DateTime
  endAt: DateTime
  lifecycle: LifecycleCreateOneWithoutProjectsInput
  projectRoles: ProjectRolesCreateManyWithoutProjectInput
}

input ProjectCreateWithoutLifecycleInput {
  name: String!
  sponsor: String!
  objectives: String
  motivations: String
  limitations: String
  restrictions: String
  status: ProjectStatus
  startAt: DateTime
  endAt: DateTime
  features: FeatureCreateManyWithoutProjectInput
  projectRoles: ProjectRolesCreateManyWithoutProjectInput
}

input ProjectCreateWithoutProjectRolesInput {
  name: String!
  sponsor: String!
  objectives: String
  motivations: String
  limitations: String
  restrictions: String
  status: ProjectStatus
  startAt: DateTime
  endAt: DateTime
  features: FeatureCreateManyWithoutProjectInput
  lifecycle: LifecycleCreateOneWithoutProjectsInput
}

"""An edge in a connection."""
type ProjectEdge {
  """The item at the end of the edge."""
  node: Project!

  """A cursor for use in pagination."""
  cursor: String!
}

enum ProjectOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  sponsor_ASC
  sponsor_DESC
  objectives_ASC
  objectives_DESC
  motivations_ASC
  motivations_DESC
  limitations_ASC
  limitations_DESC
  restrictions_ASC
  restrictions_DESC
  status_ASC
  status_DESC
  startAt_ASC
  startAt_DESC
  endAt_ASC
  endAt_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type ProjectPreviousValues {
  id: ID!
  name: String!
  sponsor: String!
  objectives: String
  motivations: String
  limitations: String
  restrictions: String
  status: ProjectStatus
  startAt: DateTime
  endAt: DateTime
  createdAt: DateTime!
  updatedAt: DateTime!
}

type ProjectRoles implements Node {
  id: ID!
  role: Role!
  project: Project!
  contributor: Contributor
  price: Float!
  hours: Int!
  startAt: DateTime!
  endAt: DateTime!
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""A connection to a list of items."""
type ProjectRolesConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ProjectRolesEdge]!
  aggregate: AggregateProjectRoles!
}

input ProjectRolesCreateInput {
  price: Float
  hours: Int
  startAt: DateTime!
  endAt: DateTime!
  role: RoleCreateOneWithoutProjectRolesInput!
  project: ProjectCreateOneWithoutProjectRolesInput!
  contributor: ContributorCreateOneWithoutProjectRolesInput
}

input ProjectRolesCreateManyWithoutContributorInput {
  create: [ProjectRolesCreateWithoutContributorInput!]
  connect: [ProjectRolesWhereUniqueInput!]
}

input ProjectRolesCreateManyWithoutProjectInput {
  create: [ProjectRolesCreateWithoutProjectInput!]
  connect: [ProjectRolesWhereUniqueInput!]
}

input ProjectRolesCreateManyWithoutRoleInput {
  create: [ProjectRolesCreateWithoutRoleInput!]
  connect: [ProjectRolesWhereUniqueInput!]
}

input ProjectRolesCreateWithoutContributorInput {
  price: Float
  hours: Int
  startAt: DateTime!
  endAt: DateTime!
  role: RoleCreateOneWithoutProjectRolesInput!
  project: ProjectCreateOneWithoutProjectRolesInput!
}

input ProjectRolesCreateWithoutProjectInput {
  price: Float
  hours: Int
  startAt: DateTime!
  endAt: DateTime!
  role: RoleCreateOneWithoutProjectRolesInput!
  contributor: ContributorCreateOneWithoutProjectRolesInput
}

input ProjectRolesCreateWithoutRoleInput {
  price: Float
  hours: Int
  startAt: DateTime!
  endAt: DateTime!
  project: ProjectCreateOneWithoutProjectRolesInput!
  contributor: ContributorCreateOneWithoutProjectRolesInput
}

"""An edge in a connection."""
type ProjectRolesEdge {
  """The item at the end of the edge."""
  node: ProjectRoles!

  """A cursor for use in pagination."""
  cursor: String!
}

enum ProjectRolesOrderByInput {
  id_ASC
  id_DESC
  price_ASC
  price_DESC
  hours_ASC
  hours_DESC
  startAt_ASC
  startAt_DESC
  endAt_ASC
  endAt_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type ProjectRolesPreviousValues {
  id: ID!
  price: Float!
  hours: Int!
  startAt: DateTime!
  endAt: DateTime!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type ProjectRolesSubscriptionPayload {
  mutation: MutationType!
  node: ProjectRoles
  updatedFields: [String!]
  previousValues: ProjectRolesPreviousValues
}

input ProjectRolesSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [ProjectRolesSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [ProjectRolesSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ProjectRolesSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: ProjectRolesWhereInput
}

input ProjectRolesUpdateInput {
  price: Float
  hours: Int
  startAt: DateTime
  endAt: DateTime
  role: RoleUpdateOneRequiredWithoutProjectRolesInput
  project: ProjectUpdateOneRequiredWithoutProjectRolesInput
  contributor: ContributorUpdateOneWithoutProjectRolesInput
}

input ProjectRolesUpdateManyWithoutContributorInput {
  create: [ProjectRolesCreateWithoutContributorInput!]
  connect: [ProjectRolesWhereUniqueInput!]
  disconnect: [ProjectRolesWhereUniqueInput!]
  delete: [ProjectRolesWhereUniqueInput!]
  update: [ProjectRolesUpdateWithWhereUniqueWithoutContributorInput!]
  upsert: [ProjectRolesUpsertWithWhereUniqueWithoutContributorInput!]
}

input ProjectRolesUpdateManyWithoutProjectInput {
  create: [ProjectRolesCreateWithoutProjectInput!]
  connect: [ProjectRolesWhereUniqueInput!]
  disconnect: [ProjectRolesWhereUniqueInput!]
  delete: [ProjectRolesWhereUniqueInput!]
  update: [ProjectRolesUpdateWithWhereUniqueWithoutProjectInput!]
  upsert: [ProjectRolesUpsertWithWhereUniqueWithoutProjectInput!]
}

input ProjectRolesUpdateManyWithoutRoleInput {
  create: [ProjectRolesCreateWithoutRoleInput!]
  connect: [ProjectRolesWhereUniqueInput!]
  disconnect: [ProjectRolesWhereUniqueInput!]
  delete: [ProjectRolesWhereUniqueInput!]
  update: [ProjectRolesUpdateWithWhereUniqueWithoutRoleInput!]
  upsert: [ProjectRolesUpsertWithWhereUniqueWithoutRoleInput!]
}

input ProjectRolesUpdateWithoutContributorDataInput {
  price: Float
  hours: Int
  startAt: DateTime
  endAt: DateTime
  role: RoleUpdateOneRequiredWithoutProjectRolesInput
  project: ProjectUpdateOneRequiredWithoutProjectRolesInput
}

input ProjectRolesUpdateWithoutProjectDataInput {
  price: Float
  hours: Int
  startAt: DateTime
  endAt: DateTime
  role: RoleUpdateOneRequiredWithoutProjectRolesInput
  contributor: ContributorUpdateOneWithoutProjectRolesInput
}

input ProjectRolesUpdateWithoutRoleDataInput {
  price: Float
  hours: Int
  startAt: DateTime
  endAt: DateTime
  project: ProjectUpdateOneRequiredWithoutProjectRolesInput
  contributor: ContributorUpdateOneWithoutProjectRolesInput
}

input ProjectRolesUpdateWithWhereUniqueWithoutContributorInput {
  where: ProjectRolesWhereUniqueInput!
  data: ProjectRolesUpdateWithoutContributorDataInput!
}

input ProjectRolesUpdateWithWhereUniqueWithoutProjectInput {
  where: ProjectRolesWhereUniqueInput!
  data: ProjectRolesUpdateWithoutProjectDataInput!
}

input ProjectRolesUpdateWithWhereUniqueWithoutRoleInput {
  where: ProjectRolesWhereUniqueInput!
  data: ProjectRolesUpdateWithoutRoleDataInput!
}

input ProjectRolesUpsertWithWhereUniqueWithoutContributorInput {
  where: ProjectRolesWhereUniqueInput!
  update: ProjectRolesUpdateWithoutContributorDataInput!
  create: ProjectRolesCreateWithoutContributorInput!
}

input ProjectRolesUpsertWithWhereUniqueWithoutProjectInput {
  where: ProjectRolesWhereUniqueInput!
  update: ProjectRolesUpdateWithoutProjectDataInput!
  create: ProjectRolesCreateWithoutProjectInput!
}

input ProjectRolesUpsertWithWhereUniqueWithoutRoleInput {
  where: ProjectRolesWhereUniqueInput!
  update: ProjectRolesUpdateWithoutRoleDataInput!
  create: ProjectRolesCreateWithoutRoleInput!
}

input ProjectRolesWhereInput {
  """Logical AND on all given filters."""
  AND: [ProjectRolesWhereInput!]

  """Logical OR on all given filters."""
  OR: [ProjectRolesWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ProjectRolesWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  price: Float

  """All values that are not equal to given value."""
  price_not: Float

  """All values that are contained in given list."""
  price_in: [Float!]

  """All values that are not contained in given list."""
  price_not_in: [Float!]

  """All values less than the given value."""
  price_lt: Float

  """All values less than or equal the given value."""
  price_lte: Float

  """All values greater than the given value."""
  price_gt: Float

  """All values greater than or equal the given value."""
  price_gte: Float
  hours: Int

  """All values that are not equal to given value."""
  hours_not: Int

  """All values that are contained in given list."""
  hours_in: [Int!]

  """All values that are not contained in given list."""
  hours_not_in: [Int!]

  """All values less than the given value."""
  hours_lt: Int

  """All values less than or equal the given value."""
  hours_lte: Int

  """All values greater than the given value."""
  hours_gt: Int

  """All values greater than or equal the given value."""
  hours_gte: Int
  startAt: DateTime

  """All values that are not equal to given value."""
  startAt_not: DateTime

  """All values that are contained in given list."""
  startAt_in: [DateTime!]

  """All values that are not contained in given list."""
  startAt_not_in: [DateTime!]

  """All values less than the given value."""
  startAt_lt: DateTime

  """All values less than or equal the given value."""
  startAt_lte: DateTime

  """All values greater than the given value."""
  startAt_gt: DateTime

  """All values greater than or equal the given value."""
  startAt_gte: DateTime
  endAt: DateTime

  """All values that are not equal to given value."""
  endAt_not: DateTime

  """All values that are contained in given list."""
  endAt_in: [DateTime!]

  """All values that are not contained in given list."""
  endAt_not_in: [DateTime!]

  """All values less than the given value."""
  endAt_lt: DateTime

  """All values less than or equal the given value."""
  endAt_lte: DateTime

  """All values greater than the given value."""
  endAt_gt: DateTime

  """All values greater than or equal the given value."""
  endAt_gte: DateTime
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  role: RoleWhereInput
  project: ProjectWhereInput
  contributor: ContributorWhereInput
}

input ProjectRolesWhereUniqueInput {
  id: ID
}

enum ProjectStatus {
  OPEN
  TODO
  PLANNED
  INPROGRESS
  DONE
  CANCELED
}

type ProjectSubscriptionPayload {
  mutation: MutationType!
  node: Project
  updatedFields: [String!]
  previousValues: ProjectPreviousValues
}

input ProjectSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [ProjectSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [ProjectSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ProjectSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: ProjectWhereInput
}

input ProjectUpdateInput {
  name: String
  sponsor: String
  objectives: String
  motivations: String
  limitations: String
  restrictions: String
  status: ProjectStatus
  startAt: DateTime
  endAt: DateTime
  features: FeatureUpdateManyWithoutProjectInput
  lifecycle: LifecycleUpdateOneWithoutProjectsInput
  projectRoles: ProjectRolesUpdateManyWithoutProjectInput
}

input ProjectUpdateManyWithoutLifecycleInput {
  create: [ProjectCreateWithoutLifecycleInput!]
  connect: [ProjectWhereUniqueInput!]
  disconnect: [ProjectWhereUniqueInput!]
  delete: [ProjectWhereUniqueInput!]
  update: [ProjectUpdateWithWhereUniqueWithoutLifecycleInput!]
  upsert: [ProjectUpsertWithWhereUniqueWithoutLifecycleInput!]
}

input ProjectUpdateOneRequiredWithoutFeaturesInput {
  create: ProjectCreateWithoutFeaturesInput
  connect: ProjectWhereUniqueInput
  update: ProjectUpdateWithoutFeaturesDataInput
  upsert: ProjectUpsertWithoutFeaturesInput
}

input ProjectUpdateOneRequiredWithoutProjectRolesInput {
  create: ProjectCreateWithoutProjectRolesInput
  connect: ProjectWhereUniqueInput
  update: ProjectUpdateWithoutProjectRolesDataInput
  upsert: ProjectUpsertWithoutProjectRolesInput
}

input ProjectUpdateWithoutFeaturesDataInput {
  name: String
  sponsor: String
  objectives: String
  motivations: String
  limitations: String
  restrictions: String
  status: ProjectStatus
  startAt: DateTime
  endAt: DateTime
  lifecycle: LifecycleUpdateOneWithoutProjectsInput
  projectRoles: ProjectRolesUpdateManyWithoutProjectInput
}

input ProjectUpdateWithoutLifecycleDataInput {
  name: String
  sponsor: String
  objectives: String
  motivations: String
  limitations: String
  restrictions: String
  status: ProjectStatus
  startAt: DateTime
  endAt: DateTime
  features: FeatureUpdateManyWithoutProjectInput
  projectRoles: ProjectRolesUpdateManyWithoutProjectInput
}

input ProjectUpdateWithoutProjectRolesDataInput {
  name: String
  sponsor: String
  objectives: String
  motivations: String
  limitations: String
  restrictions: String
  status: ProjectStatus
  startAt: DateTime
  endAt: DateTime
  features: FeatureUpdateManyWithoutProjectInput
  lifecycle: LifecycleUpdateOneWithoutProjectsInput
}

input ProjectUpdateWithWhereUniqueWithoutLifecycleInput {
  where: ProjectWhereUniqueInput!
  data: ProjectUpdateWithoutLifecycleDataInput!
}

input ProjectUpsertWithoutFeaturesInput {
  update: ProjectUpdateWithoutFeaturesDataInput!
  create: ProjectCreateWithoutFeaturesInput!
}

input ProjectUpsertWithoutProjectRolesInput {
  update: ProjectUpdateWithoutProjectRolesDataInput!
  create: ProjectCreateWithoutProjectRolesInput!
}

input ProjectUpsertWithWhereUniqueWithoutLifecycleInput {
  where: ProjectWhereUniqueInput!
  update: ProjectUpdateWithoutLifecycleDataInput!
  create: ProjectCreateWithoutLifecycleInput!
}

input ProjectWhereInput {
  """Logical AND on all given filters."""
  AND: [ProjectWhereInput!]

  """Logical OR on all given filters."""
  OR: [ProjectWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ProjectWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  sponsor: String

  """All values that are not equal to given value."""
  sponsor_not: String

  """All values that are contained in given list."""
  sponsor_in: [String!]

  """All values that are not contained in given list."""
  sponsor_not_in: [String!]

  """All values less than the given value."""
  sponsor_lt: String

  """All values less than or equal the given value."""
  sponsor_lte: String

  """All values greater than the given value."""
  sponsor_gt: String

  """All values greater than or equal the given value."""
  sponsor_gte: String

  """All values containing the given string."""
  sponsor_contains: String

  """All values not containing the given string."""
  sponsor_not_contains: String

  """All values starting with the given string."""
  sponsor_starts_with: String

  """All values not starting with the given string."""
  sponsor_not_starts_with: String

  """All values ending with the given string."""
  sponsor_ends_with: String

  """All values not ending with the given string."""
  sponsor_not_ends_with: String
  objectives: String

  """All values that are not equal to given value."""
  objectives_not: String

  """All values that are contained in given list."""
  objectives_in: [String!]

  """All values that are not contained in given list."""
  objectives_not_in: [String!]

  """All values less than the given value."""
  objectives_lt: String

  """All values less than or equal the given value."""
  objectives_lte: String

  """All values greater than the given value."""
  objectives_gt: String

  """All values greater than or equal the given value."""
  objectives_gte: String

  """All values containing the given string."""
  objectives_contains: String

  """All values not containing the given string."""
  objectives_not_contains: String

  """All values starting with the given string."""
  objectives_starts_with: String

  """All values not starting with the given string."""
  objectives_not_starts_with: String

  """All values ending with the given string."""
  objectives_ends_with: String

  """All values not ending with the given string."""
  objectives_not_ends_with: String
  motivations: String

  """All values that are not equal to given value."""
  motivations_not: String

  """All values that are contained in given list."""
  motivations_in: [String!]

  """All values that are not contained in given list."""
  motivations_not_in: [String!]

  """All values less than the given value."""
  motivations_lt: String

  """All values less than or equal the given value."""
  motivations_lte: String

  """All values greater than the given value."""
  motivations_gt: String

  """All values greater than or equal the given value."""
  motivations_gte: String

  """All values containing the given string."""
  motivations_contains: String

  """All values not containing the given string."""
  motivations_not_contains: String

  """All values starting with the given string."""
  motivations_starts_with: String

  """All values not starting with the given string."""
  motivations_not_starts_with: String

  """All values ending with the given string."""
  motivations_ends_with: String

  """All values not ending with the given string."""
  motivations_not_ends_with: String
  limitations: String

  """All values that are not equal to given value."""
  limitations_not: String

  """All values that are contained in given list."""
  limitations_in: [String!]

  """All values that are not contained in given list."""
  limitations_not_in: [String!]

  """All values less than the given value."""
  limitations_lt: String

  """All values less than or equal the given value."""
  limitations_lte: String

  """All values greater than the given value."""
  limitations_gt: String

  """All values greater than or equal the given value."""
  limitations_gte: String

  """All values containing the given string."""
  limitations_contains: String

  """All values not containing the given string."""
  limitations_not_contains: String

  """All values starting with the given string."""
  limitations_starts_with: String

  """All values not starting with the given string."""
  limitations_not_starts_with: String

  """All values ending with the given string."""
  limitations_ends_with: String

  """All values not ending with the given string."""
  limitations_not_ends_with: String
  restrictions: String

  """All values that are not equal to given value."""
  restrictions_not: String

  """All values that are contained in given list."""
  restrictions_in: [String!]

  """All values that are not contained in given list."""
  restrictions_not_in: [String!]

  """All values less than the given value."""
  restrictions_lt: String

  """All values less than or equal the given value."""
  restrictions_lte: String

  """All values greater than the given value."""
  restrictions_gt: String

  """All values greater than or equal the given value."""
  restrictions_gte: String

  """All values containing the given string."""
  restrictions_contains: String

  """All values not containing the given string."""
  restrictions_not_contains: String

  """All values starting with the given string."""
  restrictions_starts_with: String

  """All values not starting with the given string."""
  restrictions_not_starts_with: String

  """All values ending with the given string."""
  restrictions_ends_with: String

  """All values not ending with the given string."""
  restrictions_not_ends_with: String
  status: ProjectStatus

  """All values that are not equal to given value."""
  status_not: ProjectStatus

  """All values that are contained in given list."""
  status_in: [ProjectStatus!]

  """All values that are not contained in given list."""
  status_not_in: [ProjectStatus!]
  startAt: DateTime

  """All values that are not equal to given value."""
  startAt_not: DateTime

  """All values that are contained in given list."""
  startAt_in: [DateTime!]

  """All values that are not contained in given list."""
  startAt_not_in: [DateTime!]

  """All values less than the given value."""
  startAt_lt: DateTime

  """All values less than or equal the given value."""
  startAt_lte: DateTime

  """All values greater than the given value."""
  startAt_gt: DateTime

  """All values greater than or equal the given value."""
  startAt_gte: DateTime
  endAt: DateTime

  """All values that are not equal to given value."""
  endAt_not: DateTime

  """All values that are contained in given list."""
  endAt_in: [DateTime!]

  """All values that are not contained in given list."""
  endAt_not_in: [DateTime!]

  """All values less than the given value."""
  endAt_lt: DateTime

  """All values less than or equal the given value."""
  endAt_lte: DateTime

  """All values greater than the given value."""
  endAt_gt: DateTime

  """All values greater than or equal the given value."""
  endAt_gte: DateTime
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  features_every: FeatureWhereInput
  features_some: FeatureWhereInput
  features_none: FeatureWhereInput
  lifecycle: LifecycleWhereInput
  projectRoles_every: ProjectRolesWhereInput
  projectRoles_some: ProjectRolesWhereInput
  projectRoles_none: ProjectRolesWhereInput
}

input ProjectWhereUniqueInput {
  id: ID
}

type Query {
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  contributors(where: ContributorWhereInput, orderBy: ContributorOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Contributor]!
  contributorExperiences(where: ContributorExperienceWhereInput, orderBy: ContributorExperienceOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ContributorExperience]!
  contributorFormations(where: ContributorFormationWhereInput, orderBy: ContributorFormationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ContributorFormation]!
  projects(where: ProjectWhereInput, orderBy: ProjectOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Project]!
  projectRoleses(where: ProjectRolesWhereInput, orderBy: ProjectRolesOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ProjectRoles]!
  roles(where: RoleWhereInput, orderBy: RoleOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Role]!
  roleLevels(where: RoleLevelWhereInput, orderBy: RoleLevelOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [RoleLevel]!
  lifecycles(where: LifecycleWhereInput, orderBy: LifecycleOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Lifecycle]!
  features(where: FeatureWhereInput, orderBy: FeatureOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Feature]!
  epics(where: EpicWhereInput, orderBy: EpicOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Epic]!
  user(where: UserWhereUniqueInput!): User
  contributor(where: ContributorWhereUniqueInput!): Contributor
  contributorExperience(where: ContributorExperienceWhereUniqueInput!): ContributorExperience
  contributorFormation(where: ContributorFormationWhereUniqueInput!): ContributorFormation
  project(where: ProjectWhereUniqueInput!): Project
  projectRoles(where: ProjectRolesWhereUniqueInput!): ProjectRoles
  role(where: RoleWhereUniqueInput!): Role
  roleLevel(where: RoleLevelWhereUniqueInput!): RoleLevel
  lifecycle(where: LifecycleWhereUniqueInput!): Lifecycle
  feature(where: FeatureWhereUniqueInput!): Feature
  epic(where: EpicWhereUniqueInput!): Epic
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  contributorsConnection(where: ContributorWhereInput, orderBy: ContributorOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ContributorConnection!
  contributorExperiencesConnection(where: ContributorExperienceWhereInput, orderBy: ContributorExperienceOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ContributorExperienceConnection!
  contributorFormationsConnection(where: ContributorFormationWhereInput, orderBy: ContributorFormationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ContributorFormationConnection!
  projectsConnection(where: ProjectWhereInput, orderBy: ProjectOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ProjectConnection!
  projectRolesesConnection(where: ProjectRolesWhereInput, orderBy: ProjectRolesOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ProjectRolesConnection!
  rolesConnection(where: RoleWhereInput, orderBy: RoleOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): RoleConnection!
  roleLevelsConnection(where: RoleLevelWhereInput, orderBy: RoleLevelOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): RoleLevelConnection!
  lifecyclesConnection(where: LifecycleWhereInput, orderBy: LifecycleOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): LifecycleConnection!
  featuresConnection(where: FeatureWhereInput, orderBy: FeatureOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): FeatureConnection!
  epicsConnection(where: EpicWhereInput, orderBy: EpicOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): EpicConnection!

  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node
}

type Role implements Node {
  id: ID!
  name: String!
  description: String
  department: String
  createdAt: DateTime!
  updatedAt: DateTime!
  roleLevels(where: RoleLevelWhereInput, orderBy: RoleLevelOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [RoleLevel!]
  projectRoles(where: ProjectRolesWhereInput, orderBy: ProjectRolesOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ProjectRoles!]
}

"""A connection to a list of items."""
type RoleConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [RoleEdge]!
  aggregate: AggregateRole!
}

input RoleCreateInput {
  name: String!
  description: String
  department: String
  roleLevels: RoleLevelCreateManyWithoutRoleInput
  projectRoles: ProjectRolesCreateManyWithoutRoleInput
}

input RoleCreateOneWithoutProjectRolesInput {
  create: RoleCreateWithoutProjectRolesInput
  connect: RoleWhereUniqueInput
}

input RoleCreateOneWithoutRoleLevelsInput {
  create: RoleCreateWithoutRoleLevelsInput
  connect: RoleWhereUniqueInput
}

input RoleCreateWithoutProjectRolesInput {
  name: String!
  description: String
  department: String
  roleLevels: RoleLevelCreateManyWithoutRoleInput
}

input RoleCreateWithoutRoleLevelsInput {
  name: String!
  description: String
  department: String
  projectRoles: ProjectRolesCreateManyWithoutRoleInput
}

"""An edge in a connection."""
type RoleEdge {
  """The item at the end of the edge."""
  node: Role!

  """A cursor for use in pagination."""
  cursor: String!
}

type RoleLevel implements Node {
  id: ID!
  level: RoleLevelType!
  experience: String
  priceMin: Float!
  priceMax: Float!
  createdAt: DateTime!
  updatedAt: DateTime!
  role: Role!
}

"""A connection to a list of items."""
type RoleLevelConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [RoleLevelEdge]!
  aggregate: AggregateRoleLevel!
}

input RoleLevelCreateInput {
  level: RoleLevelType!
  experience: String
  priceMin: Float
  priceMax: Float
  role: RoleCreateOneWithoutRoleLevelsInput!
}

input RoleLevelCreateManyWithoutRoleInput {
  create: [RoleLevelCreateWithoutRoleInput!]
  connect: [RoleLevelWhereUniqueInput!]
}

input RoleLevelCreateWithoutRoleInput {
  level: RoleLevelType!
  experience: String
  priceMin: Float
  priceMax: Float
}

"""An edge in a connection."""
type RoleLevelEdge {
  """The item at the end of the edge."""
  node: RoleLevel!

  """A cursor for use in pagination."""
  cursor: String!
}

enum RoleLevelOrderByInput {
  id_ASC
  id_DESC
  level_ASC
  level_DESC
  experience_ASC
  experience_DESC
  priceMin_ASC
  priceMin_DESC
  priceMax_ASC
  priceMax_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type RoleLevelPreviousValues {
  id: ID!
  level: RoleLevelType!
  experience: String
  priceMin: Float!
  priceMax: Float!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type RoleLevelSubscriptionPayload {
  mutation: MutationType!
  node: RoleLevel
  updatedFields: [String!]
  previousValues: RoleLevelPreviousValues
}

input RoleLevelSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [RoleLevelSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [RoleLevelSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [RoleLevelSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: RoleLevelWhereInput
}

enum RoleLevelType {
  TRAINEE
  JUNIOR
  INTERMEDIATE
  SENIOR
  EXPERT
}

input RoleLevelUpdateInput {
  level: RoleLevelType
  experience: String
  priceMin: Float
  priceMax: Float
  role: RoleUpdateOneRequiredWithoutRoleLevelsInput
}

input RoleLevelUpdateManyWithoutRoleInput {
  create: [RoleLevelCreateWithoutRoleInput!]
  connect: [RoleLevelWhereUniqueInput!]
  disconnect: [RoleLevelWhereUniqueInput!]
  delete: [RoleLevelWhereUniqueInput!]
  update: [RoleLevelUpdateWithWhereUniqueWithoutRoleInput!]
  upsert: [RoleLevelUpsertWithWhereUniqueWithoutRoleInput!]
}

input RoleLevelUpdateWithoutRoleDataInput {
  level: RoleLevelType
  experience: String
  priceMin: Float
  priceMax: Float
}

input RoleLevelUpdateWithWhereUniqueWithoutRoleInput {
  where: RoleLevelWhereUniqueInput!
  data: RoleLevelUpdateWithoutRoleDataInput!
}

input RoleLevelUpsertWithWhereUniqueWithoutRoleInput {
  where: RoleLevelWhereUniqueInput!
  update: RoleLevelUpdateWithoutRoleDataInput!
  create: RoleLevelCreateWithoutRoleInput!
}

input RoleLevelWhereInput {
  """Logical AND on all given filters."""
  AND: [RoleLevelWhereInput!]

  """Logical OR on all given filters."""
  OR: [RoleLevelWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [RoleLevelWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  level: RoleLevelType

  """All values that are not equal to given value."""
  level_not: RoleLevelType

  """All values that are contained in given list."""
  level_in: [RoleLevelType!]

  """All values that are not contained in given list."""
  level_not_in: [RoleLevelType!]
  experience: String

  """All values that are not equal to given value."""
  experience_not: String

  """All values that are contained in given list."""
  experience_in: [String!]

  """All values that are not contained in given list."""
  experience_not_in: [String!]

  """All values less than the given value."""
  experience_lt: String

  """All values less than or equal the given value."""
  experience_lte: String

  """All values greater than the given value."""
  experience_gt: String

  """All values greater than or equal the given value."""
  experience_gte: String

  """All values containing the given string."""
  experience_contains: String

  """All values not containing the given string."""
  experience_not_contains: String

  """All values starting with the given string."""
  experience_starts_with: String

  """All values not starting with the given string."""
  experience_not_starts_with: String

  """All values ending with the given string."""
  experience_ends_with: String

  """All values not ending with the given string."""
  experience_not_ends_with: String
  priceMin: Float

  """All values that are not equal to given value."""
  priceMin_not: Float

  """All values that are contained in given list."""
  priceMin_in: [Float!]

  """All values that are not contained in given list."""
  priceMin_not_in: [Float!]

  """All values less than the given value."""
  priceMin_lt: Float

  """All values less than or equal the given value."""
  priceMin_lte: Float

  """All values greater than the given value."""
  priceMin_gt: Float

  """All values greater than or equal the given value."""
  priceMin_gte: Float
  priceMax: Float

  """All values that are not equal to given value."""
  priceMax_not: Float

  """All values that are contained in given list."""
  priceMax_in: [Float!]

  """All values that are not contained in given list."""
  priceMax_not_in: [Float!]

  """All values less than the given value."""
  priceMax_lt: Float

  """All values less than or equal the given value."""
  priceMax_lte: Float

  """All values greater than the given value."""
  priceMax_gt: Float

  """All values greater than or equal the given value."""
  priceMax_gte: Float
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  role: RoleWhereInput
}

input RoleLevelWhereUniqueInput {
  id: ID
}

enum RoleOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  description_ASC
  description_DESC
  department_ASC
  department_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type RolePreviousValues {
  id: ID!
  name: String!
  description: String
  department: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

type RoleSubscriptionPayload {
  mutation: MutationType!
  node: Role
  updatedFields: [String!]
  previousValues: RolePreviousValues
}

input RoleSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [RoleSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [RoleSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [RoleSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: RoleWhereInput
}

input RoleUpdateInput {
  name: String
  description: String
  department: String
  roleLevels: RoleLevelUpdateManyWithoutRoleInput
  projectRoles: ProjectRolesUpdateManyWithoutRoleInput
}

input RoleUpdateOneRequiredWithoutProjectRolesInput {
  create: RoleCreateWithoutProjectRolesInput
  connect: RoleWhereUniqueInput
  update: RoleUpdateWithoutProjectRolesDataInput
  upsert: RoleUpsertWithoutProjectRolesInput
}

input RoleUpdateOneRequiredWithoutRoleLevelsInput {
  create: RoleCreateWithoutRoleLevelsInput
  connect: RoleWhereUniqueInput
  update: RoleUpdateWithoutRoleLevelsDataInput
  upsert: RoleUpsertWithoutRoleLevelsInput
}

input RoleUpdateWithoutProjectRolesDataInput {
  name: String
  description: String
  department: String
  roleLevels: RoleLevelUpdateManyWithoutRoleInput
}

input RoleUpdateWithoutRoleLevelsDataInput {
  name: String
  description: String
  department: String
  projectRoles: ProjectRolesUpdateManyWithoutRoleInput
}

input RoleUpsertWithoutProjectRolesInput {
  update: RoleUpdateWithoutProjectRolesDataInput!
  create: RoleCreateWithoutProjectRolesInput!
}

input RoleUpsertWithoutRoleLevelsInput {
  update: RoleUpdateWithoutRoleLevelsDataInput!
  create: RoleCreateWithoutRoleLevelsInput!
}

input RoleWhereInput {
  """Logical AND on all given filters."""
  AND: [RoleWhereInput!]

  """Logical OR on all given filters."""
  OR: [RoleWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [RoleWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
  department: String

  """All values that are not equal to given value."""
  department_not: String

  """All values that are contained in given list."""
  department_in: [String!]

  """All values that are not contained in given list."""
  department_not_in: [String!]

  """All values less than the given value."""
  department_lt: String

  """All values less than or equal the given value."""
  department_lte: String

  """All values greater than the given value."""
  department_gt: String

  """All values greater than or equal the given value."""
  department_gte: String

  """All values containing the given string."""
  department_contains: String

  """All values not containing the given string."""
  department_not_contains: String

  """All values starting with the given string."""
  department_starts_with: String

  """All values not starting with the given string."""
  department_not_starts_with: String

  """All values ending with the given string."""
  department_ends_with: String

  """All values not ending with the given string."""
  department_not_ends_with: String
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  roleLevels_every: RoleLevelWhereInput
  roleLevels_some: RoleLevelWhereInput
  roleLevels_none: RoleLevelWhereInput
  projectRoles_every: ProjectRolesWhereInput
  projectRoles_some: ProjectRolesWhereInput
  projectRoles_none: ProjectRolesWhereInput
}

input RoleWhereUniqueInput {
  id: ID
}

type Subscription {
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
  contributor(where: ContributorSubscriptionWhereInput): ContributorSubscriptionPayload
  contributorExperience(where: ContributorExperienceSubscriptionWhereInput): ContributorExperienceSubscriptionPayload
  contributorFormation(where: ContributorFormationSubscriptionWhereInput): ContributorFormationSubscriptionPayload
  project(where: ProjectSubscriptionWhereInput): ProjectSubscriptionPayload
  projectRoles(where: ProjectRolesSubscriptionWhereInput): ProjectRolesSubscriptionPayload
  role(where: RoleSubscriptionWhereInput): RoleSubscriptionPayload
  roleLevel(where: RoleLevelSubscriptionWhereInput): RoleLevelSubscriptionPayload
  lifecycle(where: LifecycleSubscriptionWhereInput): LifecycleSubscriptionPayload
  feature(where: FeatureSubscriptionWhereInput): FeatureSubscriptionPayload
  epic(where: EpicSubscriptionWhereInput): EpicSubscriptionPayload
}

type User implements Node {
  id: ID!
  name: String!
  email: String!
  password: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""A connection to a list of items."""
type UserConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  name: String!
  email: String!
  password: String!
}

"""An edge in a connection."""
type UserEdge {
  """The item at the end of the edge."""
  node: User!

  """A cursor for use in pagination."""
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  email_ASC
  email_DESC
  password_ASC
  password_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type UserPreviousValues {
  id: ID!
  name: String!
  email: String!
  password: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [UserSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: UserWhereInput
}

input UserUpdateInput {
  name: String
  email: String
  password: String
}

input UserWhereInput {
  """Logical AND on all given filters."""
  AND: [UserWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  email: String

  """All values that are not equal to given value."""
  email_not: String

  """All values that are contained in given list."""
  email_in: [String!]

  """All values that are not contained in given list."""
  email_not_in: [String!]

  """All values less than the given value."""
  email_lt: String

  """All values less than or equal the given value."""
  email_lte: String

  """All values greater than the given value."""
  email_gt: String

  """All values greater than or equal the given value."""
  email_gte: String

  """All values containing the given string."""
  email_contains: String

  """All values not containing the given string."""
  email_not_contains: String

  """All values starting with the given string."""
  email_starts_with: String

  """All values not starting with the given string."""
  email_not_starts_with: String

  """All values ending with the given string."""
  email_ends_with: String

  """All values not ending with the given string."""
  email_not_ends_with: String
  password: String

  """All values that are not equal to given value."""
  password_not: String

  """All values that are contained in given list."""
  password_in: [String!]

  """All values that are not contained in given list."""
  password_not_in: [String!]

  """All values less than the given value."""
  password_lt: String

  """All values less than or equal the given value."""
  password_lte: String

  """All values greater than the given value."""
  password_gt: String

  """All values greater than or equal the given value."""
  password_gte: String

  """All values containing the given string."""
  password_contains: String

  """All values not containing the given string."""
  password_not_contains: String

  """All values starting with the given string."""
  password_starts_with: String

  """All values not starting with the given string."""
  password_not_starts_with: String

  """All values ending with the given string."""
  password_ends_with: String

  """All values not ending with the given string."""
  password_not_ends_with: String
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
}

input UserWhereUniqueInput {
  id: ID
  email: String
}
