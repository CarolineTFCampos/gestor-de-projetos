type User {
  id: ID! @unique
  name: String!
  email: String! @unique
  password: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type Contributor {
  id: ID! @unique
  name: String!
  email: String! @unique
  emailPrivate: String
  doc: String! @unique
  phone: String!
  address: String!
  price: Float! @default(value: 0)
  active: Boolean! @default(value: true)
  twPeopleId: String
  createdAt: DateTime!
  updatedAt: DateTime!
  projectRoles: [ProjectRoleContributor!]!
    @relation(name: "ProjectRoleContributorContributor")
  experiences: [ContributorExperience!]!
    @relation(name: "ContributorExperiences")
  formations: [ContributorFormation!]! @relation(name: "ContributorFormations")
  milestones: [Milestone!]! @relation(name: "ContributorMilestones")
}

type ContributorExperience {
  id: ID! @unique
  name: String!
  company: String!
  description: String
  startAt: DateTime!
  endAt: DateTime!
  createdAt: DateTime!
  updatedAt: DateTime!
  contributor: Contributor! @relation(name: "ContributorExperiences")
}

type ContributorFormation {
  id: ID! @unique
  name: String!
  institution: String!
  description: String
  startAt: DateTime!
  endAt: DateTime!
  createdAt: DateTime!
  updatedAt: DateTime!
  contributor: Contributor! @relation(name: "ContributorFormations")
}

enum ProjectStatus {
  OPEN
  TODO
  PLANNED
  INPROGRESS
  DONE
  CANCELED
}

type Project {
  id: ID! @unique
  name: String!
  sponsor: String!
  objectives: String
  motivations: String
  limitations: String
  restrictions: String
  status: ProjectStatus
  startAt: DateTime
  endAt: DateTime
  twProjectId: String
  twTaskListId: String
  createdAt: DateTime!
  updatedAt: DateTime!
  lifecycle: Lifecycle @relation(name: "LifecycleProjects")
  features: [Feature!]! @relation(name: "ProjectFeatures")
  milestones: [Milestone!]! @relation(name: "ProjectMilestones")
  projectRoles: [ProjectRole!]! @relation(name: "ProjectProjectRoles")
}

type ProjectRole {
  id: ID! @unique
  estimatePrice: Float @default(value: 0)
  estimateEffort: Int @default(value: 0)
  createdAt: DateTime!
  updatedAt: DateTime!
  role: Role! @relation(name: "ProjectRoleRole")
  project: Project! @relation(name: "ProjectProjectRoles")
  contributors: [ProjectRoleContributor!]!
    @relation(name: "ProjectRoleContributors")
}

type ProjectRoleContributor {
  id: ID! @unique
  price: Float! @default(value: 0)
  effort: Int @default(value: 0)
  estimateEffort: Int! @default(value: 0)
  startAt: DateTime!
  endAt: DateTime!
  createdAt: DateTime!
  updatedAt: DateTime!
  roleLevel: RoleLevelType!
  projectRole: ProjectRole! @relation(name: "ProjectRoleContributors")
  contributor: Contributor! @relation(name: "ProjectRoleContributorContributor")
}

type Role {
  id: ID! @unique
  name: String!
  description: String
  department: String
  createdAt: DateTime!
  updatedAt: DateTime!
  roleLevels: [RoleLevel!]! @relation(name: "RoleLevels", onDelete: CASCADE)
  projectRoles: [ProjectRole!]! @relation(name: "ProjectRoleRole")
}

enum RoleLevelType {
  TRAINEE
  JUNIOR
  INTERMEDIATE
  SENIOR
  EXPERT
}

type RoleLevel {
  id: ID! @unique
  level: RoleLevelType!
  experience: String
  priceMin: Float! @default(value: 0)
  priceMax: Float! @default(value: 0)
  createdAt: DateTime!
  updatedAt: DateTime!
  role: Role! @relation(name: "RoleLevels")
}

enum MilestoneStatus {
  OPEN
  DONE
  CANCELED
}

type Milestone {
  id: ID! @unique
  name: String!
  description: String
  status: MilestoneStatus!
  dueDate: DateTime!
  createdAt: DateTime!
  updatedAt: DateTime!
  project: Project! @relation(name: "ProjectMilestones")
  contributor: Contributor! @relation(name: "ContributorMilestones")
}

type Lifecycle {
  id: ID! @unique
  name: String!
  phase: [String!]!
  createdAt: DateTime!
  updatedAt: DateTime!
  projects: [Project!]! @relation(name: "LifecycleProjects")
}

type Feature {
  id: ID! @unique
  name: String!
  description: String
  priority: Int @default(value: 0)
  estimateSize: Int @default(value: 0)
  estimatePrice: Float @default(value: 0)
  estimateEffort: Int @default(value: 0)
  estimateStart: DateTime
  estimateEnd: DateTime
  twTaskId: String
  createdAt: DateTime!
  updatedAt: DateTime!
  epics: [Epic!]! @relation(name: "FeatureEpics")
  project: Project! @relation(name: "ProjectFeatures")
  #Effort = Somatoria de Horas dos Epics
  #Price = Somatoria de custos dos Epics
  #Estado
  #Release
  #Responsaveis  (ANALISAR)
}

type Epic {
  id: ID! @unique
  name: String!
  description: String
  priority: Int @default(value: 0)
  estimateSize: Int @default(value: 0)
  estimatePrice: Float @default(value: 0)
  estimateEffort: Int @default(value: 0)
  estimateStart: DateTime
  estimateEnd: DateTime
  twTaskId: String
  createdAt: DateTime!
  updatedAt: DateTime!
  feature: Feature! @relation(name: "FeatureEpics")
  userStories: [UserStory!]! @relation(name: "EpicUserStories")
  #Effort = Somatoria de Horas dos USs
  #Price = Somatoria de custos dos USs
  #Estado
  #Release
  #Responsaveis (ANALISAR)
}

type UserStory {
  id: ID! @unique
  name: String!
  description: String
  priority: Int @default(value: 0)
  estimateEffort: Int @default(value: 0)
  estimateStart: DateTime
  estimateEnd: DateTime
  twTaskId: String
  createdAt: DateTime!
  updatedAt: DateTime!
  epic: Epic! @relation(name: "EpicUserStories")
  #Effort = Somatoria de Horas lan√ßadas nas tasks TW
  #Estado
  #Sprint
  #Responsaveis (ANALISAR)
}
